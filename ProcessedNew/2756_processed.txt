lower confidence bounds for prediction accuracy in high dimensions via arohil monte carlo motivation: implementation and development of statistical methods for high-dimensional data often require high-dimensional monte carlo simulations. simulations are used to assess performance, evaluate robustness, and in some cases for implementation of algorithms. but simulation in high dimensions is often very complex, cumbersome and slow. as a result, performance evaluations are often limited, robustness minimally investigated and dissemination impeded by implementation challenges. this article presents a method for converting complex, slow high-dimensional monte carlo simulations into simpler, faster lower dimensional simulations. results: we implement the method by converting a previous monte carlo algorithm into this novel monte carlo, which we call arohil monte carlo. arohil monte carlo is shown to exactly or closely match pure monte carlo results in a number of examples. it is shown that computing time can be reduced by several orders of magnitude. the confidence bound method implemented using arohil outperforms the pure monte carlo method. finally, the utility of the method is shown by application to a number of real microarray datasets. availability: the r computer program for forming confidence bounds is freely available for download at the url http://dobbinke .myweb.uga.edu/rprogramarohilloweraccuracybound.txt.this article presents a novel approach to monte carlo simulations in high dimensions. the approach permits routines to be written in simpler and faster code using mathematical modeling. the savings comes from reducing the computational dimension of the monte carlo simulation from very high dimension to a much lower dimensional space. as we will show, this computational savings makes it possible to provide r functions to perform statistical analyses that previously required a compiled language such as c++. moreover, the r programs are significantly faster and more transparent (enhancing reproducibility) than the compiled programs, because the underlying models have been streamlined. we make to whom correspondence should be addressed. available such a program with this publication. more generally, this approach, by providing a faster method for performing simulations, can enable method developers to consider the robustness of novel procedures across a wider range of simulation scenarios than would otherwise be feasible. monte carlo simulations are commonly encountered in papers on high-dimensional methodologies. perhaps the most common use of monte carlo simulations is to evaluate the performance characteristics of novel statistical procedures, such as the performance of classifiers based on partial least squares , regularization methods for variable selection or evaluation of multiple hypothesis testing error control methods . the advantages of monte carlo investigations are that the truth can be known exactly, and model assumptions can be violated in systematic ways to explore the limits of robustness. some other methodologies also use monte carlo simulations as part of their algorithms. this new simulation procedure is called adequate representation of high dimensions in low dimensions (arohil) monte carlo. there are two types of arohil monte carlo. the first type does not involve any resampling. the basic idea behind this type of monte carlo is to split the monte carlo simulation into two subsimulations. one simulation represents the dimension-reducing feature selection step. the second simulation represents the conditional distribution of the features given that they were selected, and can typically be carried out in a space with dimension similar to the number of features selected. the second type of arohil monte carlo does involve resampling, such as bootstrap or cross-validation. in this case, resampling creates complex inter-relationships among the resampled datasets. to capture these inter-relationships, we propose a relatively simple hierarchical model that requires generation of a single highdimensional vector, and then a series of low-dimensional vectors conditionally generated given the high-dimensional vector. to our knowledge, there has not been work to develop a general methodology along the lines presented here. work with a similar spirit can be seen in the high-dimensional literature. for example, venkatraman and olshen (2007) developed a faster version of their earlier method for performing circular binary segmentation. monte carlo methods for estimating the distribution of functionals in complex statistical models have a longer history, and include rejection sampling, importance sampling (e.g.), markov chain monte carlo (e.g.) and related algorithms such as the gibbs sampler . but these methods do not achieve the reduction in thearohil monte carlo was applied in multiple places to the algorithm of dobbin (2009). briefly, the method of dobbin (2009) constructs a lower confidence bound for the true prediction accuracy of a classifier developed on high-dimensional data. this bound provides an estimate of the variability in the leave-one-out estimate of prediction accuracy which is otherwise problematic to assess. the motivation was to convert the method of dobbin (2009) from a set of c++ programs, to a single r program, while at the same time reducing the computation time. we first compare pure monte carlo to arohil monte carlo computation times in some simple settings. then we turn to the implementation of the method of dobbin (2009) and analyze some of the results to validate the arohil method, and to show how intermediate steps of arohil monte carlo algorithms can be checked. we first performed a set of simulations to benchmark the computational savings of arohil monte carlo compared with traditional monte carlo on some simple examples. results are presented in. as can be seen from the table, computational costs in high dimensions can be reduced several orders of magnitude by using arohil monte carlo instead of traditional monte carlo. on the fourth row of the table, representing a 5000 dimensional space, the computation time is reduced from over a day to under a minute. also note that the estimates from the two methods are practically identical. now we turn to the arohil program implementation. three key intermediate steps in the application of the arohil method to the algorithm of dobbin (2009) are as follows:(1) generate the distribution of cutpoints used for classification of samples.(2) generate mean accuracies corresponding to a particular highdimensional mahalanobis distance between the class means.of the parameters, with = 0.001, = 1, p dimensions, n = 60, using ccp predictor over 500 simulations. when sim = resampling, simulations are estimating the 90th percentile of the leave-one-out cross-validated prediction accuracy distribution for fixed values of the parameters, with = 0.001, = 1, p dimensions, n = 60, using ccp prediction over 1000 simulations. no resamplings done in r on a 32-bit operating system, resamplings done in r on a 64 bit operating system. no resampling estimates include standard deviations in parentheses.we have presented a mathematical modeling approach to speed up high-dimensional monte carlo simulations by reducing the effective dimension of the space in which the simulations are performed. we have described in a general way how this approach can be usedin the case of simple monte carlo simulations, and also monte carlo simulations that require resampling, such as bootstrap or crossvalidation. the modification for the resampling setting is achieved by constructing a hierarchical model for which the distributions of the functionals of interest match (or approximately match) the pure monte carlo distributions. this new method is called arohil, and can enable complex and slow high-dimensional simulations to be converted into simpler and much faster low-dimensional simulations. we have discussed how this method can be used to improve robustness evaluations and to disseminate software. as an example, we are disseminating an arohil program with this article, and have presented a robustness evaluation of this previously published method. in the discussion below, we discuss arohil monte carlo generally first, and then the implementation program provided in this article. we have discussed one detailed example of how high-dimensional leave-one-out cross-validation monte carlo can be converted into an arohil monte carlo. generalizing this to other cross-validations, such as 10-fold cross-validation, is straightforward. bootstrapping by arohil would require a further modification. we showed in this article that arohil for cross-validation is performed by calculating the distribution of a backbone vector of statisticsis the effect size for individual differentially expressed features. is the correlation parameter for cs and ar(1). a is the mean true accuracy over all simulations. 90 lb coverage is the coverage probability of 90 lower confidence bound, using either arohil or an exact binomial confidence interval constructed (naively/incorrectly) from the loocv accuracy estimate.applications to real datasets used in. a loocv is the leave-one-out cross-validation accuracy. dim is the number of features, n 1 and n 2 are the number from each class. 90 lb is the 90 lower confidence bound computed by arohil monte carlo; and similarly 97.5 lb is a 97.5 lb, comparable to the 95 twosided intervals used in. for thedataset, the outcome is survival status at 3 years. for the vantdataset, outcome is 5-year metastases-free survival. for thedataset, outcome is survival status. for thedataset, outcome is survival status. for thedataset, outcome is survival status. for all datasets, the significance level for gene selection was = 0.001. that represents the full dataset, then calculating the conditional distribution of key cross-validation statistics when a sample is left out. for bootstrapping, an extra level would need to be added to the hierarchical model that would represent the overlap pattern between the bootstrap samples. this pattern could be represented by a simple multinomial model with probability 1/n on each of the n samples for each of the bootstrap draws (sampling with replacement). then the conditional distribution given the backbone vector and the pattern can be derived in a straightforward way and used to generate the bootstrap sample. we have discussed that sometimes arohil models will require approximations to the pure monte carlo distribution. importantly, such approximations must be checked carefully to ensure that they are true to the original model. on the other hand, it does not seem reasonable to throw the baby out with the bathwater and abandon arohil monte carlo when any approximations are required. in many cases, these approximations are straightforward to check over the range of simulation settings that are of interest. we have termed the dimension reduction step of arohil as adequate, and not attempted here to define this idea exactly. dimension reduction could be based on more general notions such as sufficiency. a potential area of future research is to find a more formal approach to the dimension reduction step which would establish that the statistics used by the arohil monte carlo are capturing all the key aspects of the pure monte carlo. a potential critique of the arohil approach is that it requires some work to build the mathematical models used to reduce dimension. while it is true that this method requires some extra work, which is not generally worth the trouble in lower dimensional settings, the computational savings in high dimensions is so large that it can not only be worthwhile but also critical. furthermore, very complex high-dimensional procedures can be challenging to implement, and thoroughly checking for coding bugs, information leak or inadvertent neglect of specification of all parameters and assumptions, can be fraught with difficulties. an important aspect of arohil is that implementation is simplified, i.e. the added complexity of the mathematics is often more than compensated for by the greater simplicity and transparency of the computer code. we argue that this results in a cleaner and overall simpler procedure than traditional brute force monte carlo, where any errors are often buried in long computer code scripts. we have found that the arohil monte carlo approach results in very short and simple code compared with pure monte carlo. for example, the r script we are providing with this publication is much shorter and simpler than the original code from dobbin (2009), consisting of multiple c++ programs and steps to integrate the outputs together. the resulting simplification of the code is likely to greatly enhance reproducibility of high-dimensional studies, which has been a continuing challenge to this area. the accompanying arohil program is implemented with one informative feature, which was used in all the coverage probability simulations in this article. the program is also available with a userselected number of features. the number of informative features has relatively small effect on the confidence interval bound, and the number of informative features is unknown. hence, it is preferable to have a program in which the user does not have to come up with this unknown quantity. see section 6 in supplementary material for the table of simulation results showing the stability of bounds across different numbers of informative features. an alternative approach would be to search over different possible numbers of informative features to find a worst-case scenario setting, resulting in more conservative confidence bounds. the accompanying arohil program is implemented with a diagonal covariance matrix. this is done not because the true covariance for high-dimensional data is likely to be diagonal, but because it is generally not possible to estimate the covariance matrix  
