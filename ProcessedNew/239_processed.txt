genome analysis a memory-efficient data structure representing exact-match overlap graphs with application for next-generation dna assembly motivation: exact-match overlap graphs have been broadly used in the context of dna assembly and the shortest super string problem where the number of strings n ranges from thousands to billions. the length of the strings is from 25 to 1000, depending on the dna sequencing technologies. however, many dna assemblers using overlap graphs suffer from the need for too much time and space in constructing the graphs. it is nearly impossible for these dna assemblers to handle the huge amount of data produced by the next-generation sequencing technologies where the number n of strings could be several billions. if the overlap graph is explicitly stored, it would require (n 2) memory, which could be prohibitive in practice when n is greater than a hundred million. in this article, we propose a novel data structure using which the overlap graph can be compactly stored. this data structure requires only linear time to construct and and linear memory to store. results: for a given set of input strings (also called reads), we can informally define an exact-match overlap graph as follows. each read is represented as a node in the graph and there is an edge between two nodes if the corresponding reads overlap sufficiently. a formal description follows. the maximal exact-match overlap of two strings x and y, denoted by ov max (x,y), is the longest string which is a suffix of x and a prefix of y. the exact-match overlap graph of n given strings of length is an edge-weighted graph in which each vertex is associated with a string and there is an edge (x, y) of weight = ov max (x,y) if and only if , where ov max (x,y) is the length of ov max (x,y) and is a given threshold. in this article, we show that the exact-match overlap graphs can be represented by a compact data structure that can be stored using at most (21)(2logn++log)n bits with a guarantee that the basic operation of accessing an edge takes o(log) time. we also propose two algorithms for constructing the data structure for the exact-match overlap graph. the first algorithm runs in o(nlogn) worse-case time and requires o extra memory. the second one runs in o(n) time and requires o(n) extra memory. our experimental results on a huge amount of simulated data from sequence assembly show that the data structure can be constructed efficiently in time and memory. availability: our dna sequence assembler that incorporates the data structure is freely available on the web atan exact-match overlap graph of n given strings of length each is an edge-weighted graph defined as follows. each vertex is associated with a string and there is an edge (x,y) of weight = ov max (x,y) if and only if , where is a given threshold and ov max (x,y) is the length of the maximal exact-match overlap of two strings x and y. = ov max (x,y) is called the overlap threshold. the formal definition of the exact-match overlap graph is given in section 2. storing the exact-match overlap graphs efficiently in term of memory becomes essential when the number of strings is very large. in the literature, there are two common data structures to store a general graph g = (v ,e). the first data structure uses a 2d array of size v v . we refer to this as an array-based data structure. one of its advantages is that the time for accessing a given edge is o(1). however, it requires (v 2 ) memory. the second data structure stores the set of edges e. we refer to this as an edge-based data structure. it requires (v +e) memory and the time for accessing a given edge is o(log), where is the degree of the graph. both these data structures require (e) memory. if the exact-match overlap graphs are stored using these two data structures, we will need (e) memory. even this much of memory may not be feasible in cases when the number of strings is over a hundred million. in this article, we focus on data structures for the exact-match overlap graphs that will call for much less memory than e.we have implemented a dna sequence assembler named largescale efficient dna assembly program (leap) that incorporates our data structure for the overlap graphs. the assembler has three stages: preprocess input dna sequences, construct overlap graph and assemble. in the context of dna sequence assembly, the input dna sequences are called reads. in the first stage, we add the reverse complement strings of the reads. then we sort them and remove contained reads. the second stage is the main focus of our article, constructing the data structure of the overlap graph. the last stage basically analyzes the overlap graph, then retrieves unambiguous paths and outputs the contigs accordingly. we tested our assembler on simulated data as follows. first, we simulated a genome g. then each read of length is drawn from a random location in either g or the reverse complement of g. reads drawn from the genome are error-free reads. the number n of the drawn reads is determined by the coverage depth, c, by the equation n = c g . we considered three datasets with the same read length = 100, the same coverage depth c = 20 and different genome sizes: 238 mb, 1 gb and 3.3 gb. the number of reads in the datasets is 47.6 million, 200 million and 660 million, respectively. the size of the first genome is approximately the size of human chromosome 2. the size of the third genome is approximately the whole human genome size. for the first and the second dataset, we have run our assembler with varying values of the overlap threshold : 30, 40, 50, 60 or 70. we only tried the overlap threshold = 30 for the last dataset because the run time was quite long, about 2.4 days. to assess the quality of the contigs, we aligned them to the reference genome and found that all the contigs appeared in the reference genome. we have run our assembler on a ubuntu linux machine of 2.4 ghz cpu and 130 gb ram. to save memory usage, we choose the binary search-based algorithm to construct the overlap graph in the second stage. the details are provided in tables 1 and 2. the dna sequence assembler developed by simpson and durbin (2010) also employs the overlap graph approach. their assembler, named string graph assembler (sga), uses the suffix array and fm-index for the entire read set to construct the overlap graph. this article reported that the bottleneck in terms of time and memory usage was in constructing the suffix array and fm-index that required 8.5 h and about 55 gb of memory on the first dataset. the total processing time was 15.2 h. on the third dataset, they estimated by extrapolation that the step of constructing the suffix array and fm-index would require about 4.5 days and 700 gb of memory. the total processing time on the third dataset would be more than that. however, sga has been improved in terms of memory efficiency since its first version was released. unfortunately, while the second version of sga improves memory usage, its run time increases. we were able to run the latest version of sga on the same machine on the datasets. the source code of the latest version of sga can be foundprovides the time and memory comparison between the assemblers. for all of the datasets, we have run the two assemblers with the same overlap threshold = 30. the contigs output by the two assemblers were almost the same.we have described a memory-efficient data structure that represents the exact-match overlap graph. we have shown that this data structure needs at most (21)(2logn++log)n bits, which is a surprising result because the number of edges in the graph can be (n 2 ). also, it takes o(log) time to access an edge through the data structure. we have proposed two fast algorithms to construct the data structure. the first algorithm is based on binary search and runs in o(nlogn) time and takes o extra memory. the second algorithm, based on the trie, runs in o(n) time, which is slightly faster than the first algorithm, but it takes o(n) extra memory to store the trie. the nice thing about the first algorithm is that the memory it uses is mostly for the input strings. this feature is very crucial for building an efficient dna assembler. we are also developing our assembler leap that incorporates the data structure for the overlap graph. the experimental results show that our assembler can efficiently handle datasets of size equal to that of the whole human genome. currently, our assembler works for error-free reads. in reality, reads usually have errors. if the error rate is high, our assembler may not work well. however, with improving accuracy in sequencing technology, the error rate has been reduced. if the error rate is low enough, we will have many error-free reads, which means that our assembler will still work in this case. also, an alternative way to use our assembler is to first correct the reads before feeding them to our assembler. in future, we would like to adapt our assembler to handle reads with errors as well.  
