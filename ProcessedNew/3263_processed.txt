sequence analysis nhmmer: dna homology search with profile hmms sequence database searches are an essential part of molecular biology, providing information about the function and evolutionary history of proteins, rna molecules and dna sequence elements. we present a tool for dna/dna sequence comparison that is built on the hmmer framework, which applies probabilistic inference methods based on hidden markov models to the problem of homology search. this tool, called nhmmer, enables improved detection of remote dna homologs, and has been used in combination with dfam and repeatmasker to improve annotation of transposable elements in the human genome. availability: nhmmer is a part of the new hmmer3.1 release. source code and documentation can be downloaded from http://hmmer.org. hmmer3.1 is freely licensed under the gnu gplv3 and should be portable to any posix-compliant operating system, including linux and mac os/x.a widely used general purpose tool for dna/dna sequence comparison is blastn , which heuristically approximates the smithwaterman algorithm for recognizing local regions of similarity between two sequences. in recent years, most advances in dna/dna comparison have related to accelerating search for near-exact matches , and to improving wholegenome alignment . another area that deserves attention is the development of methods that maximize the power of computational sequence comparison tools to detect remote homologies. profile hidden markov models (profile hmms) represent an important advance in terms of sensitivity of sequence searches for remote homology. they provide a formal probabilistic framework for sequence comparison and improve detection of remote homologs by (i) enabling position-specific residue and gap scoring based on a query profile, and (ii) calculating the signal of homology based on the more powerful forward/backward hmm algorithm that computes not just one best-scoring alignment, but a sum of support over all possible alignments. in the past, this improved sensitivity came at a significant computational cost, but recent advances in hmmer3 have increased speed for protein search by 100-fold, reaching blastp-like speed through a combination of filtering heuristics and computer engineering . tools based on profile hmms have historically focused on protein search, with little concentration on the challenges presented by (i) chromosome-length target sequences, and (ii) the extreme composition bias often seen in genomic dna. with attention to the details of dna search, nhmmer builds upon the speed advances of hmmer3, bringing the power of profile hmms to dna homology search, at speeds nearly as fast as blastn with sensitive settings. an example of a biological problem requiring sensitive detection of remote dna homologs is the annotation of genomic sequence derived from ancient transposable element (te) expansions. a prerelease version of the nhmmer tools has recently been shown to provide increased sensitivity over blastn and other single-sequence search methods, with reduced false discovery rate and reasonable runtime, in searching for tes . for example, when nhmmer was used within the recently released repeatmasker 4.0 , an additional 150 mb (5) of the human genome was reliably annotated as derived from tes. the target sequence with a fast ungapped viterbi alignment using a reduced-precision, 16-way vector-parallel approach . windows around high-scoring ungapped alignments are subjected to a full-gapped viterbi alignment to the model. candidate alignments passing this filter then endure the full rigor of a forward/backward alignment to the query, including application of a context-dependent null model to account for composition bias shared by the query and target. for more details on the full acceleration pipeline, see eddy and wheeler (2013). performance. inwe consider the performance of nhmmer on a benchmark called rmark3 that has been used previously to test the rna homology search tool infernal . the benchmark consists of 106 families from rfam that could be divided into two groups such that no sequence in one group is 460 identical to any sequence in the other group [rfam 10.0,. one group was used as the query alignment for the family, and sequences from the other group (780 sequences in total) were embedded in 10 mb of sequence simulated using a 15-state hmm trained on genomic sequence from a variety of organisms. a positive was defined as an embedded sequence with 450 length covered by a query from the same family; a negative was defined as any hit that mostly covers simulated sequence. for more details on construction of the benchmark, see nawrocki and eddy (2007). in this benchmark, we begin with an alignment of multiple members of a dna sequence family and aim to find more instances of the family in the target sequence database. the standard methods for this homology search problem (e.g. using blastn) involve searching the target database with a single query sequence, either (i) producing a consensus sequence to represent the sequence family, then using the consensus as query to search the database, or (ii) using the family pairwise (fpw) search method, in which each individual sequence from the family alignment is used as a query, the hit lists are merged, and overlapping hits are adjudicated by recording the hit with the best e-value . using both of these single-sequence query approaches on rmark3, nhmmer achieves better sensitivity than blastn. these single-sequence query methods do not, however, take full advantage of the information contained within the query alignment. in nhmmer, a profile hmm is built from the alignment, and represents the residue and indel distributions for each position, modeling the conservation patterns of the family in a way that is not possible with single-sequence queries. the benefits of profile search are two-fold: (i) search power is much greater than even with fpw, and (ii) search speed is roughly equivalent to that of searching with a single consensus sequence, as only one search is performed for the entire family, rather than one for each sequence in the query alignment as in fpw. in addition to being more sensitive than blastn, nhmmer represents a nearly 100-fold increase in speed over previous implementations of dna homology search with profile hmms. for example, using the seed alignment for dfam entry df0000789 (a 338 position-long dna transposon) to search against the human genome with a single thread took nhmmer 12 min to complete, whereas hmmer 1.8.5 completed in 782 min and sam 3.5 required 844 min. other applications. hmmer3.1s nhmmer has recently been adopted as a search engine within the te annotation tool, repeatmasker 4.0 , where in conjunction with dfam, it supports a substantial boost in sensitivity in human dna repeat annotation with better speed than the previous most sensitive method . the core pipeline of nhmmer has also been incorporated as an acceleration filter for the rna homology search tool infernal, where it supports fast filtering with negligible loss in infernal sensitivity (e.nawrocki and s.r.eddy, unpublished data). we anticipate that nhmmer will similarly benefit other domains of dna sequence comparison that depend on discriminative detection of remote homologs.. benchmark of search sensitivity and specificity. searches were performed against the rmark3 benchmark either by constructing a single profile hmm from the query alignment (nhmmer profile), constructing a consensus sequence from the query alignment (consensus), or by using family pairwise search (fpw). the aborted lines for two nhmmer variants indicate that the list of all hits found by each search variant was exhausted before reaching 1 false positive per mb per search. the nhmmer parameters were default, except setting the e-value threshold, -e 100 for profile and consensus variants, to extend the hit list. higher e-values have no effect, as further hits (true and false) are filtered by the default acceleration heuristics. many parameters were tested for ncbi blastn 2.2.28, with the best-performing variant shown here (-word_size 7-penalty-3-reward 2-gapopen 4-gapextend 2). for each combination of program and method, hits for all families were collected and ranked by e-value, and true and false hits were defined as described in the text. the y-axis is the fraction of 780 true positives detected with an e-value sufficient to achieve the false-positive rate specified on the x-axis. runtime was collected on a single thread on a 2.66 ghz intel gainestown (x5550) processor. the benchmark can be downloaded from http://selab.janelia. org/publications.html  
