multi-threaded vectorized distance matrix computation on the cell/be and x86/sse2 architectures multiple sequence alignment is an important tool in bioinformatics. although efficient heuristic algorithms exist for this problem, the exponential growth of biological data demands an even higher throughput. the recent emergence of multi-core technologies has made it possible to achieve a highly improved execution time for many bioinformatics applications. in this article, we introduce an implementation that accelerates the distance matrix computation on x86 and cell broadband engine, a homogeneous and heterogeneous multi-core system, respectively. by taking advantage of multiple processors as well as single instruction multiple data vectorization, we were able to achieve speed-ups of two orders of magnitude compared to the publicly available implementation utilized in clustalw. availability and implementation: source codes in c are publicly available at https://sourceforge.net/projects/distmatcomp/multiple sequence alignment (msa) of many nucleotides or amino acids is an important tool in bioinformatics. it can identify patterns or motifs to characterize protein families, and is therefore utilized to detect homology between sequences as well as to perform phylogenetic analysis. many msa heuristics have been proposed to reduce the exponential complexity of computing optimal msas. heuristic msa implementations include msa , clustalw , t-coffee , muscle and praline . clustalw is considered to be one of the most popular msa tools. it is based on the progressive alignment method. although not optimal, this method can produce reasonably good alignments at a good efficiency. however, the exponential growth of biological data demands an even higher throughput. thus, software approaches to improve the performance of clustalw have been introduced, including caching and parallel processing . recent usage of easily accessible accelerator technologies to improve the clustalw algorithm include fpgas and gpus . profiling of clustalw reveals that the distance matrix computation is the most time-consuming phase and takes typically 90 of thepage: 1369 13681369a set of performance evaluation experiments have been conducted using six protein sequence datasets consisting of sequences selected from the human immunodeficiency virus (hiv) dataset downloaded from ncbi. the experimental datasets represent datasets of small number of long sequences, medium number of medium-length sequences and large number of short sequences, respectively. our cell/be implementation is benchmarked on a standalone playstation3 (ps3) with fedora core 9.0 and the cell software development kit (sdk) 3.1. our sse2 implementation is benchmarked on an intel quad-core i7-920 2.66ghz cpu, 12 gb ram running linux fedora 10. the sequential clustalw application, available online at http://www.bii.a-star.edu. sg/achievements/applications/clustalw/, was benchmarked on an intel quad-core i7-920 2.66ghz cpu, 12 gb ram running linux fedora 10.shows the performance evaluation of our implementations using the above-mentioned datasets on different architectures. the cell/be implementation shows a better performance for datasets with fewer but longer sequences, while the sse2 implementation shows a better performance for datasets with more but shorter sequences. this is due to the overhead for the ps3, which involved dma transfers of required data and sequences between the ppe and the spes. since the first stage of several other msa tools, e.g. t-coffee and muscle is also based  
