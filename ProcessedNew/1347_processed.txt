detecting dispersed duplications in high-throughput sequencing data using a database-free approach motivation: dispersed duplications (dds) such as transposon element insertions and copy number variations are ubiquitous in the human genome. they have attracted the interest of biologists as well as medical researchers due to their role in both evolution and disease. the efforts of discovering dds in high-throughput sequencing data are currently dominated by database-oriented approaches that require pre-existing knowledge of the dd elements to be detected. results: we present dd_detection, a database-free approach to finding dd events in high-throughput sequencing data. dd_detection is able to detect dds purely from paired-end read alignments. we show in a comparative study that this method is able to compete with database-oriented approaches in recovering validated transposon insertion events. we also experimentally validate the predictions of dd_detection on a human dna sample, showing that it can find not only duplicated elements present in common databases but also dds of novel type. availability and implementation: the software presented in this article is open source and available from https://bitbucket.org/mkroon/the term dispersed duplication (dd) denotes any dna sequence duplicated non-locally in a genome. dds include copies of transposable elements such as members of the alu and l1 families, which are ubiquitous in the human genome, but also less frequent duplications such as chromosomal translocations and copies of mitochondrial dna sequences embedded in nuclear dna. dds are very common, as estimates show that known transposable elements comprise nearly 50 of the human genome . an arbitrary human sample may contain upwards of 1000 dds compared to the reference genome . dds have been found to be disruptive to the genome, altering gene expression and sometimes causing disease . this type of structural variation has often been considered in cohort studies aiming to link phenotypes to causal variants. consequently, there has been an increased effort in developing methodologies to uncover genetic variation beyond the single nucleotide level. the advent of high-throughput dna sequencing provides a new information source for genetic variant discovery that is both fast and is steadily becoming less expensive. however, whole-genome sequencing output is typically bulky and non-trivial to analyze,highlighting the need for robust and computationally efficient analysis methods. there is a variety of tools available to find structural variants in sequencing data [e.g. cnvnator , genomestrip , pindel and breakdancer (. typically, these tools can be applied in a resequencing setting where a reference genome is available, and the dna sample to be investigated is sequenced with low to moderate coverage. short sequencing reads are produced of approximately 30150 nucleotides long and subsequently aligned to the reference. current sequencing technology allows the production of paired-end reads, where two ends of a larger fragment are sequenced, adding more information about the expected alignment of these reads. insertions of transposable elements are one important class of dds, and most currently available methods detect these types of variation using a predefined database. some of the known tools that cover this type of variation are retroseq , telocate , tangram and mobster . the usual strategy for detecting dds in sequencing data is to look for anomalous read alignments and try to realign the respective reads or read-parts to a database of known duplication sequences. a dd insertion is called when a certain number of aligned reads support the same duplication element type and show consensus on the insertion site. another previously published method, named gustaf , does not realign to a database but focuses completely on split read alignments to identify dds. this study aims to develop a method to find dds without requiring realignment to a predefined database of known elements. instead, detecting dds based on the information provided by discordant alignment of read pairs and partially aligned reads allows our method to find elements that have not been included in available databases or have not even been discovered yet. the method described in this article can be seen as a complement to the existing methodology referenced earlier, as it is applicable to situations where providing a database of known duplication elements is not desirable. we introduce dd_detection as a method that can be used in a resequencing setting where short, paired-end reads are aligned to a reference genome. the underlying algorithm is implemented with adjustable parameters to allow users to have it perform according to their custom needs and wishes. we compared the sensitivity of dd_detection with database-oriented methods using a human dna sample for which extensive experimental validation data are available. in addition, we tested the specificity of our method using new human samples and performed experimental validation with sanger sequencing to find out how well dd_detection could identify both dds of known structure and novel types.we implemented the method presented in the previous section and named it dd_detection. the program is easy to use, configurable and capable of processing whole-genome sequencing input on a modern desktop computer system. for example, on a regular system (4-core 2.4 ghz processor, 8 gb memory) with human wholegenome sequencing data (40 coverage) as input, running dd_detection with four threads and otherwise default parameters takes 127 min and consumes approximately 2.5 gb peak physical (9.3 gb peak virtual) memory. the c source of the program together with installation instructions can be found online at https:// bitbucket.org/mkroon/dd_detection. we have used dd_detection to investigate the performance of our method for both medium and high-coverage human dna alignment data. dd events called on publicly available data from the 1000 genomes project (the 1000 genomes project consortium, 2012) are used to compare the performance of dd_detection to that of alternative methods. we also applied dd_detection to a twosample human dataset and validated in corresponding dna samples a number of calls for both known transposon elements and elements not present in common databases.  
