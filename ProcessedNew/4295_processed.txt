sequence analysis smallwig: parallel compression of rna-seq wig files downloaded from contributions: we developed a new lossless compression method for wig data, named smallwig, offering the best known compression rates for rna-seq data and featuring random access func-tionalities that enable visualization, summary statistics analysis and fast queries from the compressed files. our approach results in order of magnitude improvements compared with bigwig and ensures compression rates only a fraction of those produced by cwig. the key features of the smallwig algorithm are statistical data analysis and a combination of source coding methods that ensure high flexibility and make the algorithm suitable for different applications. furthermore, for general-purpose file compression, the compression rate of smallwig approaches the empirical en-tropy of the tested wig data. for compression with random query features, smallwig uses a simple block-based compression scheme that introduces only a minor overhead in the compression rate. for archival or storage space-sensitive applications, the method relies on context mixing techniques that lead to further improvements of the compression rate. implementations of smallwig can be executed in parallel on different sets of chromosomes using multiple processors, thereby enabling desirable scaling for future transcriptome big data platforms. motivation: the development of next-generation sequencing technologies has led to a dramatic decrease in the cost of dna/rna sequencing and expression profiling. rna-seq has emerged as an important and inexpensive technology that provides information about whole transcriptomes of various species and organisms, as well as different organs and cellular communities. the vast volume of data generated by rna-seq experiments has significantly increased data storage costs and communication bandwidth requirements. current compression tools for rna-seq data such as bigwig and cwig either use general-purpose compressors (gzip) or suboptimal compression schemes that leave significant room for improvement. to substantiate this claim, we performed a statistical analysis of expression data in different transform domains and developed accompanying entropy coding methods that bridge the gap between theoretical and practical wig file compression rates. results: we tested different variants of the smallwig compression algorithm on a number of integer-and real-(floating point) valued rna-seq wig files generated by the encode project. the results reveal that, on average, smallwig offers 18-fold compression rate improvements, up to 2.5-fold compression time improvements, and 1.5-fold decompression time improvements when compared with bigwig. on the tested files, the memory usage of the algorithm never exceeded 90 kb. when more elaborate context mixing compressors were used within smallwig, the obtained compression rates were as much as 23 times better than those of bigwig. for smallwig used in the random query mode, which also supports retrieval of the summary statistics, an overhead in the compression rate of roughly 317 was introduced depending on the chosen system parameters. an increase in encoding and decoding time of 30 and 55 represents an additional performance loss caused by enabling random data access. we also implemented smallwig using multi-processor programming. this parallelization feature decreases the encoding delay 23.4 times compared with that of a single-processor implementation, with the number of processors used ranging from 2 to 8; in the same parameter regime, the decoding delay decreased 25.2 times. availability and implementation: the smallwig software can be downloaded from:next-generation sequencing technologies have resulted in a dramatic decrease of genomic data sequencing time and cost. as an illustrative example, the hiseq x machines introduced by illumina in 2014 enable whole human genome sequencing in less than 15 h and at a cost of only $1000 (http://www.illumina.com/systems/hiseq-x-sequencingsystem.ilmn). a suite of other-seq techniques has closely followed this development (for a comprehensive overview, see http://res.illumina. com/documents/products/research_reviews/), including the by now well-documented rna-seq method. rna-seq is a shotgun sequencing technique for whole transcriptomes used for quantitative and functional genomic studies. in addition to generating sequence-related information, rna-seq methods also provide dynamic information about gene or functional rna activities as measured by their expression (abundance) values. this makes rna-seq techniques indispensable for applications such as mutation discovery, fusion transcript detection and genomic medicine . as a result, the volume of data produced by rna-seq methods can be foreseen to increase at a much faster rate than moores law. it is therefore imperative to develop highly efficient lossless compression methods for rna-seq data. the problem of dna and rna sequence and expression compression has received much attention in the bioinformatics community. compression methods for whole genomes include direct sequence compression (e.g.) and reference-based compression schemes (e.g.). the former class of methods explores properties of genomic sequences such as small alphabet size and large number of repeats. the latter techniques use previously sequenced genomes as references with which to compare the target genome or sequencing reads, leading to dramatic reductions in compressed file sizes. related similarity-discovery-based schemes are usually applied to a large collection of genomes and they achieve very small per genome compression rates (e.g.). moreover, recent work also includes the compressive genomics paradigm, which allows for direct computation and alignment on compressed data . the aforementioned methods and some information-theoretic techniques to biological data compression were reviewed in . for every base pair in the genome, an rna-seq wig file contains an integer or floating-point expression value. human transcriptome wig files may contain hundreds of millions of expression values, which amounts to gb of storage space (e.g. one of the subsequently analyzed wig files randomly chosen from the encode project has a size of 5 gb). wig files are usually compressed by bigwig , which basically performs gzip compression on straightforwardly preprocessed data. unfortunately, the bigwig format does not appear to offer significant data volume reductions and about 10 of the tracks from the ucsc encode hg19 browser in bigwig format take up 31 in storage space (hoang and sung 2014). recently, another compression suite, termed cwig (hoang and sung 2014), was implemented as an alternative to bigwig. the cwig method outperforms bigwig in terms of compression rate, and random query time, although it still relies on suboptimal compression techniques such as elias delta and gamma coding . this work focuses on transform and arithmetic compression methods for expression data in the wig format. since wig files capture expressions of correlated rna sequence blocks, modeling these values as independent and identically distributed random variables is inadequate for the purpose of compression. hence, we first perform a statistical analysis of expression values to explore their dependencies/correlations and then proceed to devise a new suite of compression algorithms for wig files. since the wig format is not limited to rna-seq data, our compression methods are also suitable for other types of dense data, or quantitative measurements, such as gc content values, probability scores, proteomic measurements and metabolomic information. the main analytic and algorithmic contributions of our work are as follows:i. devising a new combination of run length and delta encoding that allows for representing the expression data in highly compact form. as part of this procedure, we identified runs of locations with the same expression value and then computed the differences of adjacent run values. the resulting transformed sequences are referred to as run difference sequences and specialized statistical analysis of difference sequences constitutes an important step towards identifying near-optimal compression strategies. ii. analyzing the probability distributions of the difference sequences and inferring mixture markov models for the data. as part of this step, we estimated information-theoretic quantities, such as the (conditional) entropy, to guide us in our design and evaluation process. more precisely, we first fitted power-law distributions to the empirical probability distributions of the difference sequences. second, we showed that strong correlations exist between adjacent run differences, while there exists only a relatively small correlation between the sequences of run length differences and that of the corresponding run expression differences. these findings provide a strong basis for performing separate compression of the run length and the expression information. iii. developing arithmetic encoders for compression of the difference sequences, including options such as basic arithmetic coding and context-mixing coding based on the work in. in this step, we were guided by the results of the statistical analysis and performed alphabet size reduction in the difference sequences and subsequent run length and run expression compression. with this step, we were able to achieve 17fold improvements in the compression rate when compared with bigwig: as an illustration, a typical wig file of size 5 gb was compressed to roughly 6469 mb, depending on the userdefined operational mode; in comparison, traditional gzip and the bigwig compressors produced files of sizes 1.1 gb and 1.2 gb, respectively.our new compression algorithm follows the standard requirements for expression data representation/visualization by allowing random access features via data blocking and separate block compression. it also encodes data summary statistics, akin to bigwig data formats. furthermore, smallwig has two implementation modes, one of which runs on a single processor and another which uses multiple processors in parallel. the parallelized version of the algorithm offers significant savings in computational time, with identical rate performance as the serial version. the remainder of the article is organized as follows. section 2 provides the idea behind our sequence transformations and coding methods. section 3 contains our statistical analysis. a detailed description of the smallwig algorithm is provided in section 4. compression results and a comparative study of compression methods is given in section 5. a discussion of our findings and concluding remarks are given in sections 6 and 7, respectively.we tested our compression algorithm on 14 integer-valued wig files with sizes ranging from 1.5 to 5.3 gb and on 10 integer and real-valued bedgraph files. all wig files contain human transcriptome rna-seq data from the encode hg19 browser. since smallwig is designed for wig files, here we mainly focus on the 14file set. a more detailed report on the performance of smallwig on both file sets can be found in supplementary material. we measured the performance of smallwig and other existing algorithms through the: @bullet compression rate (compression ratio), the compressed file size divided by the original file size. @bullet running time of: (i) the encoding, (ii) the decoding and (iii) the random query process.shows the compression rates achieved by various variants of smallwig, compared with the rates of gzip, bigwig and cwig through bedgraph. the depicted entropy is under the independent run difference model. with arithmetic coding, our algorithm offers 18-fold rate improvements compared with bigwig. in fact, the compressed file size of our running example is only 1/80 of the original wig file. furthermore, the compression rate is only 1.6 larger than the empirical entropy and may be attributed to storing the empirical probabilities. with context-mixing, one can further improve the compression rate to 23 times compared with bigwig. for compression with random queries, smallwig offers 17-fold rate improvements compared with bigwig. according to the report in hoang and sung (2014), the compression rate of the state-of-the art cwig method is about 3.1 times better than that of bigwig. however, we found that one can obtain an even better rate by first converting a wig file into a bedgraph file and then converting the bedgraph file to cwig with some simple additional processing (bedgraph files are compact representations of wig files that fundamentally rely on run length coding). our sequential wig-bedgraph-cwig pipeline performs about 8.5 times better than bigwig. the newly introduced smallwig method still performs twice as well as the proposed modification of cwig. for databases containing tb/pb of wig files, a 2-fold reduction in file sizes may lead to exceptionally important storage cost savings. in, we present the running time of smallwig encoding/ decoding schemes, as well as those of gzip, bigwig and cwig. with arithmetic coding, smallwig has a 2.5 times smaller encoding and 1.5 times smaller decoding time compared with that of bigwig. arithmetic coding with random query has 1.9 times smaller encoding time than bigwig. context-mixing algorithms are computationally intensive compared with arithmetic coding and require significantly longer running time. to compare the effect of different block sizes used for random query on compression rate and encoding/decoding time, we refer the reader to. in the experiments, the block sizes ranged from 512 to 4096. to enable random query, we introduced a 317 overhead in compression rate and a 30 and 55 overhead in encoding and decoding time, respectively.lists the random query time. note that the start positions (and for long queries the end positions) of the queries were generated uniformly at random among all allowed chromosomal locations for every chromosome. for short queries, the query length was fixed to 1000, so that one query falls within a single block; in this case, the query time corresponds to the time needed to retrieve the corresponding block. one can see that smallwig is comparable in performance to bigwig for short queries and runs about three times faster for long queries. it is also comparable to cwig for both types), cwig (hoang and sung 2014) through bedgraph and smallwig methods, which encompass arithmetic coding, arithmetic coding on blocks of size 1024 and context-mixing algorithms using lpaq1 . to test cwig, we constructed our own wig-bedgraph-cwig pipeline. all presented results are averaged over 14 sample files taken from encode hg19. a more detailed table is included in the supplementary material smallwig: parallel compression of rna-seq wig filesof queries. moreover, to facilitate visualization, in the random query functions, smallwig outputs the exact summary information together with the queried location-expression pairs. on the other hand, the bigwig summary function only outputs information corresponding to the overlapped blocks but not to that of the exact queried region. we observe that for all the tested files, smallwig with arithmetic coding had a relatively small memory usage, as listed in. in particular, during most of the compression tests, the memory usage was less than 10 kb. with different user-defined parameters, smallwig with context mixing had higher and more variable memory usage, ranging from 90 kb to 1200 mb. we note here that since gzip does not offer random access and summary information, its memory usage is smaller than that of the other algorithms. in, we show the running time of parallel multiprocessor compression methods. the encoding time is decreased by 23.4 times as the number of processors increases from 2 to 8. furthermore, the decoding time is decreased by 25.2 times. the time does not decrease linearly since we used a uniform sequence partition procedure for individual chromosomes, and chromosomes have largely different lengths. moreover, after every step in the algorithm (e.g. sequence transformation, empirical probability computation, arithmetic coding), some components of the pipeline have to pause until all processors have finished their computations and their information is aggregated. we also tested smallwig on 10 wig files that were generated from bedgraph files including integer-valued as well as floatingpoint-valued expressions. the average compression rates are shown in. note that bedgraph already takes into account the run length transformations and hence the compression rate improvements for these files are not as large as those for wig files. for integer-valued files, smallwig is 5 and 1.8 times more efficient than bigwig and cwig, respectively. for floating point-valued files, smallwig is 4.3 and 1.9 times more efficient than bigwig and cwig, respectively. more details about these tests can be found in supplementary material.in what follows, we describe the differences in compression strategies used by various methods and attempt to intuitively explain the improved performance of smallwig compared with cwig and bigwig. all three algorithmsbigwig, cwig and smallwiguse run length encoding. both cwig and smallwig use delta encoding. moreover, all three algorithms use blocks of a certain size for random query purposes: bigwig and cwig only operate with fixed  
