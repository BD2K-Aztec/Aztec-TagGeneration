systems biology improving the reuse of computational models through version control motivation: only models that are accessible to researchers can be reused. as computational models evolve over time, a number of different but related versions of a model exist. consequently, tools are required to manage not only well-curated models but also their associated versions. results: in this work, we discuss conceptual requirements for model version control. focusing on xml formats such as systems biology markup language and cellml, we present methods for the identification and explanation of differences and for the justification of changes between model versions. in consequence, researchers can reflect on these changes, which in turn have considerable value for the development of new models. the implementation of model version control will therefore foster the exploration of published models and increase their reusability. availability: we have implemented the proposed methods in a software library called biochemical model version control system. it is freely available at http://sems.uni-rostock.de/bives/. biochemical model version control system is also integrated in the online application budhat, which is available for testing at http://sems.uni-rostock. de/budhat/ (the version described in this publication is available from http://budhatmodelling has become an integral tool for research in computational biology . the increasing impact of modelling for biology is reflected in the rapidly growing number and complexity of computational models of biological systems (in the following referred to models) . current modelling projects such as the virtual physiological human (http://www.vph-noe.eu/) require the usage of techniques for model coupling, merging and combination at different scales. computational support is needed to manage models; to ensure model exchangeability, stability and result validity; and to foster communication between project partners. model representation formats standardize model encoding. examples are the systems biology markup language (sbml) , cellml or neuroml . these formats represent a models structure (e.g. the biochemical network) and allow basic annotation of the model to better convey a models intention. for example, sbml developed an annotation scheme , which reuses the resource description format (rdf) and identifiers from the minimal information required in the annotation of models (miriam) registry . the valid description of a model is a requisite for its dissemination, but an additional descriptive layer is necessary to ensure direct result reproducibility. this layer is covered by the simulation experiment description markup language (sed-ml) , which is a format for the standardized encoding of simulation experiment setups.). with an infrastructure at hand that provides modellers in computational biology with a rich set of model-related information, it is now time to think about integrated management solutions for models, their associated simulation experiments, result data, reference publications and so forth . curated model source code is published in model repositories, for example biomodels database , the physiome model repository (pmr2) , modeldb or the open source brain (http://opensourcebrain. org). open model repositories grant researchers access to published models. they provide a platform for model sharing and long-term storage, and they add support for model validation, curation and annotation of submitted models. several publishers already ask for model source code to be made available along with the written paper (including oxford journals, bmc journals, plos journals or the febs journal). they recommend upload of model code to open model repositories using standard formats and annotations. consequently, open repositories are high-quality, reusable resources of models. however, one disadvantage of current systems is the unavailability of userinterpretable version information together with the subsequent lack of model histories. each model is subject to a characteristic set of changes that reflects the models updates from its creation to curation, publication and later reuse in other contexts. one prerequisite for the study of a models history is the availability of all significant model versions. here, the model version control system (vcs) saves time in recapitulating the different modelling steps taken to build a model. this aspect also becomes relevant when publishing the work, teaching model design in courses or during model curation when curators need to discuss necessary model changes with authors before publication in a model repository. a vcs is capable of storing all existing versions of a model during its existence. subsets of these versions can easily be filtered and displayed to the users. the level of detail depends on the specific application. for example, the developers of a model repository may choose to open all versions that reproduce the results in the reference publication. however, during the collaborative development of a model, all intermediate versions may be of interest for the project members. the need for model version control has been previously discussed in research groups facing model evolution in computational biology . in general, vcss such as subversion (http://subversion.apache.org/) (svn) or mercurial (http://mercurial.selenic.com/) track every change made in a source document, along with information about who made the change and an optional log message containing information why a change has been made. pmr2 has recently demonstrated how mercurial can be used to track and present model versions over the web . once processed, the information that is recorded by a vcs enables users to study a models past and to answer specific questions about the model . modellers may investigate which parts of a model have been changed, and how these changes were justified. for example, changes in the model parametrization may be justified by a new publication. it is also interesting for a modeller to see how often a model has been changed and when it was last changed. this information indicates how recent a model is and whether it has been tested and used by the community. when reusing model code, which has been changed frequently in the past, the modeller might decide to confirm the models validity on a regular basis. simulation experimental setups are valid for a model at a certain time (or range of time). changes in the model may directly affect the simulation results and therefore must be communicated and explained. in addition, the applicability of standard simulation experimental procedures, termed functional curation , must be ensured for each single version of a model. consequently, the availability of every model version used in a simulation experiment is a major requirement to ensure reproducibility of results. in summary, the awareness of a need for version control led to the incorporation of technical solutions for model version control in model repositories. however, current approaches are appropriate for software code rather than model files. the standard algorithms that are to date implemented perform poorly on xml-encoded models. existing solutions also miss support in aggregating version information about a particular model into a model history and interpreting changes. we argue that the implementation of tools that identify and highlight differences between models enables researchers to reflect on model changes, which in turn has considerable value for the development of new models. the present work discusses concepts for model version control and provides solutions to the previously mentioned problems. we concentrate here on models in xml-based standard formats. our methods are document centric and therefore perform well on single-document models, e.g. sbml level 2 models. however, in section 4, we also show how multidocument models can be managed, e.g. cellml models with imported model components.a model vcs should be tailored to existing model representation formats, which are typically xml and rdf based. it should furthermore reflect the temporal evolution of a model and present model changes to the users. in the following, current approaches to model version control are reviewed with respect to these requirements. afterwards, a number of concepts for improved model version control are presented.all relevant changes applied to a model should be tracked and they should be fully listed and documented. users need to know what has been changed in a model, by whom, why and when . surprisingly, these requirements are not yet covered by existing systems. in this section,we discuss the improvements of our system over existing solutions and we point to open issues. improving model version control: to date, model files are rarely accessible by the users of model repositories in formats other than the original model file, or the processed, curated model file. for example, sbml files from biomodels database are available for every release point. however, model code might change between two releases. these changes are not traceable by the community. furthermore, the current biomodels database releases are snapshots of the repository; they do not relate different versions of a model. also, the concept of a model history inside sbml is not intuitive; different steps must be taken to reconstruct the history of a model in terms of curation and modification dates. the types of changes are not encoded in sbml models. the model database pmr2 already provides a system for model version control. the repository stores exposures and mercurial logs, which represent different versions of a model. however, the interpretation of changes remains difficult, and the system lacks a visual representation of the model history. a consolidated view of all these factors indicates that a sophisticated model vcs is missing in current software tools. here, we propose a system that identifies and classifies the changes in a model. instead of using built-in line-based difference detection (as used by svn), we provide the xml aware difference detector bives.shows how a model history can be maintained, and differences between two model versions can be detected and then visualized in budhat. such a graphical representation allows users to quickly grasp the difference between two model versions and to understand the evolution of a model over time. however, a number of open questions remain for future investigations, despite the improvements introduced here. leaving the choice to the user: providing a user with the differences between model versions enables him to actively decide whether to use an updated version of a model. for example, on discovering that a model has solely been updated to a new version of sbml, a user may decide to keep the older version of the model until his software is updated to support the new format specification. in this case, the model remains biologically valid. a decision for a model version requires a user to be aware of the models change compared with its preceding version. this decision is supported by a visual representation of changes, as we have prototyped in budhat (see again). ongoing research in the field of data and network visualization can contribute to this problem.bives library. the result can be viewed either as an xml description of changes, or be displayed graphically, using an adaptation of the cytoscape web tool. all changes in the network structure are colour coded as follows: new elements in blue, deleted elements in red and updated elements in yellow. a second feature is the graphical representation of a models history (not shown in this figure). it provides a quick overview of existing versions of a model in budhat multi-document models must be flattened (i.e. merged into one single file). a second solution is to combine the vcs with a database in the background handling multi-document models. consequently, the problem is shifted to the storage layer of the model management system. we have already shown in our previous publication that sbml models can be transformed into a graph-based representation and then be managed by a graph database . this approach can be extended to enable version control for multi-document models : using a graph structure allows for relating models and model constituents. an import relation in the database links the model to constituents that are defined outside the model file, thereby representing multi-document models. subsequent changes in one model can be propagated to all models reusing the updated components as a constituent.shows an example of a multi-document model and outlines how the relations between database nodes can be used for checks on updates in single models. version control for systems of models: all ideas in this article discussed the identification of changes between two versions of a single model, and the previous section outlined solutions to handle models that are composed of more than one document. however, even further information can be gained when looking at the evolution of models for a particular biological system. for example, a significant number of models that are based on the early encoding of tysons cell cycle model have been submitted to and published in model repositories. looking at the different cell cycle models, how they relate to each other, how the single models evolved and how parts of models were merged into new models requires not only a version control of single xml files but also of a collection of models. one approach for addressing the problem of linking entities across model files is the use of annotations, e.g. using the computational neuroscience ontology [cno (http://purl. bioontology.org/ontology/cno)], which contains a branch on model classification. however, the definition of similarity measures for changes across models is still an open research question. what is a new modeland what is not? models may exist in different versions over time, and they are generated by different research groups. furthermore, researchers may produce a number of instances of a model with differing parameterizations . the fact is that models must be accessible for re-use and to foster result reproducibility. both reduce costs and effort during model development. consequently, questions such as how to distinguish model versions from each other and how to separate models from simulation setups to avoid the unnecessary redefinition of models as new models must be discussed in the future.current technical solutions to the problem of model version control do not allow users to access, study, compare and visualize different versions of a model. here, we have identified the following requirements for an improved system:(1) an xml-aware algorithm for difference detection should be used: moving from lcs to entity-based algorithms for xml version control is a first step towards a more efficient model vcs. entity-based change detection is minimal, as it neglects xml formatting changes. we consequently propose the extension of xml-aware algorithms for difference detection in models.(2) all changes should be transparent to the user: it is essential to know which parts of a model have been changed and how. this information can be encoded in a list of differences for pairs of two model versions. we consequently suggest to provide users with a visual representation of changes between model versions.(3) justification should be given for each change: it is important to provide justification for each relevant change in a model file, thereby encoding why something was changed and by whom. entity-based difference detection enables partially automatized annotation of changes and their classification. we suggest here to establish tools for the semi-automatic annotation of model changes with terms from a controlled vocabulary.these requirements should be respected in software tools that offer model management. we have implemented a library for model change detection, bives, which can be integrated with existing databases or vcss. our online application, budhat, furthermore exemplifies the envisioned functionality of a model vcs.  
