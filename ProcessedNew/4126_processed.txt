systems biology sbrml: a markup language for associating systems biology data with models motivation: research in systems biology is carried out through a combination of experiments and models. several data standards have been adopted for representing models (systems biology markup language) and various types of relevant experimental data (such as fuge and those of the proteomics standards initiative). however, until now, there has been no standard way to associate a model and its entities to the corresponding datasets, or vice versa. such a standard would provide a means to represent computational simulation results as well as to frame experimental data in the context of a particular model. target applications include model-driven data analysis, parameter estimation, and sharing and archiving model simulations. results: we propose the systems biology results markup language (sbrml), an xml-based language that associates a model with several datasets. each dataset is represented as a series of values associated with model variables, and their corresponding parameter values. sbrml provides a flexible way of indexing the results to model parameter values, which supports both spreadsheet-like data and multidimensional data cubes. we present and discuss several examples of sbrml usage in applications such as enzyme kinetics, microarray gene expression and various types of simulation results. availability and implementation: the xml schema file for sbrml is available at http://www.comp-sys-bio.org/sbrml under the academic free license (afl) v3.0.systems biology is typically carried out with a solid basis on explicit (computational) models, which are used to guide traditional experimentation as well as data analysis. computational models are at the core of the systems biology methodology, and therefore an important part of the infrastructure needed for practicing systems biology. to whom correspondence should be addressed.the growing reliance on computational models to support biological research has given rise to several types of modelling software. there are software packages for creation and visualization of models , for their analysis and simulation and also for analysing experimental data in their context . additionally, there are several databases for sharing models within the community . the most prominent standard is the systems biology markup language (sbml;), which is an xml-based language for representing systems biology models in a way that is largely independent from the means to simulate those models. models represented in sbml are thus interpretable by a wide range of software, which can manipulate them in different ways: simulate their dynamics through ordinary differential equations, stochastic simulation algorithms, petri nets or other formalisms; analyse their underlying stoichiometric properties; fit their parameters to experimental data; explore their parameter space by parameter scans or bifurcation analysis and many more computational applications. the existence of a standard way to represent models has been a catalyst for the appearance of these diverse types of software, since they have a common basis in sbml, allowing researchers to share models and effectively use them with these software tools. another important standard in the area is miriam , which is a set of guidelines to be followed when communicating models. more specifically, miriam provides a means of unequivocally identifying biological molecules [through the use of resource description framework (rdf) and universal identifiers]. miriam also recommends that models should be encoded in a machine-readable format, and that their authorship and terms of distribution should be specified explicitly. while miriam does not prescribe which machine-readable format should be used to encode the model, sbml is a convenient way to do so, and the combination of these two standards has become a predominant way to specify self-contained models . the simulation experiment description markup language (sed-ml;) is another xml-based standardization effort for describing computational simulation experiments. despite the increasing popularity of sbml and miriam, which has resulted in many models now being available in electronic form, there is currently no standard way of communicating the actual results of the operations carried out on such modelspage: 933 932938in this section, we provide examples of sbrml usage which fall under two main types: output from systems biology modelling software, and input to systems biology data analysis software. the first type includes essentially simulation results, while the second associates experimental data with models. these examples illustrate the breadth of applications that can be addressed by sbrml. the examples also cover the two different ways of structuring data, tuples and data hypercubes, indicating the situations where each one is more appropriate.it is often emphasized that one of the main characteristics of systems biology is the combined use of experiments and models . several standards already exist to express various aspects of systems biology in computational terms, such as functional genomics experiment for functional genomics data, the sbml for network and kinetic models or biopax (biopax working group, 2008) for pathways. it is remarkable, however, that until now there have been no attempts at creating a standard way of computationally linking data with models. if systems biology is indeed to succeed as an integrative wet and dry biology exercise there must be a standard way to create associations of data with models. we see two major uses for this: (i) expressing results of computational manipulations of models (e.g. simulations) and (ii) expressing experimental results in the context of a model, mathematical or otherwise. we have used the copasi simulator to create the simulation results here, and since we are part of the development team of that software, future versions will provide easy means to export results in sbrml. but for this to be a successful exchange format insystems biology, it is important that other simulators provide similar capabilities, as well as other types of systems biology application including data analysis workflows, databases, etc. on the other hand, it is also important that relevant applications be capable of reading (and interpreting) sbrml. given that sbrml is too verbose for being readable by humans (even very dedicated computational systems biologists), we foresee the need for user-friendly sbrml readers. such applications could format the data from sbrml in tables or data hypercubes or provide graphical displays of the data. network visualization software such as celldesigner , cytoscape or ondex would seem to be particularly appropriate for interpreting and displaying the contents of sbrml files. example 4 illustrates a type of sbrml file that would benefit from being displayed in such applications. data analysis software would also benefit from this format, such as applications for parameter estimation demonstrated with example 3 (in this context, copasi would also benefit from being able to read sbrml for parameter estimation). as well as complementing sbml, sbrml can also be seen to complement experimental data standards, such as fuge or mage-ml . experimental data standards essentially describe samples, the experimental and analytical processes applied to those samples, and the results of those processes. as such, experimental data standards describe how results are derived from an experimental process, whereas sbrml indicates how results have been derived from an sbml model by page: 938 932938  
