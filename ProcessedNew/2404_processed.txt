sequence analysis improving the quality of protein similarity network clustering algorithms using the network edge weight distribution motivation: clustering protein sequence data into functionally specific families is a difficult but important problem in biological research. one useful approach for tackling this problem involves representing the sequence dataset as a protein similarity network, and afterwards clustering the network using advanced graph analysis techniques. although a multitude of such network clustering algorithms have been developed over the past few years, comparing algorithms is often difficult because performance is affected by the specifics of network construction. we investigate an important aspect of network construction used in analyzing protein superfamilies and present a heuristic approach for improving the performance of several algorithms. results: we analyzed how the performance of network clustering algorithms relates to thresholding the network prior to clustering. our results, over four different datasets, show how for each input dataset there exists an optimal threshold range over which an algorithm generates its most accurate clustering output. our results further show how the optimal threshold range correlates with the shape of the edge weight distribution for the input similarity network. we used this correlation to develop an automated threshold selection heuristic in order to most optimally filter a similarity network prior to clustering. this heuristic allows researchers to process their protein datasets with runtime efficient network clustering algorithms without sacrificing the clustering accuracy of the final results. availability: python code for implementing the automated threshold selection heuristic, together with the datasets used in our analysis, are available atin the last decade, there has been an explosion in the available protein sequence data. currently, the uniprot database contains approximately 11 million protein sequences and is growing exponentially ; a very large proportion to whom correspondence should be addressed. of these proteins have not been experimentally characterized. computational clustering approaches can provide an important means to deciphering the functions of these uncharacterized proteins in an efficient way. recent efforts in this area, discussed below, have focused on developing and testing algorithms for clustering proteins by functional similarity based only on sequence data. these algorithms go beyond traditional clustering approaches, such as hierarchical and k-means, which require advance knowledge approximating the number of functional groups present in order to either cluster effectively or to interpret clustering output correctly. rather, these algorithms rely on the network properties of a protein sequence dataset to cluster the data into functional groups without any prior knowledge of the group identities . network clustering algorithms take as input a protein similarity graph . vertices in the graph represent individual proteins, while edges represent the pairwise sequence similarities between the proteins. often, blast scores are used as edge weights. subsequent to input, the similarity graph is processed by the network clustering algorithm to identify distinct groups of nodes in the graph that in many cases correspond to groups of proteins that share the same function. how the similarity graphs are processed varies with each clustering algorithm. in general, most network clustering approaches may be assigned to one of two categories; geometry-based and flow-based . geometry-based approaches, such as force , regularized kernel estimation , spectral clustering and transclust embed the protein graph into high-dimensional space and then group the nodes into clusters based on spatial proximity. flow-based approaches, such as the markov clustering algorithm (mcl;) and affinity propagation model the possible flow of information between nodes based on edge weight. how the information congregates across groups of nodes then determines the final output of clusters. the differences between these two categorizes of algorithms reflect a difference in performance. geometry-based approaches such as force rely on non-linear calculations between pairwise elements in the similarity graph, leading to potentially long execution times. flow-based approaches such as mcl rely on simple matrix and vector multiplication, which leads to relatively short execution times. however, it has been shown that force outperforms mcl for certain similarity graphs , making the hours to seconds difference in run times a worthwhile performance trade-off.the results indicate that the shape of a protein similarity network edge weight distribution correlates with how well the network clusters over a range of thresholds. it is this relationship between the distribution and clustering potential that allows our simple threshold selection heuristic to improve the quality of clustering results in the variety of networks we studied. this is in contrast to the more complicated approach taken byin which they performed single linkage hierarchical clustering on mcl results . although these observations are limited to superfamily-based sequence similarity networks of medium size, they nonetheless represent a valuable step in solving the difficult problem of clustering proteins into family groups that may be informative of their different functions. researchers interested in clustering larger, more diverse datasets may now efficiently group the data into superfamilies using algorithms like scps, and afterwards clustering each superfamily into families with the aid of our threshold selection heuristic. our results also show that mcl outperforms other common algorithms in the task of clustering proteins into families, after the appropriate threshold is applied. the force algorithm ranks second. this is in contrast to previous research , which showed force outperforming mcl, as indicated by f-measure. previous performance comparisons have all been carried out on unthresholded networks. the conclusion that force outperforms mcl is to be expected when network thresholding is not taken into account. based on our results, when a threshold is not provided, force outperforms mcl in a network containing a rapid-descent edge weight distribution and performs just as poorly as mcl in a network with a gradual-descent edge weight distribution. however, as we have demonstrated, an appropriate threshold is easy to extract from an input edge weight distribution. once that threshold is applied, mcl performs as well as or better than force. by extending both algorithms to include a preliminary automated threshold selection step, the performance difference between the two approaches can be minimized. eliminating the performance gap between force and mcl is an important development because of the large difference in execution times of the two algorithms. as the size of the network increases, the execution time required for running force goes up significantly . on a modern desktop computer, the amidohydrolase network takes 5 h to cluster with force, while mcl clusters the same network in less than 2 min under the same conditions. given this difference in runtime, and our results that show mcl clustering quality is equal to or better than force after a heuristically selected threshold is applied, we argue that mcl should be the algorithm of choice. this choice can be especially important when processing large high-throughput protein similarity datasets. for example, the amidohydrolase superfamily has more than 20 000 members. using the current implementation of force would not be feasible for such a superfamily. applying heuristically selected thresholding to such a massive dataset allows us to cluster the proteins using the faster-performing mcl algorithm without fear of sacrificing accuracy for the sake of speed. finally, our general comparison of biological network clustering approaches illustrates the importance of properly distinguishing between categories of networks prior to selecting an appropriate clustering algorithm. not all biological networks are equal, and not all network-related problems are equal. although most of the algorithms we tested showed improvement after thresholding, not all algorithms improved equally. this is because some algorithms are more adept for certain types of problems than for others. scps, which was designed to group large sequence sets into superfamilies, clustered reasonably well but did not score as high as the more family-specific mcl and force algorithms. affinity propagation,  
