raptr-sv: a hybrid method for the detection of structural variants motivation: identification of structural variants (svs) in sequence data results in a large number of false positive calls using existing software, which overburdens subsequent validation. results: simulations using raptr-sv and other, similar algorithms for sv detection revealed that raptr-sv had superior sensitivity and precision, as it recovered 66.4 of simulated tandem duplications with a precision of 99.2. when compared with calls made by delly and lumpy on available datasets from the 1000 genomes project, raptr-sv showed superior sensitivity for tandem duplications, as it identified 2-fold more duplications than delly, while making $85 fewer duplication predictions. availability and implementation: raptr-sv is written in java and uses new features in the collections framework in the latest release of the java version 8 language specifications. a compiled version of the software, instructions for usage and test results files are available on the github repository page: https://github.com/njdbickhart/raptr-sv.among one of the larger classes of heritable genetic mutations, structural variants (svs) are difficult to detect within data derived from current high throughput sequencing technologies. svs have been implicated as the causative agents of several phenotypes in animal species such as color-sidedness in cattle and peacomb in chickens ; however, their reliable detection from next-generation sequencing data requires cutting-edge computational algorithms and extensive molecular validation. much of the need for validation stems from the high false discovery rates (fdrs) of several popular sv callers, several of which have been shown to have a fdr of 90 . additionally, the exact nucleotide breakpoints of sv events are difficult to detect from sequence data using existing methods. many algorithms, such as read depth-based copy number variation (cnv) detection , attempt to improve sv detection precision by lowering the resolution of detection; however, this prevents reliable breakpoint estimation. higher resolution sv breakpoint detection has recently been the subject of extensive research within the genomics community. much work has been done to utilize short-read library construction techniques, such as paired-end read libraries, to infer the exact breakpoints of svs in the genome as was implemented in the program pemer . one such algorithm, implemented in the program pindel, splits reads into smaller constituents prior to realignment to the reference genome to find the precise breakpoints of smaller events . these two techniques were shown to contribute the highest quality sv predictions in the recent human 1000 genomes project . still, these methods are highly prone to false positive sv call predictions due to chimeric read fragments and repetitive sequence misalignment. we expand on these methods by combining their predictions to generate highly confident sv calls, which can be filtered at runtime for improved accuracy. such a strategy can be considered a hybrid of the split read and paired-end algorithms, and has previously been implemented in software such as delly and lumpy-sv . we have also designed our tool to be used on non-model organism reference assemblies by taking into account the uncertain nature of gap regions in our runtime filters. we call our method raptr-sv which embodies a combination of read pair (rp) and split-read (sr) methodologies.  
