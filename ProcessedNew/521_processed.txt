assessing identity, redundancy and confounds in gene ontology annotations over time motivation: the gene ontology (go) is heavily used in systems biology , but the potential for redundancy, confounds with other data sources and problems with stability over time have been little explored. results: we report that go annotations are stable over short periods, with 3 of genes not being most semantically similar to themselves between monthly go editions. however, we find that genes can alter their functional identity over time, with 20 of genes not matching to themselves (by semantic similarity) after 2 years. we further find that annotation bias in go, in which some genes are more characterized than others, has declined in yeast, but generally increased in humans. finally, we discovered that many entries in protein interaction databases are owing to the same published reports that are used for go annotations, with 66 of assessed go groups exhibiting this confound. we provide a case study to illustrate how this information can be used in analyses of gene sets and networks. availability: data available atthe gene ontology (go) is a key means by which systems biologists operationalize gene function, making it a heavily relied on tool in innumerable analyses and data interpretation exercises. although go annotations are often used as a gold standard, it has widely appreciated imperfections. ironically, it is difficult to assess the properties of go itself, as there is no other comprehensive gold standard against which to hold it. broadly speaking, assessment of go has focused on three distinct attributes: the accuracy of annotations assigned to go, gos structure independent of annotation and the utility of go and its annotations for the interpretation of data. although go was initially conceived as providing explicit definitions of gene function concepts , go can also be thought as defining each function by the genes that have a particular go term assigned to them (in the field of logic, this is the distinction between intensional and extensional definitions). despite misgivings about the incompleteness of go annotations , the use of go sets as representing functions is now endemic. this is put to use in numerous applications such as gene group enrichment , gene network analysis and gene function prediction . it is essential to understand the extent to which such applications are valid. there have been multiple assessments of go annotation correctness, often focusing on subsets of annotations . assessment of gos structure independent of annotation has tended to focus on issues of redundancy within the ontology structure; that is, using different names for the same concept or different concepts for the same name . to the extent assessment of go and its annotations are considered together, it is almost exclusively in the context of gene group enrichment analyses . in comparison, there has been little attention given to the changing or redundant role of individual genes within go, rather than the changing or redundant role of functions. this article is an attempt to address this gap. we describe a series of evaluations that take the approach of assuming that go annotations are correct, focusing instead on whether they can be considered meaningful. we do this by performing three types of sanity checks of go annotations that would be expected to hold. we first explore whether each gene has a consistent functional identity between versions of go. we then consider the degree to which go assignments are distributed unequally among genes and how this has changed over time. this annotation bias is crucial to assigning appropriate priors to the probability a gene might appear in a functional analysis by chance . finally, we study the degree to which go can be safely integrated with network data without confounds that would lead to misleading conclusions or circular reasoning. to illustrate how our analyses can be applied, we close with a biologically motivated case study. our results provide novel insights leading to a specific set of recommendations for both the developers of go and its users. to whom correspondence should be addressed.  
