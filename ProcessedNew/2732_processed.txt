lnetwork: an efficient and effective method for constructing phylogenetic networks motivation: the evolutionary history of species is traditionally represented with a rooted phylogenetic tree. each tree comprises a set of clusters, i.e. subsets of the species that are descended from a common ancestor. when rooted phylogenetic trees are built from several different datasets (e.g. from different genes), the clusters are often conflicting. these conflicting clusters cannot be expressed as a simple phylogenetic tree; however, they can be expressed in a phylogenetic network. phylogenetic networks are a generalization of phylogenetic trees that can account for processes such as hybridization, horizontal gene transfer and recombination, which are difficult to represent in standard tree-like models of evolutionary histories. there is currently a large body of research aimed at developing appropriate methods for constructing phylogenetic networks from cluster sets. the cass algorithm can construct a much simpler network than other available methods, but is extremely slow for large datasets or for datasets that need lots of reticulate nodes. the networks constructed by cass are also greatly dependent on the order of input data, i.e. it generally derives different phylogenetic networks for the same dataset when different input orders are used. results: in this study, we introduce an improved cass algorithm, lnetwork, which can construct a phylogenetic network for a given set of clusters. we show that lnetwork is significantly faster than cass and effectively weakens the influence of input data order. moreover, we show that lnetwork can construct a much simpler network than most of the other available methods.phylogenetic networks are a generalization of phylogenetic trees; they can represent nontree-like evolutionary histories caused by processes such as hybridization, horizontal gene transfer and recombination . developing appropriate methods for inferring phylogenetic networks has been identified as an important research area , and there have been many recent studies on this topic . phylogenetic networks can be typologically classified into unrooted and rooted networks, and functionally classified into implicit and explicit networks . implicit networks can be used to represent conflicting patterns that may be the result of a variety of causes, such as model misspecification . explicit networks can capture biological processes such as hybridization , recombination and horizontal gene transfer . explicit networks are usually rooted, as evolution is inherently directed. however, rooted phylogenetic networks may also be implicit networks, depending on how they are constructed and interpreted . the program dendroscope is used to compute rooted phylogenetic networks. it combines a number of methods used to compute implicit networks, such as the cluster network method , with methods used for computing explicit networks, such as the hybridization network method . the program splitstree4 is designed to compute implicit networks. it uses a variety of methods, including the z-closure super network method .used computer simulations to compare the performance of most of the unrooted implicit network approaches, i.e. they compared the simulated trees with all of the trees embedded in the constructed network. phylogenetic networks are an important part of biological research.used the dendroscope program to confirm the hypothesis that indehiscent sporangia promote the establishment of a persistent population in different regions of the qinghai-tibetan plateau.analyzed amplified fragment length polymorphism (aflp) loci using the neighbor-net method and revealed three main clusters and several smaller subclusters.inferred super networks from several incongruent gene trees, and uncovered new evidence for a complex history of reticulate evolution in nicotiana. our study develops a method for constructing rooted implicit networks. in the following, unless otherwise specified, we refer to rooted phylogenetic networks as simply networks. let x be a set of taxa. a rooted phylogenetic tree t on x represents a cluster c (a proper subset of x ), if there is an edge e in t such that the set of taxa below e equals c. each rooted phylogenetic tree t is uniquely defined by the set of clusters that it represents . given a network n and a cluster c, when switching an incoming edge on and all of the to whom correspondence should be addressed. others off for each reticulate node in n, if there is a tree edge e u, v (indegree of v at most 1) in n such that the set of leaves reachable from e equals c, we say that n represents c in the soft-wired sense. alternatively, if there is a tree edge e in n such that the set of taxa below e equals c, we say that n represents c in the hard-wired sense. given a network n and a phylogenetic tree t, when switching an incoming edge on and all of the others off for each reticulate node in n, if n equals t, then we say that n represents t (see). phylogenetic trees are commonly constructed from different datasets, e.g. from different genes. each constructed phylogenetic tree carries important evolutionary information, and to reconstruct complete evolutionary histories of all of the relevant taxa, we would preferably like to use all of the clusters represented in the various constructed phylogenetic trees. however, such a set of clusters cannot usually be expressed as a single phylogenetic tree. therefore, it is necessary to construct a phylogenetic network to express the set of clusters. several recent publications have studied this problem . note that individual gene trees will probably contain a mixture of correct and incorrect clusters; however, in our article, we assume that all clusters contained by these trees are correct. the rooted phylogenetic network can, in theory, be used to explicitly describe evolution in the presence of reticulate events such as hybridization, horizontal gene transfer and recombination. however, in biology, those reticulate events are rare . consequently, it is reasonable that the desired network should minimize the number of reticulate nodes contained in the network. the cass algorithm (van) can construct a network with fewer reticulate nodes than any other available method, but it is not suitable when the input consists of large datasets or datasets that need many reticulate nodes. moreover, the networks constructed by cass are dependent on the order of input data, i.e. it generally constructs different phylogenetic networks when the order of the input data is different. in the following, we use the redundant clusters in a network to refer to the clusters that remain after removing the input clusters from all of the clusters represented by the network. in the context of phylogenetic analysis, the clusters represent putative monophyletic groups of related species. biologically, the ideal situation would be that all of the clusters represented in the input trees would be represented in the constructed network, and no others. therefore, we invoke the parsimony principle to argue that the best constructed network for representing a set of clusters in the soft-wired sense is one that minimizes the number of redundant clusters; this is based on the premise that there will be as few reticulate nodes as possible. this new criterion brings the model closer to the above ideal situation. to achieve this aim, we introduce an improved cass algorithm called lnetwork, which constructs a network that represents the given set of clusters in the soft-wired sense. lnetwork is significantly faster than cass and effectively weakens the influence of the input data order. moreover, lnetwork can construct a network that represents fewer redundant clusters and has fewer reticulate nodes than most other programs. furthermore, the trees represented by the networks constructed by lnetwork are closer to the input trees than those represented by the networks produced by the other programs we consider.all of the experiments were performed on a computer with an intel xeon e5504 2.0 ghz cpu, 8gb ram and 147gb hdd. the operating system was debian 4.1 32 bit with java 1.6 installed. lnetwork was written in java. we tested lnetwork with both the practical (i.e. real biological data) and artificial data (https://sites.google. com/site/cassalgorithm/data-sets) used by cass and compared the results of lnetwork with those of other programs. the results are summarized in tables 1, 2 and 3. the experiments test two main aspects of the lnetwork algorithm. first, they test the influence of input data order; the results are shown in. second, they test the complexities of the network, i.e. the level, the reticulation number and the redundant cluster number; the results are shown in tables 2 and 3.to test the influence of the input data order, for each dataset the program constructs the networks for every permutation of input data order. the running time for this process is factorial; thus, in the experiment the scale of data considered is small. to compare the differences between the constructed networks, we use the tripartition distances of networks.shows, for each dataset, the number (n) of the different networks constructed by each program and the mean, the minimum (min) and thenote: t, k, r and c represent, respectively, the running time, the level, the reticulation number and the redundant cluster number.note: n represents the number of constructed networks, and mean, min, max represent, respectively, the mean, the minimum, the maximum of tripartition distances of those networks. each dataset has jcj clusters and jx j taxa. maximum (max) of tripartition distances of those networks; the last row gives their average values. our conclusions about the superiority of lnetwork are based on the following observations. first, the number of different networks constructed by lnetwork is less than the number of different networks constructed by cass for the same data with different input orders. second, the tripartition distance between the networks constructed by lnetwork is less than that between the networks constructed by cass; this demonstrates that, if lnetwork outputs more than one network when the input order of the data is changed, the networks constructed by lnetwork are more similar to each other than the networks constructed by cass. thus, lnetwork effectively weakens the influence of input data order compared with cass.compares the results of lnetwork with the results of cass for several artificial datasets.shows the level k, the reticulation number r, the redundant cluster number c and the running time t in hours (h), minutes (m) and seconds (s) for the two algorithms; the last row gives their average values. the comparison shows that lnetwork takes less time than cass, and that the level and the reticulation numbers of the networks constructed by lnetwork are the same as the level and the reticulation numbers of the networks constructed by cass in almost every case. furthermore, the networks constructed by lnetwork have fewer redundant clusters than the networks constructed by cass in almost every case. the study by van iersel et al. compared hybrid interleve and parsimonious inference of reticulate network (pirn) (with cass. in this study, we compare lnetwork with cass, the galled network and the cluster network using practical data.shows that the average reticulation number of lnetwork is slightly more than that of cass and less than that of the other two programs. the networks constructed by lnetwork represent fewer redundant clusters than those constructed by the other programs. in terms of running time, lnetwork is faster than cass in general, but is slower than the cluster network and the galled network algorithms. even so, the running time of lnetwork is acceptable. thus lnetwork is superior to the other algorithms when we consider running time, number of reticulations and number of redundant clusters. tables 2 and 3 show that when the constructed networks are binary, the level and the reticulation number of the network constructed by lnetwork are the same as the level and the reticulation number of the network constructed by cass when the same input data are used. we ran lnetwork and cass on the simulation data randomly generated by the phyl-o-gen tool (http://tree.bio.ed.ac. uk/software/phylogen/).shows the results of only lnetwork as cass did not finish within 10 days. these results suggest that lnetwork can construct networks for datasets thatneed high levels and many reticulations. this conclusion is illustrated in, which shows the output of lnetwork when it is given real data consisting of all of the clusters in at least one of the four gene trees from a pinaceae dataset. finally, we compare the performance of lnetwork, cass, the galled network and the cluster network using simulation data generated by the recodon tool (http://darwin.uvigo.es/). we use the tool to randomly generate 700 datasets, and then run these datasets using each program. this tests how well the lnetwork algorithm constructs networks for input tree sets by comparing the topology structure of the input trees with the trees represented by the resulting constructed network. we first list the trees represented by the constructed network. let t be the input tree set and n be the set of trees represented by the constructed network for the input tree set. we then compute the robinsonfoulds (rf) distance between any one tree in n and any one tree in t. for any two trees t 1 and t 2 , the rf distance between them is denoted as rf(t 1 , t 2 ). two trees are identical if the rf distance between them is zero. the false positive (fp) is the fraction of trees in n that do not exist in t. the false negative (fn) is the fraction of trees in t that do not exist in n. for any one tree t in n , the degree of false positive (dfp) of t, denoted by dfp(t), is defined as dfp(t) minrf(t, t 0 jt 0 2 t . for any one tree t in t , the degree of false negative (dfn) of t, denoted by dfn(t), is defined as dfn(t) minrf(t, t 0 jt 0 2 n . for each of the 700 datasets, we compute the size of n (size), fp, fn, mean dfp (mdfp) and mean dfn (mdfn).shows the average of those values. the mean size of the input tree sets is 2.3652. the table shows that the mean size of trees represented by the networks constructed by lnetwork is closer to the mean size of input tree sets than the mean size of trees represented by the networks constructed by the other programs, and the mean fp, the mean fn, the mean mdfp and the mean mdfn of the networks constructed by lnetwork are less than those of the networks constructed by the other programs. thus, the networks constructed by lnetwork are closer to the input tree sets than the networks constructed by the other programs.note: the best value in every column is displayed in bold.  
