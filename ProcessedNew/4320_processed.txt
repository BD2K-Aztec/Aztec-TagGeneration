sequence analysis soapdenovo-trans: de novo transcriptome assembly with short rna-seq reads motivation: transcriptome sequencing has long been the favored method for quickly and inexpensively obtaining a large number of gene sequences from an organism with no reference genome. owing to the rapid increase in throughputs and decrease in costs of next-generation sequencing, rna-seq in particular has become the method of choice. however, the very short reads (e.g. 2 90 bp paired ends) from next generation sequencing makes de novo assembly to recover complete or full-length transcript sequences an algorithmic challenge. results: here, we present soapdenovo-trans, a de novo transcrip-tome assembler designed specifically for rna-seq. we evaluated its performance on transcriptome datasets from rice and mouse. using as our benchmarks the known transcripts from these well-annotated genomes (sequenced a decade ago), we assessed how soapdenovo-trans and two other popular transcriptome assemblers handled such practical issues as alternative splicing and variable expression levels. our conclusion is that soapdenovo-trans provides higher contiguity, lower redundancy and faster execution. availability and implementation: source code and user manual are available at http://sourceforge.net/projects/soapdenovotrans/.transcript sequences and gene expression levels can now be efficiently obtained using rna-seq on next-generation sequencing technologies, providing increased throughputs and decreased costs. applications for rna-seq include discriminating expression levels of allelic variants and detecting gene fusions . to carry out these types of analyses requires an assembler that can reconstruct the transcripts from very short reads (e.g. 2 90 bp paired ends). assemblers such as cufflinks , scripture and erange recover transcript sequences by aligning the reads to a reference genome. however, reference genomes are not always available, especially if the genome is unusually large and/or polyploid, which is often the case for plants. in these situations, de novo assembly is required. the challenge is not only to recover full-length transcripts but also to identify alternative splice forms in the presence of variable gene expression levels. historically, the first de novo assemblers for next-generation sequencing, like velvet , abyss and soapdenovo , were developed for genomes. these programs were intended to recover sequences for genomes of a known (estimated) size with a defined number of chromosomes. in contrast, transcriptome assemblers must recover an unknown number of rna sequences, typically on the order of tens of thousands. further, transcript sequences are only a few (k)ilobases in length, as compared with chromosomes, which can be hundreds of (m)egabases in length. adding to the complexity is that gene expression levels vary by many orders of magnitude, so that for any non-zero sequencing error rate the most highly expressed genes will always harbor many discrepant bases, making it impossible to to whom correspondence should be addressed. y the authors wish it to be known that, in their opinion, the first four authors should be regarded as joint first authors. define an absolute threshold for the number of sequencing errors allowed per assembly. another issue is that most contemporary de novo transcriptome assemblers, like trans-abyss , multiple-k (surget), rnnotator , oases and trinity , use the de bruijn graph (dbg) schema for computational and memory efficiency, which means that alternative splice forms transcribed from the same locus will be combined into a single complicated de bruijn sub-graph. this then needs to be addressed. in recent years, some important changes have been introduced to improve transcriptome assembly. oases enumerated all possible transcripts with the simplifying concept of assembly subgraphs and then used a robust heuristic algorithm to traverse these graphs. trinity introduced a new error removal model to account for variations in gene expression levels and then used a dynamic programming procedure to traverse their graphs. however, there is a lot of room for improvement, e.g. oases produces more redundant transcripts, possibly due to it lacking an effective error-removal model , and trinity produces fewer full-length transcripts, possibly due to it not using paired-end data for scaffold construction. here we present a de novo rna-seq assembler, soapdenovotrans, which builds on these previous innovations to overcome a few remaining issues. soapdenovo-trans incorporates the error-removal model from trinity and the robust heuristic graph traversal method from oases. in addition, we use a strict transitive reduction method to simplify the scaffolding graphs, and provide more accurate results. to assess the impact of these changes, we evaluated all three assemblers on rice and mouse, which have established transcriptome data linked to genome annotations produced over the last decade. the results here demonstrated that soapdenovo-trans provides higher contiguity, lower redundancy and faster execution.to compare the performance of soapdenovo-trans, trinity and oases, we assembled two sets of paired-end illumina data, (l)arge and (s)mall, for rice and mouse. as both genomes were sequenced a decade ago, the annotation has been extensively curated, making these appropriate benchmarks to assess the assembly software. we chose to assess both plant and animal transcriptomes because most other studies only assessed animals (or even simpler organisms like yeast), and we wanted to be sure that our assembler could handle the difficulties created by plant data. plants have larger gene families and more transposable elements (tes); some of these tes are also highly expressed. soapdenovo-trans was designed for use in the 1000 plants (1 kp) initiative www.onekp.com, and thus it was essential to manage these difficulties. we first assessed the computational demands of the three software programs with regard to peak memory and time . for both measurements, soapdenovo-trans was more than competitive with the other two programs. alignment of the assembled transcripts to the annotated genomes showed that soapdenovo-trans produced the fewest transcripts, by more than factor of 2 in the most extreme cases, even after removing assemblies that were shorter than 300 bp. however, the number of annotated genome loci recovered was consistent among the three algorithms, differing only by 57. one might naively attribute the differences in transcript numbers to alternative splice forms, but we would advise caution. there could be, for example, non-overlapping fragments of the same isoform or redundant copies of the same isoform. the following analyses are focused only on those transcripts that aligned to genome loci with annotated genes. we used the terms series-a and series-b to denote the sets of transcripts that included or excluded putative alternative splice forms, respectively. series-a includes all assembled transcripts, while series-b is a strict subset that includes only the largest assembled transcript for any given gene. to properly assess the differences between assemblers, it is important to first understand how the rice and mouse assemblies differed from each other. despite the fact that the rice and mouse datasets have similar amounts of raw input data, i.e. s and l datasets (s: rice versus mouse: 1.47 versus 1.83 gbp; l: 5.98note: our analyses generated a successive reduction in the number of assemblies. first, we restricted our analyses to assemblies larger than 300 bp. blat alignments to the reference genomes were done at 95 sequence identity. assemblies were deemed to be correct when !95 of their lengths could be accounted for in one consistent alignment. if not, assemblies were deemed to be chimeric when 95 of their lengths could be accounted for in two or more alignments with different orientations, on different chromosomes or on distal regions of the same chromosome. we then confined our analysis to assemblies that overlapped with annotated genes. because multiple assemblies could align to the same genome locus, we generated two datasets: series-a and-b, which included or excluded putative alternative splicing forms, respectively. in choosing among the isoforms, whether for series-b or the genome annotations, we always used the longest available sequence. in the case of the rice transcriptome, about 30.3 of the 55 986 annotated genome loci were known to be tes, but our data showed that this was not a confounding issue. we indicate here the percentage of the assembled transcripts that were not known to be tes.of the expressed rice genes were non-tes. given that many more rice genes had to be recovered from the same amount of sequence data, the read depths per gene were lower; as a result, the rice assemblies were not as high quality as the mouse assemblies. furthermore, we expected that, given no extensive assembly errors (i.e. ones so extreme that they could not even be defined as chimeric), all but a very small percentage of the assembled transcripts should align to the genome. this was the case for mouse, but not for rice, where close to 10 failed to align because of subspecies differences, i.e. the use of indica transcriptomes and japonica genome annotations. we could eliminate most of the alignment failures by aligning the transcripts to combined genomes of both subspecies; however, to avoid the complications of having two genome annotations, we used only the alignments to the japonica genome. comparisons of the assembled and annotated transcript can, at least in principle, be complicated if the sequences represent different isoforms created from different combinations of exons. under those circumstances, the concept of full length cannot even be defined by the ratio of lengths. however, in practice, the overlap between the assembled and annotated transcript is almost always perfect . hence, the two sequences almost always represent the same isoform. this allowed us to simplify our calculations for deriving the next plot , which presents the cumulant for the assembled transcript lengths versus the assembled-to-annotation length ratios. what this is meant to show is the extent to which full-length transcripts are recovered, for any definition of completeness, without having to choose an arbitrary threshold like 95 of 100. the use of total length on the y-axis is meant to de-emphasize the fact that there are many small assemblies that, even in aggregate, do not amount to much. the ideal is a step function with a rapid increase at ratios near 100, and soapdenovo-trans came closer to this than did trinity or oases. based on the shoulder in the curve, the data indicated that soapdenovo-trans using only 1.83 gbp of mouse data outperformed trinity when it used 5.49 gbp of mouse data. note also that the increase begins before ratios of 100, meaning that in many instances the assembled transcript was longer than the annotated transcript, which is not unexpected because untranslated region (utr) sequences tend to be poorly annotated. to put a solid number on how many genes or isoforms were recovered, we chose an arbitrary threshold, 100 or 95 of the expected length in. here, we only counted the isoforms that had been recorded in the genome annotations. while it is possible that the transcriptome data contained isoforms that had not previously been discovered, it is equally possible that these putative alternative splice forms were assembly errors. the only way to avoid a misleading isoform count is to record only what had previously been annotated. rather surprisingly, we found that trinity and oases did not recover more isoforms than, where we showed a distribution, here we plot a cumulant. l(assembly) is the length of the assembled transcript, counting only the portion that aligned to the genome, while l(annotation) is the length of the annotated transcript. notice that the assembly-to-annotation lengths are plotted in reverse, from large to small. the ideal result is a step function with a sharp rise at 100, but it begins to increase prior to 100 because the assembled transcripts contain utrs that were not present in the annotated transcripts. overlaps between the assembly and annotation. l(overlap) is the length of overlap between the assembled and annotated transcripts, while l(assembly) is the length of the assembled transcript counting only the portion that successfully aligned to the genome. here, we show the distribution in the number of assembled transcripts as a function of the overlap-to-assembly lengths soapdenovo-trans, even though they produced many more assemblies. to investigate why the assemblers, especially oases, generated so many putative alternative splice forms, we did a comparison of the submaximal transcripts (i.e. all but the largest of the many transcripts that aligned to a particular genome locus) to the maximal transcript . in many cases, we saw virtually no overlap between the submaximal and maximal transcripts, indicating that the assemblers produced non-overlapping fragments of the same isoform. in many other cases, the overlap to submaximal ratio was equal to one, which meant no new exons were recovered, unlike what is typically seen with genuine instances of alternative splicing. we noticed that the assemblers often produced multiple artifactual transcripts as a result of minor substitution errors in the raw input data. all had about the same length, in contrast to the common form of alternative splicing where exons are added or subtracted, which would result in 1020 changes in the transcript lengths (e.g. 1 out of 10 exons in an animal gene or 1 out of 5 exons in a plant gene). we tested for artifacts of this type by plotting the cumulant for the transcript lengths as a function of submaximal-to-maximal lengths . the sharp increase as the ratios approach one showed that all the assemblers created artifacts of this type, but soapdenovo-trans was the least offensive of the tested software.sequence assembly using real-world datasets has always required many subtle algorithmic changes to produce the best results, and it is clear that no single algorithm has a magic bullet that solves all of the problems. we developed soapdenovo-trans by combining novel concepts introduced by trinity and oases with concepts developed for the genome version of soapdenovo2. on top of this, we added modifications of our own, suitable for transcriptome studies. as demonstrated here, we believe we have produced an algorithm that substantially improves on the currently available tools for transcriptome assembly. given the complexity of these analyses, however, soapdenovo-trans is unlikely to be the final word in transcriptome assembly. in particular, we tested one of the reference-based assemblers, cufflinks, and found that it provided even better results than soapdenovo-trans. these results suggest that, perhaps, there is information in these datasets that, with additional algorithm modifications, can be recovered. for example, a multiple k-mers strategy may improve transcriptome assembly. current multiple k-mers assembly strategies generally fall into one of the two categories: (i) after using different values for k-mer assembly,. analysis of alternative splice forms. given a set of assembled transcripts aligning to the same genome locus, l(submaximal) is the length of any transcript other than the largest, while l(maximal) is the length of the largest transcript. l(overlap) is the length of the overlap between the two. as in, we show a distribution for the number of transcripts and then a cumulant for the transcript lengths separately, the resultant assemblies are merged into one final set. this might result in a more complete transcript set, but it may also introduce redundancy; (ii) iterate different k-mer dbg assemblies during contig construction. this strategy could potentially make the best use of reads and paired-end information, but whether it is worth developing such an algorithm depends in part on the ongoing developments in sequencing technology. there is an expectation of improvements in read lengths in the future. if so, it would necessarily alter the types of issues faced by transcriptome analysis. finally, soapdenovo-trans, unlike trinity and oases, does not yet perform strand-specific assembly, and this is planned for a future development to further improve this algorithm.  
