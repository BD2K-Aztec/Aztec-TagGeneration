genome analysis hitec: accurate error correction in high-throughput sequencing data motivation: high-throughput sequencing technologies produce very large amounts of data and sequencing errors constitute one of the major problems in analyzing such data. current algorithms for correcting these errors are not very accurate and do not automatically adapt to the given data. results: we present hitec, an algorithm that provides a highly accurate, robust and fully automated method to correct reads produced by high-throughput sequencing methods. our approach provides significantly higher accuracy than previous methods. it is time and space efficient and works very well for all read lengths, genome sizes and coverage levels. availability: the source code of hitec is freely available atdna sequencing technologies have produced a revolution in biological research. since the introduction of the sanger method , hundreds of bacterial and eucaryotic genomes have been sequenced, including several human genomes. this led to a significant number of biological discoveries. high-throughput sequencing technologies, such as illuminas genome analyzer, abis solid and roches 454, see e.g. , produce gigabytes of data in a single run, thus taking sequencing to a whole new level. they provide the ability to answer biological questions with revolutionary speed. some of their many applications include whole-genome sequencing and resequencing, single nucleotide polymorphism (snp) discovery, identification of copy number variations, chromosomal rearrangements, etc. the impact of these technologies for everyday life, yet to be fully understood, will be far reaching. many algorithms and software tools have been created to deal with the large amount of data produced by these technologies. two of the fundamental and most investigated problems are read mapping and genome assembly. the former assumes the existence of a reference genome and attempts to find the location of newly sequenced reads from a different genome of the same species (; to whom correspondence should be addressed.). the latter attempts to reconstruct the genome that originated the reads . in spite of the many different approaches, these tools employ to solve their problems, they all share several common issues, such as very large data size, repeats in genomes and sequencing errors. the first two cannot be changed and we shall concentrate here on sequencing errors. attempts have been made to either correct such errors or discard the erroneous reads. some assembly tools include a spectral alignment-based read correction preprocessing step , whereas others pre-filter the reads . the very recent approaches of salmela (2010);;are exclusively dedicated to read correction. the general idea for correcting reads is to use the high coverage of the current sequencing technologies in order to identify the erroneous bases in the reads. each base is usually sampled many times and the correct value will prevail. the way such information is used can be spectral alignment or subtree weight in suffix trees . whereasprovides an efficient implementation of the euler-sr read correction algorithm ofby using cuda-enabled graphics hardware (their program will subsequently be referred to as cuda), the shrec program byuses a novel idea, by employing weighted suffix trees. the algorithm of salmela (2010) is a generalization of shrec to mixed sets of reads. error correction is quickly identified as a key problem in highthroughput sequencing data. another software, reptile, has been developed bysimultaneously with ours. it is also based on the k-spectrum approach of euler-sr and cuda. our high throughput error correction (hitec) algorithm uses a thorough statistical analysis of the suffix array built on the string of all reads and their reverse complements. it is intuitively explained in section 2.2 and fully analyzed in the remaining of section 2. we have tested in section 3 our algorithm on many datasets, simulated or real, from, as well as on several new ones. the accuracy of hitec is significantly higher than the accuracy of all the other programs. (the accuracy is the ratio between the number of corrected reads and the number of initially erroneous reads.) further, our own testing reveals a significant difference between the accuracy obtained by running the shrec program and that reported by(we provide the values for both.) this is due to the fact that shrec requires trying several parameter sets in order to find those providing the highest accuracy, which is likely not possible in real situations where the accuracy cannot be measured. hitec is not only more accurate but also more robust. our algorithm works for a wide range of read lengths and coverage levels and it is the only one to do so with automatic adjustment, depending on the data set, based on our statistical analysis. in addition to high accuracy, the time and space complexities are very good. our current serial implementation of hitec is comparable with reptile and is about six times faster than the parallel implementation of shrec on the four-processor machine we used for testing. the space consumption is comparable with reptile and lower than that of shrec for all tests. nevertheless, we plan to improve the time and space of our algorithm by providing a parallel implementation. this and other further research directions are presented in section 4 together with a summary of the achievements.  
