efficient construction of an assembly string graph using the fm-index motivation: sequence assembly is a difficult problem whose importance has grown again recently as the cost of sequencing has dramatically dropped. most new sequence assembly software has started by building a de bruijn graph, avoiding the overlap-based methods used previously because of the computational cost and complexity of these with very large numbers of short reads. here, we show how to use suffix array-based methods that have formed the basis of recent very fast sequence mapping algorithms to find overlaps and generate assembly string graphs asymptotically faster than previously described algorithms. results: standard overlap assembly methods have time complexity o(n 2), where n is the sum of the lengths of the reads. we use the ferraginamanzini index (fm-index) derived from the burrows wheeler transform to find overlaps of length at least among a set of reads. as well as an approach that finds all overlaps then implements transitive reduction to produce a string graph, we show how to output directly only the irreducible overlaps, significantly shrinking memory requirements and reducing compute time to o(n), independent of depth. overlap-based assembly methods naturally handle mixed length read sets, including capillary reads or long reads promised by the third generation sequencing technologies. the algorithms we present here pave the way for overlap-based assembly approaches to be developed that scale to whole vertebrate genome de novo assembly.the sequence assembly problem is one of the most important and difficult problems in bioinformatics. most genomes, particularly eukaryotic genomes, are highly repetitive that complicates their assembly by obscuring true relationships between reads with many false options. to help disambiguate the true relationships between the reads from those induced by different copies of repeats, it is useful to construct a graph where all the copies of a repeat are collapsed into a single segment. such a graph is commonly referred to as a repeat graph. this structure is a natural consequence of the de bruijn graph method of sequence assembly as the deconstruction of the sequence reads into k-mers (short subsequences of the reads of length k) collapses repeats that share the same k-mer into a single vertex . an alternative formulation was proposed by gene myers and is called the string graph . the string graph is built by first constructing a graph of the pairwise overlaps between sequence reads and transforming it into a string graph by removing transitive edges. the string graph shares with the de bruijn graph the property that repeats are to whom correspondence should be addressed. collapsed to a single unit without the need to first deconstruct the reads into k-mers. because it is based on maximal overlaps, which are typically longer than de bruijn k-mers, it also disambiguates shorter repeats that de bruijn methods would only resolve in later processing steps (if at all). the string graph is much more expensive to construct, however, as the set of all pairwise, inexact overlaps between sequence reads must be found. for this reason, the majority of assemblers of short read sequence data have been based on the de bruijn approach . a notable exception is the edena assembler that uses a suffix array to compute exact overlaps between reads that are then used to construct the string graph. we address the construction of a string graph with a related approach by indexing the set of sequence reads using the burrowswheeler transform(bwt)/ferragina manzini(fm)-index, which has recently been used for the short read alignment problem . we show how to efficiently compute the set of overlaps needed to construct the string graph from the fmindex. furthermore, we show that the string graph can be constructed directly using the fm-index without the need for explicitly finding all overlaps and a subsequent transitive removal step, yielding a space and time efficient construction algorithm.as a proof of concept, we implemented the above algorithms. the program is broken into three stages: index, overlap and assemble. the index stage constructs the suffix array and fm-index for a set of sequence reads, the overlap stage computes the set of overlaps between the reads and the assemble stage builds the string graph, performs transitive reduction if necessary, then compacts unambiguous paths in the graph and writes out a set of contigs. we tested the performance of the algorithms with two sets of simulations. in both sets of simulations, we compared the exhaustive overlap algorithm (which constructs the set of all overlaps) and the direct construction algorithm (which only outputs overlaps for irreducible edges). first, we simulated escherichia coli read data with mean sequence depth from 5 to 100 to investigate the computational complexity of the overlap algorithms as a function of depth. after constructing the index for each dataset, we ran the overlap step in exhaustive and direct mode with = 27. the running times of these simulations are shown in. as expected,overlap (exhaustive) overlap (direct). the running time of the direct and exhaustive overlap algorithms for simulated e. coli data with sequence depth from 5 to 100. the direct overlap algorithm scales linearly with sequence depth. as the number of overlaps grows quadratically with sequence depth, the exhaustive overlap algorithm exhibits above-linear scaling. the direct overlap algorithm scales linearly with sequence depth. the exhaustive overlap algorithm exhibits the expected abovelinear scaling as the number of overlaps for a given read grows quadratically with sequence depth. to assess the quality of the resulting assembly, we assembled the data using the direct overlap algorithm and compared the contigs to the reference. for each level of coverage, we selected to maximize the assembly n50 value. the n50 values ranged from 1.7 kbp (5 data, = 17) to 80 kbp (100 data, = 85). we aligned the contigs to the reference genome with bwa-sw and found that no contigs were misassembled. we also simulated data from human chromosomes 22, 15, 7 and 2 to assess how the algorithms scale with the size of the genome. we pre-processed the chromosome sequences to remove sequence gaps then generated 100 bp error-free reads randomly at an average coverage of 20 for each chromosome. the results of the simulations are summarized in. the running time of the exhaustive and direct overlap algorithms are comparable. as the sequence depth is fixed at 20, both overlap algorithms scale linearly with the size of the input data. the final stage of the algorithm, building the string graph and constructing contigs, is much shorter for the direct algorithm as the transitive reduction step does not need to be performed. in addition, this step requires considerably less memory as the initial graph constructed by the direct algorithm only contains irreducible edges. the bottleneck in terms of both computation time and memory usage is the indexing step, which builds the suffix array and fmindex for the entire read set. this required 8.5 h and 55 gb of memory for chromosome 2. extrapolating to the size of the human genome indicates it would require 4.5 days and 700 gb of memory to index 20 sequence data. while the computational time is tractable, the amount of memory required is not practical for the routine assembly of human genomes. we address ways to reduce the computational requirements in section 5.for the overlap and assemble rows,-e and-d indicate the exhaustive and direct algorithms, respectively. the last column is the ratio between chromosome 2 and 22.  
