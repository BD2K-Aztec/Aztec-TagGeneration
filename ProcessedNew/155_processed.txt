genome analysis age: defining breakpoints of genomic structural variants at single-nucleotide resolution, through optimal alignments with gap excision motivation: defining the precise location of structural variations (svs) at single-nucleotide breakpoint resolution is an important problem, as it is a prerequisite for classifying svs, evaluating their functional impact and reconstructing personal genome sequences. given approximate breakpoint locations and a bridging assembly or split read, the problem essentially reduces to finding a correct sequence alignment. classical algorithms for alignment and their generalizations guarantee finding the optimal (in terms of scoring) global or local alignment of two sequences. however, they cannot generally be applied to finding the biologically correct alignment of genomic sequences containing svs because of the need to simultaneously span the sv (e.g. make a large gap) and perform precise local alignments at the flanking ends. results: here, we formulate the computations involved in this problem and describe a dynamic-programming algorithm for its solution. specifically, our algorithm, called age for alignment with gap excision, finds the optimal solution by simultaneously aligning the 5 and 3 ends of two given sequences and introducing a large-gap jump between the local end alignments to maximize the total alignment score. we also describe extensions allowing the application of age to tandem duplications, inversions and complex events involving two large gaps. we develop a memory-efficient implementation of age (allowing application to long contigs) and make it available as a downloadable software package. finally, we applied age for breakpoint determination and standardization in the 1000 genomes project by aligning locally assembled contigs to the human genome. availability and implementation: age is freely available at http://sv.gersteinlab.org/age.the problem of single-nucleotide breakpoint resolution for genome structural variations (svs) (deletions, insertions, inversions, etc.) to whom correspondence should be addressed. is of great importance for a number of reasons. first, as recently demonstrated , single-nucleotide breakpoint resolution is absolutely necessary for sv classification and annotation. it is also important for genotyping known svs in newly sequenced genomes . second, precise breakpoints are required to evaluate the functional impact of svs. for example, uncertainty in breakpoints in just a few bases may lead to ambiguous conclusions when an sv is close to a splicejunction and/or regulation sites or overlaps exon(s). last, but not least, construction of personal diploid genomes (one of the ultimate long-term goals of human genome analysis) cannot be done properly without precise knowledge of sv breakpoints. it might seem obvious, but the only plausible way to achieve single-nucleotide breakpoint resolution is to align two sequences: one without an sv (e.g. a region in the reference human genome) and another containing an sv (e.g. locally assembled contig, completely sequenced and assembled fosmid clone or long read). most commonly used methods for sv detection provide only approximate breakpoint locations. paired-end mapping (also called read-pair) approaches inherently have uncertainty in breakpoint resolution, due to uncertainty in the distance between sequenced ends and the possibility of read mismapping . resolution of breakpoints by array comparative genomic hybridization analysis and read-depth approaches is limited by the probe density (for array) and the genomic bin size (for read-depth) used to produce the subsequently analyzed signal . while being imprecise in breakpoint resolution, the approaches mentioned above yield approximate sv locations, where a local assembly of a haplotype bridging an sv region could be accomplished. subsequently, alignment of the assembled contig to the predicted sv region identifies precise sv breakpoints. the described strategy is employed by the 1000 genomes project , where tens of thousands of local haplotype assemblies in the sv regions are made. proper alignment of those contigs will and already is an important challenge that must be fulfilled precisely and computationally efficiently, given the number of expected local assemblies. single-nucleotide resolution of sv breakpoints will allow their standardization and analysis in a single framework. the problem of aligning two sequences containing svs might seem to be trivial, but upon deeper consideration it is not. the major complications are due to possible repeats within aligned sequence,page: 596 595603. schematics of the expected optimal alignment around a structural variation (left) and alignments produced by global needlemanwunsch (nw) and local smithwaterman (sw) algorithms (right). the structural variation, i.e. deletion, is in red. in (b), the deletion is accompanied by a small insertion (blue). throughout the figure, alignable flanking regions are shown in green and orange. both sw and nw algorithms generally cannot arrive at a biologically correct alignment. sequence homology/identity around breakpoints and, the often complex nature of svs, where, for instance, a deletion/insertion is accompanied by smaller insertion/deletion. more specifically, classical algorithms, which guarantee the finding the optimal global needlemanwunsch and local smithwaterman alignments, generally cannot arrive at a biologically correct solution when aligned sequences contain svs . the major problem with those algorithms is the gap penalty. a large gap penalty does not allow for the extension of alignment across an sv. reducing the gap penalty interferes with the alignment scoring scheme and jeopardizes the construction of the proper alignment in regions flanking the sv and when the sequence(s) contains repeats. in addition, it offers only a partial solution to the problem, and cases when the sv is not a pure deletion or insertion are still not solved . a generalized global alignment algorithm is generally also unable to solve the formulated problem. the algorithm works by introducing the concept of a difference block, e.g. large gap, and imposing a cap on the penalty for having such a block in an alignment. when a block is small, e.g. small gap, it is penalized, as it would be in the classical needlemanwunsch algorithm. for a large block, e.g. large gap, the penalty is constant. therefore, it can only be applied to the alignment of sequences where the sv size is large enough for the algorithm to work in the non-classical mode. more importantly, the algorithm can be misled by sequence similarity around sv breakpoints. specifically, when sequences around breakpoints are homologous , the algorithm has to choose between aligning with a higher sequence identitybut introducing a large gapor aligning with a lower sequence identity and no gap . only the former scenario is correct, but either one can be chosen by the algorithm (considered to be optimal) depending on the scoring scheme, size of deletion, length and percent of homology around breakpoints, and the lengths of aligned sequences flanking the breakpoints (longer flanking sequences allow one to resolve breakpoints within longer and higher homologous sequences). incidentally, this problem is inherent to all algorithms employing a concave/piecewise gap penalty. it is also inherent to needlemanwunsch and smithwaterman algorithms. therefore, the described problem may hamper the discovery and characterization of a particular class of nahr svs that are characterized by long similar/homologous sequences around breakpoints. the sandwich dynamic programming algorithm, introduced to align cdnas to exons, could be useful, but even if adopted for aligning sequences containing svs, it does not offer a general solution, as it has the same problems as the needlemanwunsch algorithm when handling events that are not pure deletions or insertions . also, none of the mentioned algorithms could be applied to determine tandem duplication and inversion breakpoints. hence, with the aim of achieving single-nucleotide sv breakpoint resolution and standardization, we have developed an algorithm for the correct alignment of sequences containing svs. this article first describes an algorithm for optimal sequence alignment containing only a single sv deletion or insertion. we then describe algorithm extensions to align sequences containing other svs. to accomplish the first aim, we formulated it as a problem of finding the optimal local alignment of two sequences containing one unaligned and unpenalized region/gap (corresponding to one sv) between two aligned regions. the rationale is that flanking regions of an sv are very similar and can be aligned collinearly (5 end to 5 end and 3 end to 3 end) using a local smithwaterman algorithm . to yield the final alignment, the two local ones should simply be combined. however, if the alignments of the flanking regions overlap, combining two local alignments becomes complicated, page: 597 595603conceptually, to produce correct alignment one has to find an optimal jump between overlapping local alignments. however, local alignment calculation and jump finding have to be done simultaneously rather than successively to guarantee finding the optimal alignment (supplementary). and an optimal jump from one local alignment to another must be foundthat is, a gap must be introducedto maximize the alignment score. the optimal (highest scoring) alignment may not be found if the jump is searched between already calculated local alignments because trimming a local alignment does not guarantee that it is still optimal (a simple example demonstrating the concept is shown in supplementary). therefore, the calculation of flanking sequence alignments and finding the optimal jump between the two must be done simultaneously rather than successively. when formulated this way, the problem explicitly addresses only the issue of the largest gap in the alignment and does not require adjustment or modifications of the alignment scoring scheme. therefore, substitution matrices and gap penalties tuned to a particular alignment purpose, e.g. contig or short/long-read alignment, can be used unchanged.we have described an algorithm for the correct alignment of two nucleotide sequences containing svs, i.e. deletion, insertion, tandem duplication or inversion, called age. the algorithm does not require the adjustment or modification of the alignment scoring scheme(s) that is usually tuned for a particular alignment purpose, e.g. cross-species, contig or read alignments. thus, the algorithm can be universally applied in various biological studies relying on alignment. its distinguishing feature is that it produces correct alignments in cases that are challenging for methods utilizing concave/piecewise gap penalty, i.e. cases with long sequence homology around breakpoints and/or a short sv region and/or short flanking sequences. the algorithm naturally handles certain cases of complex sv events, such as when deletion is accompanied by insertion. the most straightforward application of age is single-nucleotide sv breakpoint resolution and standardization, as has just been demonstrated by using the algorithm implemented in age software. while the algorithm can be generalized to align sequences containing any number of svs, its most practical (due to computational scalability) application is to align sequence with one sv, which are also the most common. sequences containing more svs are very rare, even when aligning long sequences of fosmid clones . still, age can also be useful in aligning such sequences. one may envision a strategy in which sv breakpoints are approximately localized (e.g. by analysis of local alignments) and then precisely identified using age to align only subsequences that flank svs. of perhaps equal importance, the algorithm can be used to refine read alignment once a read has been heuristically mapped to a particular genomic location that is expected to contain an sv. such read realignment has potential implications for genotyping known svs in newly sequenced individuals, and/or discovering page: 602 595603. comparison of assembled contig alignments in the region of predicted deletions. the first line in each alignment is the sequence for the genomic region, while the second is for the contig sequence. nucleotide numbering is sequential, starting from one in both compared sequences. each alignment is accompanied by a schematic representation underneath. (a) the predicted deletion is chr20:2,969,769-2,970,056. the contig that is 614 bp in length has been aligned by the age, gap3, crossmatch and blat programs to the predicted region of deletion, which is extended by 1 kb in each direction, i.e. from 2,968,769-2,971,056. the first sequence (genomic region) has two pairs of homologous sequences: orange to yellow and dark green to light green. age alignment clearly identifies a large unaligned region, confirms a predicted deletion, and derives deletion breakpoints as chr20:2,969,756-2,970,052 (coordinates are for the first and the last deleted bases). note that the resulting breakpoints are in excellent agreement (within 13 bp) with the prediction. no other program was able to produce the correct alignment. (b) predicted deletion is chr8:118,292,728-118,292,987. the contig of 530 bp in length has been aligned by the age and gap3 programs to the predicted region of deletion, which is extended by 1 kb in each direction, i.e. from 118 291 728 to 118 293 987. age alignment clearly identifies a large unaligned region, confirms a predicted deletion, and derives deletion breakpoints as chr8:118,292,711-118,292,990 (coordinates are for first and last deleted bases). gap3 is not able to align the left flanking sequence, as the penalty for a long gap outweighs the matches at the left flanking sequence. all coordinates are for human hg18 reference.  
