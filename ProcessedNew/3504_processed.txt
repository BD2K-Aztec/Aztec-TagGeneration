genome analysis permory: an ld-exploiting permutation test algorithm for powerful genome-wide association testing motivation: in genome-wide association studies (gwas) examining hundreds of thousands of genetic markers, the potentially high number of false positive findings requires statistical correction for multiple testing. permutation tests are considered the gold standard for multiple testing correction in gwas, because they simultaneously provide unbiased type i error control and high power. at the same time, they demand heavy computational effort, especially with large-scale datasets of modern gwas. in recent years, the computational problem has been circumvented by using approximations to permutation tests, which, however, may be biased. results: we have tackled the original computational problem of permutation testing in gwas and herein present a permutation test algorithm one or more orders of magnitude faster than existing implementations, which enables efficient permutation testing on a genome-wide scale. our algorithm does not rely on any kind of approximation and hence produces unbiased results identical to a standard permutation test. a noteworthy feature of our algorithm is a particularly effective performance when analyzing high-density marker sets. availability: freely available on the web atthe analysis of genome-wide association studies (gwas) using hundreds of thousands of single nucleotide polymorphism (snp) markers requires strict control of the type i error . many simple approaches to multiple testing correction such as the bonferroni method fail to account for linkage disequilibrium (ld) among snps, which leads to an overly conservative p-value correction. the resulting loss of power matters increasingly because the number of genetic markers and the marker density both grow constantly . permutation-based corrections fully account for the correlation among snps caused by ld and therefore are considered the gold standard of multiple testing correction in gwas. they provide the highest statistical power among the procedures controlling to whom correspondence should be addressed. family wise type i error risk. on the other hand, they require a lot more computational effort than the simple bonferroni adjustment. for example, running a large number of permutations (100k) for large-scale marker sets using standard software such as plink can take up to several years of computing time . progress has been made by the introduction of accelerated permutation procedures . the software presto allows to perform moderate numbers of permutations (1000 to 10 000) for large datasets within a day or more and thus already the calculation of adjusted p-values in the region of 10 3 to 10 4. nevertheless, there has been an ongoing demand for faster methods to compute genome-wide adjusted p-values, which has motivated the development of various approximation algorithms over the last years. a first alternative approach is based on the bonferroni correction adjusting the testing threshold for m markers being tested to = /m.suggested to replace the bonferroni m by an effective number of independent tests (m eff ), which is derived from eigenvalues of the markers correlation matrix. in this way, information about the correlation between snps is used and therefore results in a less conservative p-value adjustment than bonferroni; that is, m eff m. based on the initial idea, several authors proposed different ways of estimating m eff . however, in general it still yields conservative estimates in comparison with the permutation test . another alternative framework is based on the multivariate normal distribution (mvn), which is used as an approximation of the unknown distribution of the marker set. lin (2005) and seaman and mllerwere the first to propose mvn-based methods for multiple testing adjustment in association studies, followed by conneely and boehnke (2007) who increased its efficiency by numerically computing the asymptotic mvns , instead of deriving them by simulation. however, due to the numerical limitations of integrating high-dimensional mvns, these approaches require a block-wise strategy in large marker sets, which does not consider correlations between disjoint marker blocks. to answer this problem,proposed a resamplingbased method called slide, which uses a sliding window locally accounting for the inter-marker correlation. however, both accuracy and computational efficiency depend on the size of the window; that is, extending the window increases accuracy but at the same time results in a considerable loss of computational efficiency.we compare our method with existing permutation-based software, namely presto 1.0.1 and plink 1.06 as well as alternative approaches, for which we select simplem representing the methods using m eff and slide 1.0.4 representing the mvn framework, respectively. to the best of our knowledge, these two algorithms both represent the fastest and most accurate methods of their class. we do not treat the rat software by, which is based on importance sampling, because it was designed as a special application to adjust a single, preferably highly significant p-value, whereas here we are interested in simultaneously adjusting a wide range of p-values.multiple testing adjustment is important for genetic data analysis but it has been computationally challenging to use the gold standard method, permutation tests. one can think of two general approaches to this problem: either accelerate the permutation procedure or take an efficient approach to compute approximation and improve its accuracy. in recent years, research primarily has focused on the latter approach. we employed the former and have developed a permutation algorithm optimized for use with genetic data. our algorithm not only presents a notable improvement over existing permutation test implementations but even can compete with the fastest alternative methods. we showed that our algorithm is also well equipped for the analysis of increasingly denser and larger marker sets including growing sample sizes. permory hence relieves the computational burden of permutation testing on a page: 2100 20932100  
