genome analysis geco++: a c++ library for genomic features computation and annotation in the presence of variants we propose a c++ class library developed to the purpose of making the implementation of sequence analysis algorithms easier and faster when genomic annotations and variations need to be considered. the library provides a class hierarchy to seamlessly bind together annotations of genomic elements to sequences and to algorithm results; it allows to evaluate the effect of mutations/variations in terms of both element position shifts and of algorithm results, limiting recalculation to the minimum. particular care has been posed to keep memory and time overhead into acceptable limits. availability and implementation: a complete tutorial as well as a detailed doxygen generated documentation and source code issequence analysis algorithms play a crucial role in the identification of genomic functional elements. several algorithms have been and are being developed to identify putative binding sites for a great number of functional elements involved in many cellular processes. algorithms are usually implemented through sequencedriven programs: a sequence is provided upon which calculations are made and results are returned with a reference to sequence positions. in the great majority of cases the results need to be interpreted in the light of some functional element annotated elsewhere (transcripts, genes, intron/exon boundaries, etc.) or their significance can be improved by comparison with some other features such as sequence conservation among different species or chromatin accessibility. these are time-consuming tasks that are often implemented using specialized packages based on interpreted languages like, for example bioperl and bioconductor . the same holds true when sequence variations are involved in the analysis. sequence-driven programs need multiple runs to make calculations on multiple input sequences: this often lead to redundant recalculations and data i/o operations. again the comparison of the results between varied and to whom correspondence should be addressed. unvaried sequences is left to the user. furthermore, variations can change the positions of genomic elements of interest making the interpretation of the results even more difficult. despite a number of efficient and feature-rich libraries and tools have been developed for sequence-driven algorithm implementation, the above-mentioned tasks are usually left to the user. the complexity of these tasks is a severe limitation to an extensive application of algorithms implemented in this way. several useful bioinformatics workflow tools like taverna , gaggle and galaxy , have been developed to automatize, standardize and speed up analyses and visualizations integrating different programs and data sources. these workflow management tools can be used to partially get around the above-mentioned limitations, but still they do not resolve the inefficiency of the sequence-driven software model, particularly in the frequent case of repeated runs on similar sequences. moreover, there is an additional cost in terms of data formats conversion, i/o operations and script interpretation. on the other hand, most successful algorithms are employed to analyse entire genomes: results are collected in databases along with functional annotations and experimental data like in the ucsc genome browser and in ensembl . genome browsers exploit these databases to give a useful, general and extensive picture of a genomic region features. nevertheless, for any quantitative analysis, users have to query the underlying databases to fetch the data they need: a comparable situation to the one described above with the additional limitation that pre-computed algorithm results (often obtained under fixed default parameters) cannot be used to evaluate the effect of variations. we developed geco++ (genomic computation c++ library), a c++ class library to the purpose of making easier and faster the efficient implementation of algorithms for sequence analysis when functional annotations and genomic variations need to be considered. the library is not intended as a substitute for more specialized libraries; instead it frees the programmers from the burden of keeping track of genomic annotations and variations, giving them the opportunity to use the libraries they prefer for specific fields like, for example bio++ and seqan for general sequence analysis or libsequence for population genetics.new cost-effective high-throughput sequencing and array techniques are now able to generate huge amounts of information on dna, rna as well as proteindna and proteinrna interactions. systems biology approaches can integrate these information at a genomic level describing and studying complex regulatory networks. prediction and interpretation of the functional meaning of individual genomic variations could be inferred by studying the modifications and rewiring events they produce in these networks. despite this being considered as one of the most promising challenges , a gap remains to be filled between sequence analysis algorithms, genomic annotations and variations; the lack of tools integrating these three levels of analysis is going to become more evident as high-throughput techniques on one side and system biology on the other start to converge to translational research applications. beside providing c++ programmers with features usually present in interpreted languages, our library introduces a genomic element model that tightly and time/space efficiently integrates computed features, position annotations and variations, allowing for feature rich in memory representations of what usually is provided by genome browsers. the most important difference is that in our case this representation is able to dynamically keep track of genomic variations. to our knowledge this is an approach that has not been implemented in any other package yet, irrespectively by the language used. as a first attempt to fill this gap, the geco++ library makes the development of complex and efficient applications straightforward, not bounded to specific data sources or computational algorithms and that can easily evaluate the effect of sequence variations on genomic functional elements. conflict of interest: none declared.  
