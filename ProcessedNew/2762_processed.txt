ls-gkm: a new gkm-svm for large-scale datasets gkm-svm is a sequence-based method for predicting and detecting the regulatory vocabulary encoded in functional dna elements, and is a commonly used tool for studying gene regulatory mechanisms. here we introduce new software, ls-gkm, which removes several limitations of our previous releases, enabling training on much larger scale (ls) datasets. ls-gkm also provides additional advanced gapped k-mer based kernel functions. with these improvements, ls-gkm achieves considerably higher accuracy than the original gkm-svm. availability and implementation: c/c source codes and related scripts are freely available from http://github.com/dongwon-lee/lsgkm/, and supported on linux and mac os x. contact: dwlee@jhu.edu supplementary information: supplementary data are available at bioinformatics online. we have previously introduced a sequence-based method, kmer-svm (fletez-brant et al., 2013; lee et al., 2011) to predict regulatory elements from dna sequence and epigenetic data using support vector machines (svm) (vapnik, 1995). it has been successfully applied to studies of regulatory elements in different cellular contexts (gorkin et al., 2012; pimkin et al., 2014), and further improved by using gapped k-mers as new features (gkm-svm (ghandi et al., 2014)). we have also recently demonstrated its ability to predict regulatory sequence variants (lee et al., 2015). since then, gkm-svm has gained increasing attention (setty and leslie, 2015; zhou and troyanskaya, 2015). our general strategy is to build an svm classifier that distinguishes regulatory sequences from non-regulatory genomic sequences in the k-mer or gapped k-mer frequency feature vector space. training of svm involves evaluation of a kernel matrix (or gram matrix), defined as an n-by-n matrix of all possible inner products (or kernel functions) between a set of vectors of n training examples. however, as n increases, direct computation of the kernel matrix quickly becomes impractical with gapped k-mers as features. to resolve this issue, gkm-svm employs an efficient algorithm that calculates a full kernel matrix with a runtime that linearly scales with n instead of n 2. an svm classifier is then trained using the pre-calculated kernel matrix and standard svm training methods. yet, the full kernel matrix evaluation required in the original implementation has hindered optimal training of gkm-svm on larger datasets because it needs substantial memory resources proportional to n 2. sub-sampling strategies to circumvent this issue can be helpful (ghandi et al., 2014), but training on smaller datasets may yield sub-optimal svm classifiers. to tackle this problem, i have developed an improved software, ls-gkm, by implementing gapped k-mer kernel (gkm-kernel) functions within the libsvm framework (chang and lin, 2011). most svm tools such as libsvm utilize decomposition methods for svm training. it iteratively finds and solves a small subset svm problem that only needs a partial kernel matrix. for example, libsvm evaluates just two columns of the kernel matrix in each of the problem solving steps in its sequential minimal optimization algorithm (fan et al., 2005). therefore, replacing the libsvm kernel routines with the gkm-kernel functions can essentially solve the memory resource issue and, consequently, allows us to train svm on much larger datasets. to this end, i adopted and modified the original gkm-kernel algorithm, substituting for the original libsvm kernels so that it can efficiently evaluate one column of the kernel matrix in the same manner as the original gkm-svm does for the full matrix. multi-thread functionality is also implemented in ls-gkm for further speed-up (supplementary methods for more details). i first compared runtime and memory usage of the new software to the original gkm-svm by varying the training set size n (supplementary methods, fig. s1). as expected, our previous method exhibits quadratic growth of memory usage as n increases. gkmtrain (the new svm training module of ls-gkm) with the large downloaded from cache (8 gb) also exhibits quadratic memory expansion when n 60 000. however, the overall memory usage is much less than the original method ($20). moreover, once the cache is full, the memory only linearly increases. regarding runtime, the original method initially shows better computational efficiency than gkmtrain with the default setting (1 thread, 100 mb). however, with either the large cache or the four threads, the new program can run faster than the original one. furthermore, it can run almost 5 faster when both options are used. most notably, we can now regularly train ls-gkm on much larger datasets with reasonable time and memory. in addition to the integration of kernel functions into libsvm, three new kernel functions have been developed. analogous to the basic rbf kernel, gkmrbf-kernel is defined as the radial basis function , in the space of gapped k-mer frequency vectors (supplementary methods). the second option, denoted as center weighted gkm-kernel or wgkm-kernel, is inspired by the observation that most chip-seq and dnasei-seq signals are concentrated in the central regions within peaks. in this new kernel, the gapped k-mers are differentially weighted based on their distances from the center of the peak (supplementary methods, fig. s1). the last kernel, wgkmrbf-kernel, is the combination of the previous two. to demonstrate the utility of ls-gkm, i assessed how much classification accuracy can be improved by ls-gkm for predicting regulatory elements. uniformly processed 322 encode chip-seq datasets (the encode project consortium, 2012) containing at least 5000 regions were considered, and standard training and test procedures developed in the previous studies (ghandi et al., 2014; lee et al., 2011) were applied with some modifications (supplementary methods). first, the new models trained on the whole datasets exhibit considerably better auc than the models trained on the sub-sampled sets (n 10 000), especially when the training set is large (n 60 000) (supplementary methods, fig.s2a). a grid search of the c parameter on selected datasets confirms that this result is not an artifact caused by a sub-optimal choice of c (supplementary table s1). in fact, our default value (c 1) was optimal or near optimal in almost all cases we tested. second, the model trained with gkmrbf-kernel further increases the auc as compared to the original gkm-kernel in every case, but the improvement is marginal (supplementary methods, fig.s2b). this result implies that the advantage of using non-linear decision boundaries is limited with gkm-kernel. third, wgkm-kernel can also significantly improve the auc, when the datasets already exhibit auc values 0.9 (supplementary methods, fig.s2c). closer investigation reveals that most of the less predictive datasets (auc 0.9) are chip-seq on pol2 and its related factors (taf1, taf7 and tbp). this suggests that many of these peaks may represent transient binding of the factors and, thus, contain less predictive sequence features. fourth, similar to the gkmrbf-kernel, wgkmrbf-kernel marginally improves auc when compared to wgkm-kernel (supplementary methods, fig.s2d). note that, in some cases such as pol2 chip-seq, the best aucs are achieved by gkmrbf-kernel not by wgkmrbf-kernel. therefore, for the final comparison, the better kernels were chosen based on classification performance with independent training and evaluation (supplementary methods, fig. s3). supplementary figure s4 compares the baseline aucs (trained on 10 000 regions with gkm-kernel) from the original gkm-svm to the best aucs achieved by ls-gkm. the average gain of auc is significant (0.912 ! 0.941). if pol2 and the related chip-seq datasets are removed, the average of the best aucs is remarkably high, 0.960. to determine whether ls-gkm can also improve deltasvm, a major application of gkm-svm for predicting regulatory sequence variants (lee et al., 2015), the dsqtl test set was reanalyzed using the new ls-gkm models trained on a larger gm12878 dhs data-set (supplementary methods, fig. s5). the precision recall curves show that the new models consistently outperform the original model. however, no further improvement is achieved with new kernels, suggesting that larger datasets primarily contribute to the improvement of deltasvm accuracy. in this study, i have presented new and improved software, ls-gkm, which offers several new functionalities and considerably improves the classification accuracy on predicting regulatory elements. we strongly encourage all users of our software to train models on the largest datasets available, which can produce significantly more accurate predictions. in this regard ls-gkm should improve the performance considerably, and in combination with its enhanced functions, ls-gkm is expected to significantly contribute to our understanding of gene regulation.  
