sequence analysis a python package for parsing, validating, mapping and formatting sequence variants using hgvs nomenclature biological sequence variants are commonly represented in scientific literature, clinical reports and databases of variation using the mutation nomenclature guidelines endorsed by the human genome variation society (hgvs). despite the widespread use of the standard, no freely available and comprehensive programming libraries are available. here we report an open-source and easy-to-use python library that facilitates the parsing, manipulation, formatting and validation of variants according to the hgvs specification. the current implementation focuses on the subset of the hgvs recommendations that precisely describe sequence-level variation relevant to the application of high-throughput sequencing to clinical diagnostics. availability and implementation: the package is released under the apache 2.0 open-source license. source code, documentation and issue tracking are available atas high-throughput sequencing becomes commonplace in the investigation and diagnosis of disease, it is essential that communicating variants from sequencing projects to the scientific community and from diagnostic laboratories to health-care providers is easy and accurate. the human genome variation society (hgvs) mutation nomenclature recommendations are widely endorsed by professional organizations, mandated by numerous journals and displayed by databases and tools. the hgvs recommendationsoriginally devised to standardize the representation of variants discovered before the advent of high-throughput sequencingare now approved by the hgvs and continue to evolve under the auspices of the human variome project. the continual evolution of hgvs guidelines makes the nomenclature difficult to understand and to use for experts and non-experts alike, often resulting in incorrect usage and potential clinical interpretation errors.we sought a software library for manipulating hgvs variants that was appropriate for clinical diagnostics. specifically, we required the following functionality: (i) we must be able to process patient variants locally (i.e. not sent to a remote site); (ii) we must be able to audit, extend and control updates of the source code and data; (iii) we must be able to map variants in regions of genome-transcript discrepancies, particularly indels. mutalyzer provides a web interface and web services for constructing, validating and transforming sequence variants, but is not available for local installation. another python library (https://github.com/counsyl/hgvs), similar in spirit to the one we present here, uses a regular expressionbased parser and relies on exon structures derived from blat alignments . although other packages accept or generate hgvs-formatted variants, such as snpeff and vep , they are not intended for use as a software library. here we present an open-source python library for parsing, mapping, validating and formatting sequence variation according to the hgvs guidelines. the library features a parser based on a parsing expression grammar and a variant mapper that accommodates insertion/deletion discrepancies between reference genomic sequences and transcripts that confound most existing tools. object representation. for a full list of object classes, readers should consult the source code. the hgvs parser presented here is based on a parsing expression grammar and was inspired by previous work . there are 127 parsing rules to cover dna, rna, cds and protein parsing. any rule may be invoked to parse components of valid hgvs strings into an appropriate type. for example, the c_edit rule may be used to parse anhgvs substring such as c.688+403c4t. following python conventions, formatting is implemented using the str method of each class. the hgvs package requires sequence data and exon structures to map variants between the genome and transcript coordinates, to infer protein sequence changes from transcripts and to validate variants. the data provider interface declares seven methods required to support hgvs functionality; developers may implement a subclass of the abstract interface to use data from other sources. the hgvs package includes a concrete implementation based on the publicly available universal transcript archive (information about uta is available with package documentation). in addition to the syntactic validation provided during parsing, the hgvs package includes validation tools to ensure that a sequencevariant object conforms to the hgvs guidelines and to catch common errors. for performance reasons, the validator distinguishes intrinsic and extrinsic validation: intrinsic validation asserts internal correctness of the object, such as requiring that the start position is less than or equal to the end position or that the length of the location range specified for an insertion is one, and extrinsic validation invokes external data for validation, such as verifying that the reference sequence specified in the variant matches that from a source database. the hgvs package provides tools to transform (map) variants between genomic (g.), mrna (r.), cds (c.) and protein (p.) variants. of particular note is the implementation of an indel aware mapper that correctly accounts for insertions and deletions in transcripts with respect to a genomic reference. these discrepancies occur owing to natural polymorphisms and sequencing errors, and occur in 1.6 of current refseq transcripts . the package also includes a transcript liftover tool to migrate variants between different transcripts. when used in conjunction with uta, liftover may also be performed between the same refseq transcript aligned to a genomic reference by splign and blat . splign and blat provide substantially different exon structures for 2.7 of refseq transcripts.  
