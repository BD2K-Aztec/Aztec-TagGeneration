an algorithm to detect and communicate the differences in computational models describing biological systems motivation: repositories support the reuse of models and ensure transparency about results in publications linked to those models. with thousands of models available in repositories, such as the biomodels database or the physiome model repository, a framework to track the differences between models and their versions is essential to compare and combine models. difference detection not only allows users to study the history of models but also helps in the detection of errors and inconsistencies. existing repositories lack algorithms to track a models development over time. results: focusing on sbml and cellml, we present an algorithm to accurately detect and describe differences between coexisting versions of a model with respect to (i) the models encoding, (ii) the structure of biological networks and (iii) mathematical expressions. this algorithm is implemented in a comprehensive and open source library called bives. bives helps to identify and characterize changes in computational models and thereby contributes to the documentation of a models history. our work facilitates the reuse and extension of existing models and supports collaborative modelling. finally, it contributes to better reproducibility of modelling results and to the challenge of model provenance. availability and implementation: the workflow described in this article is implemented in bives. bives is freely available as source code and binary from sems.uni-rostock.de. the web interface budhat demonstrates the capabilities of bives atmodelling and simulation is a standard approach to investigate complex biological processes. a steadily increasing number of computational models are available from open repositories such as the biomodels database or the physiome model repository (pmr2;). these repositories provide the infrastructure necessary to maintain model code and associated metadata. the distribution of models through these repositories accelerates collaborative research and encourages model reuse.the reusability of models improves the modelling workflow, by reducing errors and saving time. tracking the evolution of a model, that is providing information about changes in the model and its encoding, plays an important role in supporting the user . the need of model version control has been emphasized repeatedly on several occasions .models are continuously modified. consequently, new versions of a model are regularly being generated. we observe three major steps in model development that result in new versions: during the design phase of models; later on during curation and error correction and with updates of the format specification. here, we present an algorithm to detect and communicate differences between these coexisting versions of an sbml or cellml model. we implemented this algorithm in a software library, bives. together, our work helps to identify and characterize the changes and thereby contributes to the documentation of a models history.bives detects the differences between model versions.exemplifies the method, showing two versions of a minimalist model, following the sbml structure. here, the reaction c d e (left) is updated to d h e (right). first, the model files are transformed into internal tree representations and prepared for the subsequent mapping procedure (row one, pre-processing). the weights x of nodes in the tree are computed according to the size of the corresponding subtrees. for example, the subtree rooted in b is larger than the subtree rooted in f and, thus, bs weight is greater than fs (namely x 4 and x 2, respectively). the mapping procedure starts in row two ofwith a mapping by id. since the id attribute plays a key role and many elements do carry id attributes, the algorithm typically finds a large number of mappings at this early stage. in our example, only the identifiers of the g-nodes are identical (idreaction1) and thus only a single connection is found (for demonstration purposes, we assume that the d-nodes do not carry id attributes). the mapping by id phase is followed by a bottom-up propagation (row three), which makes use of the parentchild relation of nodes in the trees: for nodes that are mapped already, there is a good chance that their parents also stem from each other. in the example, the mapping of the g-nodes is propagated towards the roots of the trees and the a-f-g-paths in both model versions are mapped. afterwards, the algorithm tries to map subtrees with an equal signature (row four, top-down propagation). the signatures r, which are computed in the pre-processing step, uniquely identify the subtrees. here, only the signatures of the d-nodes are equal (r x), which is why d is the only candidate for a mapping. since the d-nodes originate from each other, as well as the a-nodes do, a mapping of the b-nodes is added. following the propagation phases, the algorithm tries to connect unmapped children of mapped nodes (row five, optimization). in our example, only the b-nodes have unmapped children: nodes c and e in version 1 and nodes e and h in version 2 do not yet have partners. to find a mapping of these children, a 2 2 distance matrix is created. the elements in this matrix represent differences between the attributes of the corresponding nodes. the e-nodes only differ in the value of the concentration attribute. changing the value of one single attribute in a species is a minor update and, thus, the nodes distance is very small. in contrast, the nodes c, e and h do not have anything in common. consequently, the e-nodes will be mapped, while c and h remain unmapped. finally, the resulting mapping is analysed (row six, evaluation). for example, the algorithm detects that c was deleted, d was inserted and e was modified in version 2. the difference graph, as obtained when interpreting the results of the evaluation step, is shown on the bottom of. particular means of communicating the differences are described with. the supplementary material contains a more detailed, real-life showcase for difference detection with bives. bives communicates the differences. bives exports the difference graph in several output formats, including computer-digestible xml code and a graphical representation. one type of output are xml-encoded, machine readable deltas, which describe the difference between two versions of a model (see section 2.4). a remarkable feature of these deltas is their completeness. they can be inverted and composed . that means, given one model version and the delta, the opposite version can be retrieved . another major feature is the translation of the delta into human readable formats (refer to the communication step in). bives, for example, summarizes the model-related changes in a text-based report. this type of output is ideally suited to be integrated in other tools. specifically, the report is encoded in markdown, restructuredtext or html. markdown and restructuredtext are themselves already easy to read and can be converted to common markup languages. the report in html format is generated for convenience, e.g. to instantly display the changes on a web page.shows a sample report. another notable feature is the encoding of differences between two versions of a model in standard graph representations enabling a subsequent visualization. while bives is itself not able to produce rendered graphical output, it exports different graphical notations, including graphml, dot or json (json.org). armed with this, it is effortlessly possible to produce visualizations, as implemented in the demonstrator budhat. budhat demonstrates the advantages of our algorithm. as a proof of concept, we implemented a web-based interface budhat (budhat.sems.uni-rostock.de), which uses bives to compare versions of a computational model. budhat contains a rudimentary user management and stores models in a database back-end. it calls bives for the comparison and displays the obtained results in the web browser. the different visualizations that are possible in budhat are shown in. all figures show the difference between versions 2007-06-05 and 2013-11-03 of model biomd0000000107 in the biomodels database. more specifically, budhat provides access to (i) the reaction network highlighting the changes, as shown in; (ii) the html report of the changes, as shown inand (iii) the delta encoded in xml, as shown in. delta and report are directly passed to the web interface. but as stated above, bives exports the graph representing the reaction network in an exchangeable format (in this case it is graphml or json). therefore, budhat uses either cytoscapeweb or cytoscapejs (cytoscape.github.io/cytoscape.js) to display the highlighted reaction network. from, it is easy to see that the role of cdc2 in reaction cyclin-cdc2 dimer formation has changed. in the former version, cdc2 modified this reaction, but this modification was deleted (deletion is highlighted by the red edge). instead, in the updated version, cdc2 is one of the reactants for this reaction (insertion is indicated by the blue edge). since this modification changed the reaction, the node representing the reaction is coloured in yellow. this approach makes it much easier to understand the differences, compared to a pure textual diff. already for this small example, it would be much more effort to see and understand what happened to a model from the sources or from the 1559 lines of output reported by unix diff.bives helps grasping the changes. our algorithm filters the identified differences and drops all but biologically and mathematically relevant modifications. we are currently working on refining these filters using an ontology for differences. we envision that this ontology, together with tools for semi-automatic annotation, will help reduce the number of displayed changes to the ones that are meaningful or requested by the user . bives produces reports and graphical representations of changes using open formats such as graphml, html or markdown and thereby helps to communicate the changes. for example,shows that the graphical representation supports users in exploring the changes affecting the biological network. additionally, a comprehensive list of changes is compiled into a human readable report, as shown in. reports are particularly suitable for people interested in the details of mathematical changes. bives outputs can of course be used by other tools for further processing of results. current limitations with respect to output formats are missing support for the sbgn format and suitable graphical representations of models that do not specify a reaction network.you can easily integrate bives with your tools. bives can be used in three different ways: first, the bives java library provides a smart api for comparison of model versions. the differences can then be obtained in various formats, as described earlier. this api is, for instance, used by our open source tool budhat, providing plenty of example code. second, bives is available as a web service to facilitate the integration with non-java applications. the corresponding package can be installed on java-based web servers, such as apache tomcat (tomcat.apache.org). the functional curation (chaste. cs.ox.ac.uk/functionalcuration) project of chaste , for example, uses the bives web service to track the evolution of models uploaded to their system. third, the library is shipped with a main class and, therefore, it can be executed on a command line. the data management platform seek , for example, implemented support for model version control calling bives on a separate command line. the web site at sems. uni-rostock.de/bives offers further information about the three implementations, including examples, how-tos, the source code and binaries of our tools. bives currently supports sbml and cellml, but it could also be extended towards other xml-based model exchange formats such as neuroml or pharmml . moreover, bives could improve version control of simulation descriptions [e.g. differences between two simulation setups encoded in the simulation experiment description markup language (sed-ml),. in summary, bives improves the detection of differences between versions of models in sbml or cellml format. returning to the seven w-questions from the introduction, bives contributes to the what and how as defined in . the what refers to content-related events, such as modifications of parameter values in the model, and non-content-related events, such as the upgrade to a new sbml version. in addition, bives tells you how the what has changed. there is scope for further extensions to provide hypotheses for the why.  
