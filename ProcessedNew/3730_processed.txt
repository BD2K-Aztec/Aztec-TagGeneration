sequence analysis proovread: large-scale high-accuracy pacbio correction through iterative short read consensus motivation: today, the base code of dna is mostly determined through sequencing by synthesis as provided by the illumina sequen-cers. although highly accurate, resulting reads are short, making their analyses challenging. recently, a new technology, single molecule real-time (smrt) sequencing, was developed that could address these challenges, as it generates reads of several thousand bases. but, their broad application has been hampered by a high error rate. therefore, hybrid approaches that use high-quality short reads to correct erroneous smrt long reads have been developed. still, current implementations have great demands on hardware, work only in well-defined computing infrastructures and reject a substantial amount of reads. this limits their usability considerably, especially in the case of large sequencing projects. results: here we present proovread, a hybrid correction pipeline for smrt reads, which can be flexibly adapted on existing hardware and infrastructurefrom a laptop to a high-performance computing cluster.on genomic and transcriptomic test cases covering escherichia coli, arabidopsis thaliana and human, proovread achieved accuracies up to 99.9 and outperformed the existing hybrid correction programs. furthermore, proovread-corrected sequences were longer and the throughput was higher. thus, proovread combines the most accurate correctionresultswithan excellentadaptabilitytotheavailablehardware. it will therefore increase the applicability and value of smrt sequencing. availability and implementation: proovread is available at the following url: http://proovread.looking back just a decade, sequencing a genome was a timeconsuming and expensive endeavor. the emergence of secondgeneration sequencers and their sequencing by synthesis have changed this drastically, thereby revolutionizing molecular biology. today, a single run of a hiseq2500 can generate as much as 600 gb high-quality output data, which covers a human genome 200. unfortunately, this new technology came with a drawback. compared with the traditional sanger sequencing, resulting reads are short (150 bp). this became a major challenge for the assembly, especially in the case of large repetitive genomes. accordingly, a plenitude of short read assemblers has been developed, e.g. allpath-lg , the celera assembler and soapdenovo . still, repeats longer than the short reads (srs) can not be resolved, and therefore, the genome can not be reconstructed in these regions . for the assembly of repetitive genomes, a combination of short and long insert libraries and additional fosmid sequencing are therefore recommended . in 2009, however, a new long read (lr) sequencing technology emerged: single-molecule real-time (smrt) sequencing. here, the incorporation of nucleotides in a dna molecule is recorded during synthesis for several thousand single template strands simultaneously . with the latest chemistry, this approach delivers reads 44 kb, enabling the assembly of larger repeat structures . additionally, amplification can be omitted. since 2011, smrt-based sequencing is commercially available from pacific biosciences of california. their third-generation sequencer, pacbio rs ii, generates to date up to 400 mb per sequencing run. still, the advantages of third-generation sequencing come at a price. the accuracy of its lrs falls way behind those of short second-generation reads. although current illumina instruments offer a sequencing accuracy of 99 , pacbio rs ii achieves only 8085 . furthermore, the error model of both technologies differs. although illumina reads mainly contain miscalled bases with increasing frequency toward read ends, smrt generates primarily insertions (10) and deletions (5) in a random pattern . because smrt uses circular templates, accuracy can be increased for shorter sequences (51 kb). by sequencing each position multiple times, a circular consensus sequencing with an accuracy of 99 can be generated. however, this approach substantially decreases read length , erasing one of the major advantages of smrt sequencing. in addition to this technical approach, two different methods for in silico correction of smrt reads have been developed. (i) the hierarchical genome-assembly process (hgap) uses shorter smrt reads contained within longer reads to generate pre-assemblies and to calculate consensus sequences . (ii) pacbiotoca and lsc use illumina srs in a hybrid approach to whom correspondence should be addressed. to correct smrt reads. these approaches result in higher quality lrs. nevertheless, both approaches also have limitations. in the case of hgap, a coverage of 80 to 100 has been recommended . this might not be an issue when targeting smaller, e.g. bacterial, genomes, but for larger, especially eukaryotic, genomes this would imply sequencing several hundred or thousands smrt cells. obviously, this increases the costs of the genome project substantially. for a hybrid correction, as implemented by pacbiotoca and lsc, millions of sr to lr alignments have to be computed and processed. as these alignments have to tolerate error rates up to 20, this can be a formidable computational challenge. these computational demands are usually met using massive parallelization on high-performance computers (hpcs) or computer grids, providing dozens or hundreds of computer nodes. accordingly, lsc and pacbiotoca are designed to run on hpcs. pacbiotoca also works on computer clusters providing sun grid engine (sge) as a queuing system. still, both require a large amount of memory during the correction process of large genomes. this can become a considerable limitation, as computing nodes in a grid are typically equipped only with limited memory. a second point that can determine the success of a genome project is the throughput of the correction method, i.e. the percentage of the bases in corrected reads that can be used in the assembly. the lower the throughput, the more material needs to be sequenced in the first place to achieve sufficient coverage for assembly after correction. as an example, pacbiotoca lost 440 when correcting sequences from escherichia coli , which is a considerable loss of data. ultimately, we expect that with the increasing use of smrt sequencing, more genomes and transcriptomes with unusual features will be sequenced. thus, a correction pipeline developed today should be flexible enough to be easily adopted to these new use cases. although lsc was developed mainly for the correction of (human) transcriptomic data, pacbiotoca can handle different datasets, but is part of the celera wgs pipeline and requires the installation of the complete package. distributed computing is restricted to the now commercial sge. these limitations motivated us to implement a new smrt sequencing correction pipeline. the goal was high flexibility such that the pipeline can (i) run on standard computers as well as computer grids and (ii) can be easily adapted to different use cases. obviously, these objectives should not be at the cost of accuracy, length of corrected reads or throughput.today, the major application of the pacbio rs ii is the sequencing of bacterial genomes. therefore, we used an e.coli dataset as first test case . mapping of the corrected reads onto the e.coli reference genome revealed accuracies of 99.98 for proovread, followed by 99.93 (pacbiotoca) and 88.79 (lsc). lsc correction resulted in a n50 of 4158 bp, which was higher than in the uncorrected reads, as lsc returns only lrs with sr mapping and omitted other lrs. therefore, the starting n50 for lsc was in fact 4450 bp. proovread-corrected reads had an n50 of 2147 bp and pacbiotoca of 1639 bp. in matters of throughput, proovread recovered 81 of the input, whereas lsc and pacbiotoca returned 76 and 73, respectively. the required run time was shortest for pacbiotoca (2.6 h), while proovread took 7 longer, and lsc was most time-consuming (25 of pacbiotoca). the memory consumption was in the same range for lsc and proovread (18.4 and 19.6 gb), whereas pacbiotoca required more than twice as much (44 gb). this differs from the originally published 2.1 gb , as here pacbiotoca ran multi-threaded. with their outstanding length, smrt sequencing reads will be of increasing use for the sequencing of eukaryotic genomes. to evaluate the performance of proovread on this type of data, we used the comparably small genome of a.thaliana as a second test case . for this dataset, correction with lsc exceeded the maximum available memory (192 gb) and therefore did not finish. proovread and pacbiotoca achieved a high correction accuracy of 98.48 and 97.44, respectively. starting with an n50 of 8109 bp in the raw reads, proovread returned an n50 of 2714 bp and pacbiotoca of 1528 bp. the throughput was 79 for proovread and 46 for pacbiotoca. the latter required a run time of 481 h with proovread 8.7 longer. concerning the memory consumption, proovread required 43.6 gb and pacbiotoca 27.5 gb. to analyze the influence of the size and the complexity of the sequenced genome on the correction result, we used the human genome as third test case . for run time reasons, we corrected this set on a cluster infrastructure. unfortunately, the available grid provided only slurm as queuing system, whereas pacbiotoca is implemented only for sge. furthermore, and typically for larger grids, each node offers only four cpu cores and 8 gb memory. both do not fulfill the hardware requirements of lsc and a stand-alone pacbiotoca correction. therefore, only the performance of proovread was analyzed for this lr dataset. here, we examined two different sr datasets: first, a 50 coverage sr sample and second, a digitally normalized version of these data. the normalization process required 37 gb memory and took 49 h. the correction accuracy for the nonnormalized and the normalized sr set was 98.9 and 99.1, with an n50 of 2219 and 1327 bp, respectively. the throughputin addition to genomics studies, smrt sequencing is frequently used for transcriptome analyses. with its lrs, chances are high that a whole transcript is sequenced in a single read, thereby avoiding the assembly process. to evaluate the applicability of proovread for this type of data, we used human brain transcriptomic data as a final test case . this dataset was previously used to assess the performance of lsc , although here we used a more recent version of the program (0.3.1). proovread was run with two different parameter settings: (i) the default settings and (ii) a modified set tailoredmade for transcriptomic data (see section 2). indeed, the correction accuracy was highest with the default and modified proovread settings (99.87 and 99.88). pacbiotoca and lsc performed worse (98.67 and 95.43). starting with an n50 of 972 bp, lsc returned the highest n50 (908 bp) followed by default proovread (821 bp), modified proovread (730 bp) and pacbiotoca (193 bp). modified proovread resulted in the highest throughput (69.5 of input data), followed by lsc (59.6), proovread with default settings (47.5) and pacbiotoca (29). the shortest run time was required by pacbiotoca (49.1 h). lsc took 1.35 longer, while standard proovread ran 1.71 longer. modified proovread required the longest run time (5.75). in contrast, proovread needed 510 gb memory (8.1 and 9.9 gb for default and modified settings), while lsc needed almost twice as much (18.4 gb) and pacbiotoca needed most memory (45.4 gb).proovread is designed to correct erroneous lrs sequenced by smrt with high-quality sr data as generated by illumina sequencers. our benchmarks revealed that proovread is well suited for the correction of microbial and eukaryotic as well as genomic and transcriptomic data. arguably, the most prominent characteristic of a correction pipeline is the accuracy of the corrected reads. with accuracies of 499 in almost all test cases, proovread and pacbiotoca clearly outperformed lsc. the latter achieved only 590 for genomic and 95 for transcriptomic reads, as lsc omits trimming of corrected reads, which results in reads that are only partially corrected. obviously, the overall accuracy of these reads will be low. when comparing accuracies, it has to be taken into account that all corrected reads that could not be mapped onto the reference or were identified as chimeric were classified as ambiguous and not considered. in general, their amount was small. only for the a.thaliana set, it exceeds 6.5 for all programs, as here the reference and the sequenced strain differ (supplementary). still, if these reads were included, the accuracy of all programs would decrease. this effect would be smallest on proovread, as it generated fewer of these ambiguous reads than pacbiotoca and lsc. still, accuracy is only one criterion for the evaluation of an lr correction pipeline. a key advantage of smrt sequencing is the length of the resulting reads. therefore, the correction process shortens the reads as few as possible. when comparing the n50 of the corrected reads, lsc resulted in the longest reads. this does not come as a surprise taking into account that lsc does not trim corrected reads (see above). still, we think that trimming is an important feature, as it not only avoids the inclusion of poorly corrected regions in the following analyses but also enables the correction of chimeric reads. therefore, both, proovread and pacbiotoca, trim corrected reads. still the n50 of proovread-corrected reads was in all test cases considerably higher than for pacbiotoca. to give the user maximum flexibility, proovread also reports the untrimmed corrected reads. furthermore, the trimming step is independent of the correction, thereby enabling the user to easily optimize the trimming parameters for the given dataset. finally, during the correction process, regions and reads can be rejected, decreasing the throughput of the pipeline. this factor might be neglectable if initially a high coverage of the sequenced material was provided. in the case of larger, e.g. eukaryotic, genomes, this is usually too expensive, resulting in lower coverage. here, a decrease in throughput could have a strong impact on the further steps of the projects, especially the assembly. in the worst case, costly re-sequencing might be needed. thus, minimizing the rejection of reads is an important objective of a correction pipeline. proovread corrected in almost all cases !80 of the input data, while lsc and pacbiotoca generated dramatically smaller throughput. in the case of the homo sapiens transcriptome and the a.thaliana genome pacbiotoca omitted )50 of the lrs. thus, 41.6 raw reads would be needed for the same amount of corrected reads. taken together, proovread is able to correct larger percentages with higher accuracy, leading to longer reads than previous tools. apart from read length and accuracy, in practice particularly the horizontal coverage of the reference is of high importance. smrt sequencing has little to no bias toward nucleotide composition . in contrast, especially with early chemistry, illumina had various issues with bias-free sequencing of gc-rich molecules . as a consequence, sr data for hybrid correction has to be chosen with care. any biases in the srs are to some extent transferred onto the lrs, thus, impairing correction quality and potentially eliminating specific smrt sequencing advantages. a general issue of the consensus correction method is the potential loss of single nucleotide variants. the haplotype of the corrected lrs is determined by the sr dataset. nevertheless,describe the recovery of the original variants using the uncorrected lrs given a sufficient coverage. when designing proovread it was one goal to achieve a maximum of independence from the existing computer infrastructure. therefore, the correction can be performed in a single process, which requires a maximum of memory, or can be split into smaller chunks, each needing less memory. in addition, the amount of srs is unlimited, as proovread does not require an indexing of the sr data. this allows the parallel execution of independent proovread processes on computers with limited memory and cpu configuration. indeed, the memory footprint of a single proovread process is smaller in comparison to the other programs. if the available memory is not sufficient, the package size can be lowered to fit the available memory. admittedly, this increases the run time of proovread. still, we think that this can be overcome by clusters of comparably cheap machines. here, each machine corrects only a fraction of the reads. contrarily, lsc requires large memory and does not benefit from running in a grid infrastructure. pacbiotoca allows the parallel execution in a grid system, but is restricted to the sge queuing system. moreover, it requires up to 48 gb memory on a local computer, which requires large server systems. thus, proovread does not dictate the architecture of the computer system. this idea of flexibility is also encoded in the correction process itself. this starts with the mapping of the reads. currently, we support shrimp2 as default mapper and bowtie2 as experimental option. as we can not foresee the development of new mappers, proovread can also work directly on user-provided mapping files. next, the proovread iterative correction is highly configurable. a user can modify the number of iterations and thereby decrease the overall run time by performing fewer iterations. obviously, this might affect the correction accuracy and therefore has to be considered carefully. finally, the correction and the filtering steps are independent from each other. without filtering, the maximum of the input read length can be preserved. in contrast with a strict filtering, only highly accurate positions will be returned. furthermore, this separation enables repeating the filtering step without rerunning the time-consuming correction. the idea to correct errors in lrs from smrt sequencing with illumina srs has been implemented before by lsc and pacbiotoca. but, both have strong demands on hardware as well as software infrastructure. if either can not be met, correction can not be performed. this will make following analyses like an assembly challenging if possible at all. contrarily, proovread can be easily adapted to the available resources. it handles the correction of an e.coli genome on a laptop as well as of a human genome on a hpc cluster. this in-built flexibility also enables the adaptation to and optimization for different datasets as generated in genomic and transcriptomic projects. finally, correction with proovread delivered more, more accurate and longer reads. thus, proovread is well suited for the correction of lrs irrespective of the target of sequencing and regardless of the computational resources.  
