graphics processing unit implementations of relative expression analysis algorithms enable dramatic computational speedup the top-scoring pair (tsp) and top-scoring triplet (tst) algorithms are powerful methods for classification from expression data, but analysis of all combinations across thousands of human transcriptome samples is computationally intensive, and has not yet been achieved for tst. implementation of these algorithms for the graphics processing unit results in dramatic speedup of two orders of magnitude, greatly increasing the searchable combinations and accelerating the pace of discovery.rapidly improving technologies have made large amounts of gene expression data available for analysis and classification. the ncbi gene expression omnibus (geo) database contains hundreds of thousands of samples representing a wide range of diseased and healthy tissue for which gene expression has been measured. as next-generation rna sequencing technology becomes ubiquitous, geo and other databases will further increase in size and accuracy of information. researchers have sought to use this expression data to identify distinct gene relationships that classify disease states, allowing for accurate diagnosis of diseases given the expression patterns of a few genes. such methods include support vector machines , decision trees and neural networks . the top-scoring pair (tsp) algorithm and its variants have demonstrated similar accuracies to these methods while remaining relatively simple, resistant to overfitting and consistent across data normalization methods . classifiers identified using these algorithms have been used to predict cancer outcomes and model disease progression . despite these advantages, the tsp and especially the top-scoring triplet (tst) algorithm are computationally intensive and therefore slow. because increasing the accuracy of predictions may require analysis of thousands of samples across tens of thousands of transcripts, it is important to improve the speed of to whom correspondence should be addressed. these algorithms. faster algorithms also enable more comparisons to be made, including automated data mining across many sample sets. while primarily known for gaming applications, the graphics processing unit (gpu) is increasingly applied to computationally challenging scientific problems including molecular dynamics simulations , quantum chemistry , and medical imaging . the gpu is designed for massive parallelism involving thousands of simultaneous executing threads, but requires different coding than that which runs on cpus. algorithms well suited for such parallelism can run tens to hundreds of times faster on gpus than a corresponding cpu implementation. gpus are also now widely available to researchers via national center for supercomputing applications (ncsa) clusters and businesses such as amazon web services ec2 cloud computing. here, we present implementations of the tsp algorithm and the tst algorithm on the gpu. as the tst algorithm is particularly computationally demanding, this gpu implementation enables the first comprehensive search of all possible tsts for classification.the algorithms described above have been implemented in c with cuda extensions and compiled into mex files for use within the matlab computing environment; a standalone application is also available. two existing cpu implementations of the tsp algorithm, tspair and rxa were used for speed comparisons with the gpu code. one existing cpu implementation of the tst algorithm (rxa) was used for speed comparisons. both cpu software packages are implemented in the c programming language as packages for the statistical environment r. all cpu speed tests were performed on an intel xeon x5680 3.33 ghz 6-core processor. the gpu tests were performed on a nvidia tesla t10 and an nvidia geforce gtx480. source code and executables for all gpu implementations are available at http://www.igb.illinois. edu/labs/price/downloads/.shows the results of the running time comparisons. the results for rxa and tspair are plotted separately due to the fact that rxa implements the wilcoxon rank sum test to filter for only the most differentially expressed genes, whereas tspair does not. as the number of genes increases, the speedup on the gpu improves, therefore further speedup might be expected for larger tests. all gpu timings include the device data transfer as well as computation times. the tesla t10 executes the algorithms 77x to 255x faster than the corresponding cpu implementations, and the gtx480 executes the algorithms 228x to 455x faster. processing 10 000 genes on the cpu version of the tst algorithm would take over 6.5 months, while the gpu implementation of the tst algorithm on this dataset was completed in 9 h. using the gpu enables the discovery of accurate marker gene pairs and triplets thatare infeasible with the cpu implementations, while also allowing more stringent error estimation methods than are currently possible due to previous computational time constraints.  
