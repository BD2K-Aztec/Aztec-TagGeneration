genome analysis ruffus: a lightweight python library for computational pipelines computational pipelines are common place in scientific research. however, most of the resources for constructing pipelines are heavyweight systems with graphical user interfaces. ruffus is a library for the creation of computational pipelines. its lightweight and unobtrusive design recommends it for use even for the most trivial of analyses. at the same time, it is powerful enough to have been used for complex workflows involving more than 50 interdependent stages. availability and implementation: ruffus is written in python. source code, a short tutorial, examples and a comprehensive user manual are freely available atlarge-scale computational analyses are now integral to many biological studies. workflow management systems have accordingly proliferated, including taverna , biopipe and pegasys . these are highly featured, designed for automated and robust operation even by nonexpert users, managed using graphics user interfaces and specified in xml or proprietary domain-specific languages. however, these workflow systems can be too cumbersome for explorative and empirical studies with novel datasets. the appropriate scientific approach cannot always be determined a priori. on the other hand, the advantages of computational pipelines over ad hoc scripts, even for simple tasks, are all more apparent with increasingly complex datasets and the use of parallel processing. the standard unix build (software construction) system make has been widely used to keep track of dependencies in scientific pipelines. makefilesspecify the files names of data for the input and output of each stage of a pipeline as well as the rules (commands) for generating each type of output from its corresponding input. the entire pipeline is represented by a statically inferred dependency (directed acyclic) graph for the succession of data files. the same rule can be applied to multiple data files at the same time, for example, to run blast searches on many sequence files in parallel. automatic data tracking in pipelines allows only the out-of-date parts of the analyses to be rescheduled and recalculated, with minimal redundancy. this is necessary when parts of the pipeline are subject to rapid cycles of development or where the underlying data is being generated continually. unfortunately, make is not a good fit for the design of scientific pipelines. make specifications are written in an obscure and limited language. (this is mitigated in make replacements such as scons or ruby rake). pipeline dependencies are not specified directly but inferred by the make program by linking together rules in the right order. this means that scientific pipelines can be difficult to develop, understand and debug. so-called embarrassingly parallel problems are particularly common in bioinformatics; examples include blast and hmmer searches of sequence databases, or region-by-region genome annotation. the number of parallel operations needed varies at runtime with the presented data: a larger sequence file might be split up into smaller fragments to be processed in parallel. however, make systems and their kin require all operations in a pipeline to be determined when the build script is analysed, because of the reliance on static, pre-calculated dependency graphs. they cannot easily deal with, for example, the splitting up of large problems into smaller fragments to be computed in parallel, if the number of such fragments depends on the input data and runtime conditions, and can only be determined in the middle of running the pipeline. in this article, we present a new lightweight library for computational pipelines that explicitly supports these programming tasks. some of its main advantages of ruffus are:@bullet ruffus configuration files are normal python scripts. python is a modern dynamically typed programming language known for its elegance, simplicity, and that is already widely used in the bioinformatics community . standard python tools can be used to develop and debug ruffus scripts.@bullet like makefiles, ruffus scripts can run only the out-of-date parts of the pipeline, using parallel processing if appropriate.@bullet pipeline dependencies are specified explicitly for maximal clarity and ease of documentation. @bullet a flowchart of the pipeline can be printed out in a variety of graphical formats. detailed trace output is available, documenting which operations are up-to-date or will be run .ruffus is a python library for programming computational pipelines with lightweight, unobtrusive syntax. it provides all the power of traditional build systems such as automatic data tracking, but in a modern package suited to the needs of bioinformatics. sample flowcharts of ruffus pipelines, a tutorial, a detailed manual as well as source code are freely available from http://www.ruffus.org.uk and http://code.google.com/p/ruffus.  
