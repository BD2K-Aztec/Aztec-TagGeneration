bioimage informatics imglib2â€”generic image processing in java imglib2 is an open-source java library for n-dimensional data representation and manipulation with focus on image processing. it aims at minimizing code duplication by cleanly separating pixel-algebra, data access and data representation in memory. algorithms can be implemented for classes of pixel types and generic access patterns by which they become independent of the specific dimen-sionality, pixel type and data representation. imglib2 illustrates that an elegant high-level programming interface can be achieved without sacrificing performance. it provides efficient implementations of common data types, storage layouts and algorithms. it is the data model underlying imagej2, the knime image processing toolbox and an increasing number of fiji-plugins. availability: imglib2 is licensed under bsd. documentation and source code are available at http://imglib2.net and in a public repository at https://github.com/imagej/imglib.many algorithmic concepts from computer vision and image processing are applicable to the analysis of biological image data. however, re-using existing code is often difficult because it is implemented for a specific data type, limited image size or fixed number of dimensions, e.g. small 2d grayscale images. biological imaging techniques generate images of varying dimensionality and a multitude of sample types (e.g. wavelength, frequency spectra, diffusion tensors) with varying precision. improvements in imaging speed and resolution result in gigantic datasets that require well-designed strategies for data handling (e.g. tiled or compressed storage, streaming access). writing code that is re-usable across many combinations of dimensionality, sample type and storage strategy is challenging and requires an appropriate abstraction layer. we present imglib2, an open-source image processing framework that achieves code re-usability through a generic interface architecture that abstracts from dimensionality, sample type and storage strategy. it is highly extensible, providing developers with great flexibility in adding new sample types and image representations that will seamlessly work with existing algorithms, and vice versa. imglib2 shares basic concepts with the c frameworks itk and vigra (kothekothe, 2000) for n-dimensional, generic image processing. it is the first framework that introduces generic programming to the java image processing community . we chose java for its simplicity and wide acceptance among biological researchers due to the popular image processing toolbox imagej .imglib2 is an open-source image processing framework that increases code re-usability by promoting generic implementations. it provides an abstraction layer that focuses on flexible and efficient image storage and access. the core paradigm is a clean separation of pixel algebra (how sample values are manipulated), data access (how sample coordinates are traversed) and data representation (how the samples are stored, laid out in memory or paged to disc). imglib2 relies on virtual access to both sample values and coordinates, facilitating parallelizability and extensibility. imglib2 aims to connect software projects through an interface design that is easily adapted to existing data structures. imglib2 is the first image processing library available for java that combines a flexible high-level programming interface with optimal performance. it enables developers of bioimage analysis software to focus on the design of complex algorithms instead of data management. conversely, software engineers can develop efficient infrastructure without interfering with algorithm design. this becomes particularly interesting in the emerging field of bioimage informatics that is coping with the enormous amount of n-dimensional image data generated by recent developments in microscopy. consequently, imglib2 is already being used by several high-profile projects of the java bioimaging community . it is easily integrated into other projects providing an ideal basis for sharing interoperable, generic algorithms.  
