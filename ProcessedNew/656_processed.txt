genome analysis bamtools: a c++ api and toolkit for analyzing and managing bam files motivation: analysis of genomic sequencing data requires efficient, easy-to-use access to alignment results and flexible data management tools (e.g. filtering, merging, sorting, etc.). however, the enormous amount of data produced by current sequencing technologies is typically stored in compressed, binary formats that are not easily handled by the text-based parsers commonly used in bioinformatics research. results: we introduce a software suite for programmers and end users that facilitates research analysis and data management using bam files. bamtools provides both the first c++ api publicly available for bam file support as well as a command-line toolkit. availability: bamtools was written in c++, and is supported on linux, mac osx and ms windows. source code and documentation are freely available at http://github.org/pezmaster31/bamtools.the 1000 genomes project created the sequence alignment/map (sam) format and its sister format, the binary alignment/map (bam), to provide a generic and modular approach to the analysis of genomic sequencing data . such formats are necessary to provide a standardized vehicle for reporting alignment results and analyzing them using a wide variety of tools. the binary, compressed nature of bam has made it the format of choice in many large-scale sequencing projectswhere the text-based sam does not scale to the massive amounts of data produced. however, storing the data in binary, compressed form comes at a cost as well. casual programmers and end-users can no longer use the text-based parsing techniques to which they are typically accustomed. apis and tools that can accomplish similar tasks, while managing bams more complex data storage behind the scenes, are vital to genomics researchers. bamtools is a flexible, efficient and easy-to-use suite designed to serve just these sorts of operations. we tested the raw read-through time on a bam file containing the reads from 56 ceu samples from the 1000 genomes low-coverage pilot project , resulting in 116-fold coverage of chromosome 20. it took on average 5:32 min to read every alignment sequentially from this file, on a single cpu (corresponding to 4.5 h for a whole-genome file, at the same coverage). resource usage is ultimately application dependent; however, the basic process of reading alignments from bam files is i/o bound rather than cpu bound.  
