compressive genomics for protein databases motivation: the exponential growth of protein sequence databases has increasingly made the fundamental question of searching for homologs a computational bottleneck. the amount of unique data, however, is not growing nearly as fast; we can exploit this fact to greatly accelerate homology search. acceleration of programs in the popular psi/delta-blast family of tools will not only speed-up hom-ology search directly but also the huge collection of other current programs that primarily interact with large protein databases via precisely these tools. results: we introduce a suite of homology search tools, powered by compressively accelerated protein blast (cablastp), which are significantly faster than and comparably accurate with all known state-of-the-art tools, including hhblits, delta-blast and psi-blast. further, our tools are implemented in a manner that allows direct substitution into existing analysis pipelines. the key idea is that we introduce a local similarity-based compression scheme that allows us to operate directly on the compressed data. importantly, cablastps runtime scales almost linearly in the amount of unique data, as opposed to current blastp variants, which scale linearly in the size of the full protein database being searched. our compressive algorithms will speed-up many tasks, such as protein structure prediction and orthology mapping, which rely heavily on homology search.identification of homologous sequences is of fundamental importance in computational biology. sequence search tools, such as blastp and psi-blast , have played important roles in various tasks arising in protein science, including secondary and tertiary structure prediction , functional annotation and orthology mapping . the runtimes of the most popular methods [e.g. blastp, psi-blast and deltablast (scale nearly linearly in the size of protein databases. with the exponential increase in protein sequence data, this is becoming a major bottleneck to computation. thus, it is imperative to design algorithms that scale sublinearly in the size of the databases. the recent exponential growth in genomic sequence data , which is outpacing growth of computing power , has spurred an interest in compressive genomics and the need to compress sequence data for efficient storage . protein sequence data, although on a slower growth curve than genomic data, nonetheless increase at an exponential rate , doubling roughly every 2 years, for now just keeping pace with moores law for computational power. a key observation from compressive genomics is that much of the new data are actually similar to existing data, which was used to accelerate nucleotide sequence search without loss of accuracy . despite its name, even ncbis non-redundant protein sequence database (nr) contains a great deal of redundancy; it is non-redundant only at the level of entire sequences; highly similar sequences are represented separately. thus, even nr lends itself to a compression scheme that takes advantage of this redundancy. although nr has already eliminated exact duplicates at the global sequence level, we take advantage of local sequence similarity to achieve compression. we introduce a compressive algorithm, cablastp, along with an implementation that allows direct computation on the compressed data. cablastp boosts the runtime performance of any search tool in the protein blast family, while maintaining accuracy. specifically, we show that compressive versions of blastp, psi-blast and delta-blast scale nearly linearly in the size of the unique data, as well as sub-linearly in the size of the complete protein database. notably, any program that relies on protein blast can take advantage of our compressive software with virtually no effort. thus, we expect cablastp to be of great use to the community.we have introduced a compression-accelerated search algorithm that boosts the speed while maintaining accuracy of tools in the protein blast family. our approach scales sub-linearly with the size of the database being searched, and linearly with the size of the unique data. we expect that as the nr database continues to grow exponentially, the benefits of this compressive approach will become more pronounced. in contrast to genomic sequence compression , which appears on its surface to be similar, subtle differences make protein sequence compression a different problem. the primary difference is that proteins have a larger alphabet, and thus, random sequences will have less similarity. this results in different parameters and compression ratios, but it also increases the computational complexity of compression, as the number of k-mers is exponential in the alphabet size. another difference is that protein sequences are discrete; therefore, our compression algorithm must handle sequence beginnings and ends. we have demonstrated that our compressive approach provides significant gains as the redundancy of the data increases, but we also see future challenges. as the ncbis nr database continues to grow in the coming years, the size of each cluster of similar subsequences will also grow. we expect that for compression to remain tractable, further algorithmic and software-engineering improvements, for example, a hierarchical compression scheme, will be required. many sophisticated homology search and protein structure prediction tools require blast searches of one type or another to incorporate sequence profiles or structural information to improve performance . for example, when we introduced the betawrappro method , which requires a blastp search at query time, ncbis nr database contained 54.5 million sequences; today it contains 422 million sequences; thus, search requires approximately five times the running time. although the original motivation for developing our compressive approach was the growing running time of blastp searches on nr, the results described insuggest that our approach may also be useful for orthology mapping across organisms, performing an all-against-all search between a query proteome and a set of well-studied proteomes , which takes an inordinate amount of time. our tools can be readily incorporated into these applications to accelerate their search, pre-processing or library construction. our software can be easily interfaced with any programs that use protein blast search tools. another important advantage of our methods is that the compressed database can be incrementally maintained to keep current with new proteomic sequence data.  
