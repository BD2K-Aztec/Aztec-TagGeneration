genome analysis creating reusable tools from scripts: the galaxy tool factory motivation: galaxy is a software application supporting high-throughput biology analyses and work flows, available as a free on-line service or as source code for local deployment. new tools can be written to extend galaxy, and these can be shared using public galaxy tool shed (gts) repositories, but converting even simple scripts into tools requires effort from a skilled developer. results: the tool factory is a novel galaxy tool that automates the generation of all code needed to execute user-supplied scripts, and wraps them into new galaxy tools for upload to a gts, ready for review and installation through the galaxy administrative interface. availability and implementation: the galaxy administrative interface supports automated installation from the main gts. source code and support are available at the project website, https://bitbucket.org/ fubar/galaxytoolfactory. the tool factory is implemented as an install-able galaxygalaxy is a web accessible application for high-throughput genomics, exposing popular third-party data sources and standard bioinformatics analysis packages in an integrated and persistent framework, designed to support biologist users performing reproducible analyses. there is a free public site (http://usegalaxy.org), and all galaxy source code can be deployed locally (http://getgalaxy.org), where new tools can be created and installed to suit specific local requirements. rapid change seems to be one of the few constants in modern high-throughput biology so reporting and data transformation requirements also change rapidly. in groups where an established analysis framework such as galaxy is used, software developers can create and expose new tools for local users, but even relatively simple tools require at least a few hours of skilled developer effort to implement, install and test. when a new simple transformation or report is needed, users will route around perceived damage, taking their data out, performing the required transformation with some quickly written code and then importing the transformed data back in to galaxy for downstream analysis. undesirable consequences are inevitable in terms of core scientific values such as reliability, repeatability and validity, when manual steps are performed outside an automated managed infrastructure. generated. gts repositories can be searched, selected, reviewed and installed through the galaxy administrative interface. gtfgenerated tools perform identically to the same script wrapped by a skilled galaxy developer. a developer can unpack the source code for a simple gtf-generated tool and edit it to add user-controlled parameters and new history outputs if needed, but alternative galaxy tool interface generation methods described later may be preferred for complex requirements.complex computational pipelines for high-throughput data are often implemented as a sequence of relatively simple discrete steps, which typically read data from an input file, perform a transformation or calculation and then write an output file that serves as an input for a subsequent step. gtf-generated tools implement this simple model, ideal for creating simple components for work flows. the gtf currently supports popular scripting languages and makes it easy to test and debug them, and then generate complete simple work flow-compatible tools. only a local administrative user can actually execute the gtf because it performs no parsing or sand boxing of the supplied script, and therefore exposes insecure unrestricted scripting. it is recommended that users run it on private development clones, uploading tools to a gts when they are ready for installation to production galaxy sites. installed gtf-generated tools run with normal galaxy security, but administrators are urged to review all source code before installation. the gtf creates complete galaxy tools from scripts that perform simple transformation and reporting tasks. if multiple files and images are written, the html option automatically generates a complete web page of navigable links for the user. the bioconductor rgalaxy package can process r functions (http://www.bioconductor.org/packages/devel/bioc/html/ rgalaxy.html) into galaxy tool code. the cli-mate (http:// climate.lumc.nl/generate) resource generates galaxy tool interfaces. both require additional coding effort, and neither creates functional tests or integrates directly with galaxy and the gts. however, they can create complex tool interfaces with multiple user controllable parameters that are outside gtf scope. well-designed frameworks may help reduce risk and improve the repeatability, validity and efficiency of high-throughput biology analysis infrastructure for biologist users. minimizing effort, and in turn, minimizing opportunities for users to introduce errors into analysis steps may help improve reliability. standardized procedures can help maintain validity. eliminating redundant coding effort will likely improve efficiency.the gtf executes user-supplied scripts in popular bioinformatics scripting languages and optionally turns them into reusable, shareable and inter-operable galaxy tools, ready for work flows. gtf-generated tools run securely, but the gtf itself is not recommended for installation in production galaxy instances. generated tools can be uploaded and published through a gts, which in turn supports automated tool installation into galaxy servers. once installed, when executed by a local user, gtf-generated tools pass a user-selected input file to the script provided at tool generation and return the output as a new history item. supporting sharing and reuse of simple communitydeveloped tools will help minimize the risks and costs of ad hoc local data transformation in high-throughput biology analyses. funding: the galaxy team is supported by nih grants hg005133, hg005542, hg004909 and hg006620, as well as nsf grant dbi 0543285. additional funding is provided, in part, under a grant with the pennsylvania department of health using tobacco settlement funds. the department specifically disclaims responsibility for any analyses, interpretations or conclusions. conflict of interest: none declared.box 1. example r script for a simple tool factory tool write the transpose of a tabular input file ourargs commandargs(t) inf ourargsoutf ourargsinp read.table(inf, headf, row.namesnull, sept) outp t(inp) write.table(outp,outf, quotef, sept, row.namesf, col.namesf)  
