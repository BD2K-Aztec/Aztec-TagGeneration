meta-idba: a de novo assembler for metagenomic data motivation: next-generation sequencing techniques allow us to generate reads from a microbial environment in order to analyze the microbial community. however, assembling of a set of mixed reads from different species to form contigs is a bottleneck of metagenomic research. although there are many assemblers for assembling reads from a single genome, there are no assemblers for assembling reads in metagenomic data without reference genome sequences. moreover, the performances of these assemblers on metagenomic data are far from satisfactory, because of the existence of common regions in the genomes of subspecies and species, which make the assembly problem much more complicated. results: we introduce the meta-idba algorithm for assembling reads in metagenomic data, which contain multiple genomes from different species. there are two core steps in meta-idba. it first tries to partition the de bruijn graph into isolated components of different species based on an important observation. then, for each component, it captures the slight variants of the genomes of subspecies from the same species by multiple alignments and represents the genome of one species, using a consensus sequence. comparison of the performances of meta-idba and existing assemblers, such as velvet and abyss for different metagenomic datasets shows that meta-idba can reconstruct longer contigs with similar accuracy. availability: meta-idba toolkit is available at our websitemetagenomic research studies the genetic information in an entire microbial community. it plays an important role in microbiology because over 99 of microbes can neither be isolated nor cultured . recent advances in next-generation sequencing technology allow us to generate reads from genomes of multiple species in these samples in an effective manner. the set of reads obtained is very complicated which makes the assembling of genomes of species that exist in the sample extremely difficult. there are two main approaches to study reads from these samples. one is to group (called binning) the reads according to some biological markers or structural features . then, reads belonging to different species are studied. the other is to deduce the potential biological functions of the whole community by studying the reads directly using gene prediction or function annotation . since the reads from the next-generation sequencing technologies are still relatively short, it to whom correspondence should be addressed. is more effective if longer contigs can be constructed from the reads before conducting the study even though we are not able to assemble the genome of every species. high quality assembly results of the contigs are desirable in both approaches. if the assembled contigs are short and erroneous, the accuracy of binning, gene prediction, function annotation, etc. will be impaired. thus, assemblers that can generate longer and more accurate contigs will definitely facilitate the study of metagenomic data. if similar reference genomes exist in the database, one can assemble reads by first aligning them to the reference genomes . however, as over 90 of microbes in metagenomic data are unknown , de novo assemblers are needed to assemble reads without any reference genomes. to our knowledge, currently there are no de novo metagenome-specific assemblers available. assemblers such as euler , velvet , abyss , soapdenovo are for single genome, but are used in metagenomic study . all these assemblers are based on the de bruijn graph , which is a common approach to perform de novo assembly. in the de bruijn graph, a vertex represents a length-k substring called k-mer and an edge connecting vertices u and v represents u and v appearing consecutively in a read. all these assemblers generate the de bruijn graph from reads, and then apply some error removal methods , e.g. removing tips and merging bubbles, to modify the graph based on its topological structure. simple paths in the graph are outputted as contigs and paired-end information might be applied to further merge the contigs. these existing assemblers do not work well for metagenomic datasets, except for some very small datasets containing specific species . two main properties of a reasonably complicated metagenomic dataset make these assemblers fail to produce long contigs: (i) polymorphisms among similar subspecies and common genomic regions shared by different species; and (ii) uneven abundance ratios of species in a sample. the polymorphism of similar subspecies, especially subspecies of the same species, consists of very similar sequences with few variations (single nucleotide variation, short insertion or deletion or genomic rearrangements, etc.) and each variation introduces a branch in the de bruijn graph (we call these branches sp-branches). another source of branches is due to the common or similar genomic regions, say housekeeping genes, shared by different species (we call these branches cr-branches). these two types of branches, which do not exist when assembling single genomes, would make the de bruijn graph for metagenomic data very complicated. since existing assemblers output simple paths in the graph as contigs, these extra branches caused by common regions in different species prevent the construction of long contigs.some assemblers resolve branches by merging similar sequences as bubbles into one sequence. a bubble is defined as several similar paths with the same start vertex and the same end vertex in the de bruijn graph. bubble merging helps to merge similar regions and reduce complexity of the de bruijn graph. an important assumption used by assemblers to remove bubbles for single genome assembly is that the bubble is caused by a few single nucleotide polymorphisms (snp) or errors in reads; thus, the simple paths inside a bubble are very similar, except for a few nucleotides. however, the bubbles found in the graph for metagenomic dataset do not follow this assumption. different bubbles mix together to make the start vertex and the end vertex very difficult to be identified. some of these bubbles are formed by a mixture of spand cr-branches.shows an example of this phenomenon in which every simple path is contracted into a vertex for visualization. all branches at a vertex in this graph normally lead to some other vertex in the same component, but it is uncertain that these are bubbles for merging. if we look closer at these bubbles, even if the bubble is formed only by sp-branches (because of variations in subspecies), the multiple paths inside the bubble may differ a lot (maybe with larger insertion/deletion). existing approaches for merging bubbles for single genome assembly do not work for this case; thus, they will fail to resolve these bubbles and are unable to construct long contigs. even if all bubbles can be identified, it is not easy to merge them together to form a consensus. to resolve branches in a de bruijn graph, existing assemblers also try to use paired-end information to help find paths with paired-end reads support so as to eliminate those branches caused by erroneous reads and to construct longer contigs. in the case of multiple subspecies, each path will have a lot of support since they are not caused by erroneous reads, but variations in subspecies and the assemblers are not able to resolve these branches easily. moreover, since the contigs are short, applying paired-end information becomes difficult, because usually paired-end information can only be applied to connect long contigs. to show the complexity of a de bruijn graph for metagenomic dataset,compares graphs and assembly results of simulated reads sampled from a single genome (escherichia coli 536) and from five different e.coli subspecies genomes.shows that the five e.coli subspecies contain about twice the number of k-mers as that of a single e.coli subspecies, but 150 times more branches as that of single subspecies. this makes the graph complicated and genome assembly difficult. in fact, the performance of all the assemblers is poor when there are a lot of subspecies. the n50 values of velvet , abyss and soapdenovo drop from 178 914, 32 440 and 125 404 bp for single genome data to 875, 849 and 713 bp, respectively, for metagenomic data with five subspecies. uneven abundance ratios in metagenomic data introduce another problem in assembly, because existing assemblers cannot distinguish erroroneous reads sampled from genomes with high abundance ratios and reads from genomessimulated length-75 reads are sampled randomly from references with 1 error and 250 insert distance with a depth of 30. the value of k is set to 50 for all assemblers.  
