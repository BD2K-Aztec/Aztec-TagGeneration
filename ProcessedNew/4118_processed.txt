sa-ssr: a suffix array-based algorithm for exhaustive and efficient ssr discovery in large genetic sequences simple sequence repeats (ssrs) are used to address a variety of research questions in a variety of fields (e.g. population genetics, phylogenetics, forensics, etc.), due to their high mut-ability within and between species. here, we present an innovative algorithm, sa-ssr, based on suffix and longest common prefix arrays for efficiently detecting ssrs in large sets of sequences. existing ssr detection applications are hampered by one or more limitations (i.e. speed, accuracy, ease-of-use, etc.). our algorithm addresses these challenges while being the most comprehensive and correct ssr detection software available. sa-ssr is 100 accurate and detected 1000 more ssrs than the second best algorithm, while offering greater control to the user than any existing software. availability and implementation: sa-ssr is freely available atsimple sequence repeats (ssrs), microsatellites, or short tandem repeats (strs), are tandem repeats of short (often 25 bp) nucleotide strings . there are generally 10100 such repeats at each ssr locus resulting in a dna segment that is amenable to rapid molecular characterization. given their repetitive nature, the lengths of ssr loci tend to increase or decrease due to polymerase slippage during dna replication . as a consequence, ssr loci have high mutation rates and frequently generate multiple polymorphic alleles. ssr loci are common in both nuclear and organellar genomes, and when flanked by unique sequence, pcr primers can be readily designed to amplify simple sequence length polymorphisms. ssrs have proven highly useful for a variety of molecular genetic, population genetic and phylogenetic applications because it is simple to genotype them using pcr, and because they are highly polymorphic.while ssrs have been extensively characterized in many model species, the expense and effort traditionally required to develop ssrs has limited their use in non-model species. fortunately, nextgeneration sequencing has enabled researchers to quickly produce large quantities of genomic and/or transcriptomic data for nearly any species. while a high quality genome is still difficult to assemble, there is usually adequate sequence information to identify thousands of unique ssr loci with minimal sequencing. thus, researchers working in non-model systems need user friendly and customizable bioinformatics algorithms to identify ssr loci. a complete, accurate, characterization of ssrs in non-model systems increases the likelihood researchers are able to identify ssrs where flanking genotyping primers can be designed. ssr differences can be used to differentiate between related species or provide insights into specific phenotypes/adaptations. finally, since the majority of researchers do not have formal computational training, a v c the author 2016. published by oxford university press.our algorithm requires at most 9n bytes of memory, where n is the length of the entire query sequence. for each nucleotide in the sequence, we generously assume one byte in the original sequence (using 8-bit characters), four bytes in the suffix array (using 32-bit integers) and four bytes in the longest common prefix array (using 32-bit integers). the time complexity for building a suffix array and its longest common prefix array is o(n). our algorithm then requires 3 (n 1) constant time computations to find ssrs, thus keeping the total time and space complexities at o(n). we evaluated the performance of our algorithm compared to seven existing applications (see supplementaryfor a list of algorithms) on the arabidopsis thaliana (chromosome 4), caenorhabditis elegans, drosophila melanogaster, escherichia coli and zaire ebolavirus genomes (genbank accessions: nc_003075.7, gca_001483305.1, gca_001014345.1, gca_001432175.2 and nc_002549.1, respectively), comprised of 13 121 sequences totaling 248 846 830 nucleotides. sequences ranged in length from 516 to 18 590 000 nucleotides with a median size of 4 662 (supplementary figures s2s6 show a distribution of sequence lengths). dozens of applications exist for ssr detection. we selected algorithms for comparison that: (i) were capable of processing the arabidopsis thaliana chromosome (the longest of the sequences), (ii) had a non-interactive, linux, command-line interface, (iii) were freely available for immediate download and (iv) had 10 or more citations per year or were published in the last three years. several additional algorithms met our requirements, but used antiquated shared libraries, or had compile/run-time errors. all comparisons were run on a 6-core intel haswell westmere (2.67 ghz) processor with 24 gb of memory (1066 mhz ddr3). sa-ssr, like other algorithms, calls any detected sequence repeat an ssr. reported numbers and accuracy reflect the assumption that all sequence repeats are ssrs. sa-ssr maximized the number of ssrs identified, while maintaining low memory requirements and runtime, and providing higher flexibility to the user to control desired output (results summarized inwith more detailed results in supplementary table s2). we counted the total number of ssrs identified by sa-ssr and each of the algorithms with period sizes one to seven and minimum total length of 16 nucleotides (period sizes and lengths likely to be of most interest in common applications). next, we determined the accuracy of each of the tested algorithms, including sa-ssr, by writing a script to scan the entire sequence to verify whether or not a reported ssr was present. most of the tested algorithms, including sa-ssr, were 100 accurate. however, compared to other algorithms, sa-ssr, found the highest number of correct (38 088 ssrs) and unique ssrs (on average 18 000 ssrs more than the other algorithms). mreps, ssrpipeline and trf only missed 1340, 3047 and 7423 correct ssrs detected by sa-ssr, respectively. however, trf was only 23 accurate. results of algorithm comparisons and software features are summarized in supplementary tables s2s31. finally, we designed sa-ssr with intuitive features and formatting requirements. like other ssr detection applications, sa-ssr takes fasta files as input. however, some of the other applications, including some of those with high performance, are difficult to use. for example, mreps displays an error message if any characters are not a, c, g, t or n, or if too many ns are present. even if a user has the skills to remove all the characters that are not a, c, g or t, this makes the output positions of ssrs incorrect because those characters are not accounted for. additionally, mreps output is in a relatively un-structured text document that is not trivial to parse. as another example, ssr-pipeline can only look for one period size at a time, requiring the user to manually re-run the software repeatedly for each period size of interest. finally, sa-ssr provides greater flexibility to the user. for example, the user can choose whether to perform an exhaustive or faster (still nearly complete) search, change output filters to report (or not) overlapping ssrs, or report only user-specified ssrs. sa-ssr is freely available at: http://github.com/ridgelab/sa-ssr.  
