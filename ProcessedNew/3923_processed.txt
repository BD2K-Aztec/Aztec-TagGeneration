genetics and population analysis real-world comparison of cpu and gpu implementations of snprank: a network analysis tool for gwas motivation: bioinformatics researchers have a variety of programming languages and architectures at their disposal, and recent advances in graphics processing unit (gpu) computing have added a promising new option. however, many performance comparisons inflate the actual advantages of gpu technology. in this study, we carry out a realistic performance evaluation of snprank, a network centrality algorithm that ranks single nucleotide polymorhisms (snps) based on their importance in the context of a phenotype-specific interaction network. our goal is to identify the best computational engine for the snprank web application and to provide a variety of well-tested implementations of snprank for bioinformaticists to integrate into their research. results: using snp data from the wellcome trust case control consortium genome-wide association study of bipolar disorder, we compare multiple snprank implementations, including python, matlab and java as well as cpu versus gpu implementations. when compared with nave, single-threaded cpu implementations, the gpu yields a large improvement in the execution time. however, with comparable effort, multi-threaded cpu implementations negate the apparent advantage of gpu implementations. availability: the snprank code is open source and available atpreviously, we developed a new eigenvector centrality algorithm called snprank , which ranks interacting single nucleotide polymorphisms (snps) in a genetic association interaction network (gain) . each snp is ranked according to its overall contribution to the phenotype, including its main effect and second-and higher-order genegene interactions. gain and snprank provide a data-driven, networkbased approach to identify important hub snps through conditional dependence with other snps and the phenotype, which allows for phenotype-specific pathway discovery that is not possible with more myopic approaches. in the development process of snprank, we attempted to systematically address some of the typical implementation issues facing bioinformaticists plus emerging issues introduced by gpu. gpus have demonstrated performance benefits in some to whom correspondence should be addressed. bioinformatics applications ; however, many gpu comparisons do not reflect conditions in realworld applications. thus, with the availability of gpus and the numerical improvements made to matlab and python by thirdparty developers, we find it important to address implementation comparisons of snprank in a manner that accounts for all aspects of the computation. moreover, with the emergence of deep sequencing technologies, optimization of many bioinformatics algorithms will need to be revisited.by default, the third-party numerical libraries numpy and jblas employ a single-threaded approach, which allows a nave cpu implementation to be easily outperformed by gpu. however, recompiling the cpu libraries with multi-threading support narrowed the advantage significantly. the performance comparisons are not based upon raw matrix calculations, but rather on a real-world application of our algorithm from beginning to end. matlab provides an integrated environment for numerical calculations and includes an efficient computation engine. in contrast, python and java require some additional effort to take advantage of external numeric libraries, particularly for multithreaded implementations. unlike matlab, both java and python are freely available and open source. thus, cost and skill level are determining factors for the appropriate language used to implement algorithms and develop bioinformatics tools. a related benefit of their larger developer communities is that both python and java have more third-party tools and libraries, compared with matlab. moreover, while jacket facilitates the conversion of matlab code to gpu, this implementation actually showed slightly slower overall execution time. presently, gpu computations involve a large overhead of copying data to and from the device, which cannot be neglected in real-world applications. these bandwidth constraints of the pcie interface contribute to a significant proportion of the total execution time . thus, resolving the latency issues in future designs will be necessary to increase the utility of gpus for bioinformatics applications. we limited our network analysis to the top 10 000 snps because it is unlikely that snps beyond this will contribute significantly to the genetic risk. an advantage of our comparison of snprank implementations is that performance was tested in the context of a real dataset. in a future publication, we will discuss the biological implications of our network analysis of the bd gwas.  
