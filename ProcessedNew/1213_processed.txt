csam: compressed sam format motivation: next generation sequencing machines produce vast amounts of genomic data. for the data to be useful, it is essential that it can be stored and manipulated efficiently. this work responds to the combined challenge of compressing genomic data, while providing fast access to regions of interest, without necessitating decompression of whole files. results: we describe csam (compressed sam format), a compression approach offering lossless and lossy compression for sam files. the structures and techniques proposed are suitable for representing sam files, as well as supporting fast access to the compressed information. they generate more compact lossless representations than bam, which is currently the preferred lossless compressed sam-equivalent format; and are self-contained, that is, they do not depend on any external resources to compress or decompress sam files.current next-generation sequencing technologies produce millions of small dna fragments (reads) at once , generating file sizes in the gigabyte range at a cost of just a few hundred dollars. each generated read is a continuous fragment of data extracted from the processing of a single genome, stored as a string of bases. in this paper we consider reads composed of four fundamental bases a, c, g, and t , with the inclusion of the letter n , which is used to symbolize bases that could take any value. a number of meta-data fields are associated with each read to form alignment read information. some of these fields add considerably to the space requirement; in particular, the quality field (qual), which measures how accurate the bases of the read are with respect to a reference genome, typically requires (uncompressed) the same space as the sequence of bases . several standard formats for storing alignment reads have been adopted, each aiming to make it easy to parse and then manipulate them using text-processing tools. the most common representations are the fasta, fastq , and sam, or sequence alignment map approaches. of these, sam is dominant, partly because it includes more information about each alignment than the other formats. sam has become one of the most used formats for storing alignment data, in no small part because it is the output generated by many aligners 1. for example, the compressed version of the sam format, bam (section 2), is currently the preferred structure of the 1000 genome project 2. in this work, different approaches that compress sam files are explored. most of the techniques described focus on methods that compress reads and/or their associated qual fields, which, as we will describe, are the fields that dominate the space requirement of compressed sam files. another reason for focusing on these two fields is that most of the remaining fields can be derived from these two. we also consider the problem of random access into the stored data, providing data structures that allow the extraction of segments of the information stored without the need to decompress the whole compressed file. finally we introduce a new compressed sam format, csam, which uses less space for storing the data than the bam format (taking similar or lower times to compress, decompress and access the data), and also supporting queries over multiple alignments without requiring whole files to be decompressed. the csam format compresses the data without using uncompressed data gzip 9), when separated into different components and compressed on a per-component basis using gzip 9 (maximum compression). all percentages are relative to the total space of the respective file, with the components that use less than 10 of the total space grouped under the label of smaller components . in this case, the gzip version compressed the file components to a total of approximately 18 of the original size. as can be seen, the components seq, qual, and other dominate the storage in both the original and compressed representation. any external extra information and is currently the only lossless sam compressor, beside bam itself, that offers a full compression technique supporting random access to the data. furthermore, csam is the first sam lossy compression approach allowing random access to the stored data. we also explore how the proposed compression techniques affect the performance of possible uses of the compressed data.  
