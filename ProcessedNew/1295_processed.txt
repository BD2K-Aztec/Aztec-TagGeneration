gene expression decoy-free protein-level false discovery rate estimation motivation: statistical validation of protein identifications is an important issue in shotgun proteomics. the false discovery rate (fdr) is a powerful statistical tool for evaluating the protein identification result. several research efforts have been made for fdr estimation at the protein level. however, there are still certain drawbacks in the existing fdr estimation methods based on the target-decoy strategy. results: in this article, we propose a decoy-free protein-level fdr estimation method. under the null hypothesis that each candidate protein matches an identified peptide totally at random, we assign statistical significance to protein identifications in terms of the permutation p-value and use these p-values to calculate the fdr. our method consists of three key steps: (i) generating random bipartite graphs with the same structure; (ii) calculating the protein scores on these random graphs; and (iii) calculating the permutation p value and final fdr. as it is time-consuming or prohibitive to execute the protein inference algorithms for thousands of times in step ii, we first train a linear regression model using the original bipartite graph and identification scores provided by the target inference algorithm. then we use the learned regression model as a substitute of original protein inference method to predict protein scores on shuffled graphs. we test our method on six public available datasets. the results show that our method is comparable with those state-of-the-art algorithms in terms of estimation accuracy. availability: the source code of our algorithm is available at: https:// sourceforge.net/projects/plfdr/shotgun proteomics is a strategy that is capable of identifying complex protein mixtures by combining high-performance liquid chromatography and mass spectrometry (ms). in shotgun proteomics, the protein identification procedure has two main steps: peptide identification and protein inference . in peptide identification, we search the experimental ms/ ms spectra against a protein sequence database to obtain a set of peptide-spectrum matches. in protein inference, we report a set of proteins by assembling peptide identification results . basically, there are two major computational issues in protein identification that have to be solved. on one hand, we need to develop effective and fast identification/inference algorithms at both the peptide level and the protein level. on the other hand, controlling the quality of identified peptides and inferred proteins is as important as developing identification algorithms. inferred proteins are more biologically relevant than identified peptides in a proteomics experiment. therefore, it is vital to control the quality of identification results at the protein level. however, the accurate assessment of statistical significance of protein identifications remains an open question . to date, several research efforts have been made to estimate the protein-level error rate in terms of false discovery rate (fdr). the mainstream approach for fdr estimation is the target-decoy strategy, which searches a target-decoy concatenated database so that the number of false positive protein identifications can be estimated from the number of decoy proteins. for instance, the mayu method is a typical representative in this category. by adapting the target-decoy strategy to the protein inference task, the mayu method first assumes that protein identifications containing false positive peptide-spectrum matches are uniformly distributed over the target database. then, the number of false positive protein identifications is hypergeometrically distributed. as a result, the expected number of false positive protein identifications can be calculated as the probability weighted average. finally, the protein identification fdr is computed as the ratio of the expected number of false positive protein identifications and the total amount of protein identifications mapping to the target database. however, this valuable approach has certain drawbacks . first, searching both the target and the decoy database will certainly double the running time in the protein identification process. second, the fdr estimation result may be unstable, as we usually use only one decoy database with the same size of target database. finally, the protein fdr value is calculated according to the distribution of decoy peptides across different proteins, making it possible to propagate errors at the peptide level to the protein level in a non-trivial manner. in this article, we propose a new method for estimating the fdr at the protein level without searching the decoy database. our method uses random permutation to assess the statistical significance of each protein in terms of p-value and then calculates the final fdr. first, the input for the protein inference problem can be modeled as a bipartite graph: the left is a set of identified peptides and the right is the set of candidate to whom correspondence should be addressed. the author 2013. published by oxford university press. all rights reserved. for permissions, please e-mail: journals.permissions@oup.com proteins with at least one matched peptide . from this bipartite graph, a protein inference algorithm calculates the probability or score for each protein. the null hypothesis in our method is that each candidate protein matches an identified peptide totally at random. under this null hypothesis, we first create multiple random bipartite graphs with the same set of peptides and proteins. each random bipartite graph has the same structure as the original one, i.e. each protein (peptide) is connected to the same number of peptides (proteins). then, we run the same protein inference algorithm on these random bipartite graphs, and check if the score of each protein is significantly different on the real graph than on the randomized graphs. that is, we calculate the permutation p-value of one protein as the percentage of random graphs that produce a larger score than its original score. finally, we sort the proteins according to their p-values and calculate the fdr at different thresholds with permutation p-values as input using the method in storey and tibshirani (2003). our method has three key steps: (i) generating random bipartite graphs with the same structure; (ii) calculating the protein scores on these random graphs; and (iii) calculating the permutation p-value and fdr. among these steps, it is relatively easy to perform the first step and the third step. however, it is timeconsuming or prohibitive to execute some protein inference algorithms for thousands of times to fulfill step ii. to address this issue, we first train a linear regression model using the original bipartite graph and identification scores given by the target inference algorithm. then, we use the learned regression model as a substitute of original protein inference method to predict protein scores on shuffled graphs. experimental results on several real proteomics datasets show that our method is effective in fdr calculation. overall, the salient features of the work described in this article can be summarized as follows:it can calculate the fdr without using a decoy database. it can be applied to evaluate the protein identification results from any algorithm that outputs protein probabilities/ scores. the rest of this article is organized as follows. in section 2, we describe our method in detail, section 3 presents the experimental results and section 4 concludes the article.for the first three datasets with reference sets, we apply our method and mayu to estimate the fdr and check the difference between the estimated fdr and the ground-truth fdr. we set f0:05, 0:1,. .. , 0:95, 1g as the threshold, respectively. for each threshold, the smaller the difference, the better the performance. as shown in, for the first two datasets, our method is comparable with mayu, while our method can provide a more accurate fdr estimation on the yeast dataset when the p-value is larger than 0.2. we can also see that both our method and mayu have huge deviations from the real protein fdrs for the first two synthetic datasets probably because 18 mixtures and sigma49 do not have characteristics of those complex proteomics datasets generated from real samples. thus, the experimental result on the more complex yeast dataset indicates that both methods can perform relatively well on real data, and the advantage of our method begins to be visible. for the other three datasets, we compare our method with mayu and the naive target-decoy method. for mayu, we set f0:05, 0:1, :::, 0:95, 1g as the threshold, respectively. when using the naive target-decoy method, fdr is calculated by doubling the ratio of the number of decoy proteins and the total number of protein identifications in the reported proteins. as shown in, the performance of our method is comparable with the naive target-decoy method and mayu. one important parameter in our method is the number of random graphs. we test the influence of different numbers of random graphs by comparing absolute difference between the estimated fdr and the true fdr at each threshold. we choose f1000, 3000, 5000, 7000, 10000g as the parameter value, respectively. as shown in, we can see that the absolute differences are almost the same when using different numbers of random graphs. this means that our method is insensitive to the number of random graphs when the value is 41000. we also list the real 0 and the estimated 0 on six datasets in. for the three datasets without reference sets, we calculate the real 0 by doubling the ratio of the number of decoy proteins in the datasets and the total number of protein identifications in the datasets. as shown in, the estimated 0 is far from its true value on 18 mixtures and sigma49. this explains why the absolute fdr differences on these two datasets are large. now we test the running efficiency of our method. the running time of our method and mayu on six datasets is provided in. all the experiments are tested on the dell studio xps 8100 workstation with 2.80 ghz cpu and 8 g main memory. it shows that our method is efficient in practice and faster than mayu.in this article, we propose a novel protein-level fdr estimation method. we assume that each candidate protein matches an identified peptide totally at random. then, we use random permutation for assessing the statistical significance of each protein in terms of p-value and calculate the final fdr. the main advantage is that our method can calculate fdr without searching a decoy database. experimental results on six proteomics datasets demonstrate the superiority of our method. in the future work, we will extend our method to validate the inference results of the algorithms that do not report protein probabilities or scores. we plan to train a logistic regression model, which can assign a corresponding probability to. performance on 18 mixtures, sigma49 and yeast when proteinlp (upper) and proteinprophet (lower) are used as the target protein inference algorithm, respectively. the difference with the benchmark jthe estimated fdr true fdrj. for each threshold, the smaller the difference, the better the performance. for 18 mixtures, 18 standard proteins and 15 contaminants are marked as the ground-truth. for sigma49, all accessions in the final list of correct proteins provided by the abrf2007 bioinformatics committee are used as the ground-truth. the influence of different numbers of the random graphs on three datasets with reference setsnote: mayu can only report the fdr value at one threshold in each run, whereas our method can estimate a series of fdr values at all the thresholds. the execution time listed here for mayu is the average running time over different thresholds. the number of random graphs in our method is fixed to be 10 000.note: 0 1 and 0 2 are estimated when proteinlp and proteinprophet are used as the target protein inference algorithm, respectively. each reported protein. meanwhile, as 0 can affect the fdr estimation results significantly, we will find more accurate 0 estimation method in the future.  
