sequence analysis yaha: fast and flexible long-read alignment with optimal breakpoint detection motivation: with improved short-read assembly algorithms and the recent development of long-read sequencers, split mapping will soon be the preferred method for structural variant (sv) detection. yet, current alignment tools are not well suited for this. results: we present yaha, a fast and flexible hash-based aligner. yaha is as fast and accurate as bwa-sw at finding the single best alignment per query and is dramatically faster and more sensitive than both ssaha2 and megablast at finding all possible alignments. unlike other aligners that report all, or one, alignment per query, or that use simple heuristics to select alignments, yaha uses a directed acyclic graph to find the optimal set of alignments that cover a query using a biologically relevant breakpoint penalty. yaha can also report multiple mappings per defined segment of the query. we show that yaha detects more breakpoints in less time than bwa-sw across all sv classes, and especially excels at complex svs comprising multiple breakpoints. availability: yaha is currently supported on 64-bit linux systems. binaries and sample data are freely available for download fromstructural variation (sv) is a major source of diversity in germline and cancer genomes, but is difficult to map relative to other forms of variation. since 2008, most sequence-based studies of sv have used paired-end mapping (pem), which relies upon clustering of discordant paired-end reads that map to either side of an sv breakpoint. now, with the rapid improvement of short-read assembly algorithms and the development of thirdgeneration long-read sequencing technologies, split-read or split-contig mapping (we refer to both as srm) will soon be the preferred method. srm is significantly more precise and less error prone than pem. yet, current read mappers are not well designed for aligning breakpoint-containing query sequences. here, we present yaha, a flexible hash-based aligner that is explicitly designed for optimal sv breakpoint detection from long query sequences. to accurately determine sv breakpoints using srm, an aligner must do four things well. first, it must accurately determine the best set of alignments that cover the length of the query; the optimal coverage set (ocs). this is best accomplished by using an algorithm that provides provably optimal results given some objective function. our use of a best-path algorithm on a directed acyclic graph (dag) of alignments does just that. the objective function is specifically tuned to finding sv events by taking into account the length and quality of alignments, the number of alignments in the ocs and the genomic distance between those alignments. second, it must be able to report alignments similar to those in the ocs in order to allow for the use of combinatorial breakpoint detection algorithms that cluster multiple mappings per read . yahas use of an optimal dag algorithm for discovery of the ocs and its ability to find collections of alignments similar to the ocs are completely novel. third, it must be able to generate a large number of viable alignments to feed the above two algorithms. long-read aligners such as bwa-sw and agile severely restrict the number of alignments under consideration early in query processing. while this improves speed, it reduces the likelihood of finding the ocs and precludes finding alignments similar to them. yaha can produce the required large number of alignments. optionally, the user can choose to output all of them. other aligners such as megablast and ssaha2 can also produce numerous alignments, but have no notion of an ocs. fourth, the aligner must be able to run in a reasonable amount of time. yaha uses a unique combination of heuristics and optimizations to accomplish this. we use a hashing scheme similar to ssaha, but with a considerably faster approach for sorting hash table seeds. we use banded smith waterman (sw) and a modified version of megablasts x-dropoff heuristic for extensions. finally, we calculate the ocs without unduly impacting performance by using a time and space optimized dag algorithm. yaha is the only aligner that does all four of these things well, and therefore is uniquely well suited to sv breakpoint detection. in addition, it is important to score alignments using a metric that is capable of accommodating a wide range of error profiles in order to perform well on queries from diverse sources, including existing and future long-read sequencing technologies. to accomplish this, yaha utilizes affine gap scoring (ags) with user specified cost/reward parameters. in the next section, we explain yahas algorithms in more detail. in section 3, we show the efficacy of these algorithms in three comparison tests. first, we compare yaha with to whom correspondence should be addressed. the author(s) 2012. published by oxford university press. this is an open access article distributed under the terms of the creative commons attribution license (http://creativecommons.org/licenses/by/3.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.megablast and ssaha2 in their capacity to generate a large number of accurate alignments in a reasonable amount of cpu time. second, we compare yaha with bwa-sw in their ability to find the single best alignment over a range of read lengths and error rates. third, we compare yaha with bwa-sw in their ability to accurately identify sv breakpoints over a range of sv event categories.to demonstrate yahas power and flexibility, we measure its performance in three test scenarios. first, we show that yaha is sufficiently sensitive to find large numbers of alignments for queries with repeated (sub)sequences. second, we measure yahas ability to accurately find alignments when using the oqc algorithm for non-chimeric queries. third, we test the oqc and fbs algorithms by measuring yahas ability to detect sv breakpoints in chimeric queries. for each test, we compare yaha to what we believe to be best of breed among commonly used aligners for that specific task. in the sensitivity test, we compare against megablast because it is generally considered one of the most sensitive heuristic aligners for finding a large number of alignments in a practical amount of time. because we use the same indexing strategy as ssaha2, we also include it in this test. bwa-sw only reports primary alignments so cannot be included in the sensitivity comparison. we do not include megablast or ssaha2 in the accuracy or sv detection tests because neither has any strategy for finding an ocs. for these tests, we compare our results to bwa-sw which is the most widely used long-read aligner and the most challenging competitor to yaha for finding primary alignments on either chimeric or non-chimeric queries. in particular, it has already been shown that bwa-sw outperforms ssaha2 and blat on non-chimeric reads . in all these tests, cpu time is an important metric, as any alignment task is easy to perform by brute force if an aligner is given unlimited computer resources. finally, we note that it is difficult to compare results from different aligners because most are highly parameterizable, but do not share all the same parameters. we have made a considerable effort to select the most effective parameters to use for yaha and the other aligners, but we cannot exclude the possibility that untested parameter combinations might produce superior results to those we present here. the data for the accuracy test was generated using wgsim to sample reads from the hg18 reference genome with the lengths and error rates shown in. for the sensitivity test, we focus on the first of these datasets; 100 000 queries of length 100 with a 2 error rate. for the sv detection test, we used our own tool, svsim, to simulate sv events of various types. all tests were run on a server class machine with 4 xeon x7350 processors, 128 gb of shared ram, running centos 5.5. yahas 15/1 index and compressed reference total 15.5 gb, ssahas total 22.3 gb and bwa-sws index and reference total 7.4 gb. however, we believe that index size is a minor concern given modern computing environments.we have shown that yaha is a fast and effective all-purpose aligner that outperforms best-in-class tools for very three different tasks: (i) reporting all mappings per query; (ii) reporting the single best mapping and (iii) identifying split-mappings that define one or more sv breakpoints within a query. yahas main strength as a general alignment tool is that it simply. shown are graphs of the percentage of queries with which each aligner correctly verified an sv breakpoint for various types of sv events versus the amount of cpu time consumed. note the large improvement with the inclusion of yahas secondary alignments in the alu dataset. also note the marked improvement for both bwa-sw and yaha in the cgr dataset with 4 error rate by changing the ags parameters to lower the penalty for indels relative to replacements. still, yaha outperforms bwa-sw with both sets of ags parameters. graphs c and d are shown with the same axes to ease comparison.  
