faster exact maximum parsimony search with xmp motivation: despite trends towards maximum likelihood and bayesian criteria, maximum parsimony (mp) remains an important criterion for evaluating phylogenetic trees. because exact mp search is np-complete, the computational effort needed to find provably optimal trees skyrockets with increasing numbers of taxa, limiting analyses to around 2530 taxa. this is, in part, because currently available programs fail to take advantage of parallelism. results: we present xmp, a new program for finding exact mp trees that comes in both serial and parallel versions. the serial version is faster in nearly all tests than existing software. the parallel version uses a work-stealing algorithm to scale to hundreds of cpus on a distributed-memory multiprocessor with high efficiency. an optimized sse2 inner loop provides additional speedup for pentium 4 and later cpus. availability: c source code and several binary versions are freely available from http://www.massey.ac.nz/wtwhite/xmp. the parallel version requires an mpi implementation, such as the freely available mpich2.of all the criterion-based approaches to evolutionary tree selection, the maximum parsimony (mp) criterion is the most intuitive: select the tree or trees that require the fewest dna substitutions. the early popularity of mp was dampened by the discovery that it can be statistically inconsistent: in the felsenstein zone, increasing amounts of data will lead to increasingly certain recovery of the wrong tree . later, more general conditions leading to inconsistency were described (see schulmeister 2004 for an extensive review). elucidation of the assumptions made by mp led to the understanding that it is consistent when the expected number of changes per site, both across the tree and on any edge, are sufficiently small (, pp. 97102).chart the many variants of ml and their connections to mp. of particular relevance is that mp is a mostparsimonious likelihood estimator for ample datasets in which all taxa can be connected by a tree with maximum edge length 1, which is of practical significance when dealing with population to whom correspondence should be addressed.(intra-species) data where taxa are highly similar . an often-overlooked fact is that the primary criticism levelled at mplack of statistical consistency in the general casecan be rectified through hadamard conjugation . in particular, the kimura three-parameter model and all its submodels can be corrected for directly using hadamard conjugation, while any reversible model at all for which additive distances can be estimated can be dealt with via the distance hadamard transformation . the resulting two-step approach, called corrected parsimony, is statistically consistent. although powerful heuristics for the mp problem have been developed (e.g.), they necessarily come without guarantees. we believe that a freely available, high-performance implementation of exact mp search is conspicuously absent, and would benefit the phylogenetics community. our program, xmp, fills this gap. xmp offers: @bullet a parallelization strategy that is simultaneously highly portable across different computer architectures and highly efficient, scaling to hundreds of processors. this is the main new contribution; @bullet a new lower bounding approach for pruning unpromising regions of the search space, inspired by the minmax squeeze ; @bullet streamlined fitch inner loop calculations using optimizations not published elsewhere; and @bullet a hand-optimized sse2 assembly language implementation of the fitch inner loop for intel pentium 4 and later cpus, offering a potential 4-fold speed improvement.the latter three improvements are also available in a singleprocessor version. we compare this version with a popular exact mp program and find that xmp is much faster in almost every case.xmp was run on the real and synthetic datasets fromas well as three other real datasets ranging in height, width and difficulty level. the leftmost five columns insummarize the datasets. performance was measured in the following environments: a quad-processor 2.66 ghz core2 windows xp pc using mpich2, an 8-processor 3.2 ghz linux pc using mpich2 and the bluefern bluegene/l (bg/l) supercomputer at the university of canterbury, using its proprietary implementation of mpi. bluefern is a distributed-memory supercomputer, affording  
