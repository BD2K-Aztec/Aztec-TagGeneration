sequence analysis featurecounts: an efficient general purpose program for assigning sequence reads to genomic features motivation: next-generation sequencing technologies generate millions of short sequence reads, which are usually aligned to a reference genome. in many applications, the key information required for downstream analysis is the number of reads mapping to each genomic feature, for example to each exon or each gene. the process of counting reads is called read summarization. read summarization is required for a great variety of genomic analyses but has so far received relatively little attention in the literature. results: we present featurecounts, a read summarization program suitable for counting reads generated from either rna or gen-omic dna sequencing experiments. featurecounts implements highly efficient chromosome hashing and feature blocking techniques. it is considerably faster than existing methods (by an order of magnitude for gene-level summarization) and requires far less computer memory. it works with either single or paired-end reads and provides a wide range of options appropriate for different sequencing applications.next-generation (next-gen) sequencing technologies are revolutionizing biology by providing the ability to sequence dna at unprecedented speed . the computational problem of mapping short sequence reads to a reference genome has received enormous attention in the past few years , and the rapid development of fast and reliable aligners is one of the success stories of bioinformatics. raw aligner output, however, is not usually sufficient for biological interpretation. read mapping results have to be summarized in terms of read coverage for genomic features of interest before they can be interpreted biologically. one of the most ubiquitous operations that forms part of many next-gen analysis pipelines is to count the number of reads overlapping predetermined genomic features of interest. depending on the next-gen application, the genomic features might be exons, genes, promotor regions, gene bodies or other genomic intervals. read counts are required for a wide range of count-based statistical methods for differential expression or differential binding analysis . despite its importance in genomic research, the read counting problem has received little specific attention in the literature. the problem may appear superficially simple but in practice has many subtleties. read count programs need to accommodate both dna and rna sequencing as well as single and pairedend reads. the reads or paired-end fragments to be counted may incorporate insertions, deletions or fusions relative to the reference genome, and these complications need to be accounted for when comparing the location of each read or fragment to each possible target genomic feature. when the number of features is large, the computational cost of read counting can be comparable with that of the read alignment step. dna sequence reads arise from a variety of technologies including chip-seq for transcription factor binding sites , chip-seq for histone marks and assays that detect dna methylation . the genomic features of interest for dna reads can usually be specified in terms of simple genomic intervals. for example,counted reads associated with histone marks by gene promotor regions and by whole gene bodies. rosscounted reads overlapping with intervals identified by a peak caller . counting rna-seq reads is somewhat more complex because of the need to accommodate exon splicing. one way is to count reads overlapping each annotated exon, an approach that can be used to test for alternative splicing between experimental conditions . another common approach is to summarize counts at the gene level, by counting all reads that overlap any exon for each gene . gene annotation from refseq or ensembl is often used for this purpose. read counts provide an overall summary of the coverage for the genomic feature of interest. in particular, gene-level counts from rna-seq provide an overall summary of the expression level of the gene but do not distinguish between isoforms when to whom correspondence should be addressed. the author 2013. published by oxford university press. all rights reserved. for permissions, please e-mail: journals.permissions@oup.com multiple transcripts are being expressed from the same gene. reads can generally be assigned to genes with good confidence, but estimating the expression levels of individual isoforms is intrinsically more difficult because different isoforms of the gene typically have a high proportion of genomic overlap. a number of model-based methods have been developed that attempt to deconvolve the expression levels of individual transcripts for each gene from rna-seq data, essentially by leveraging information from reads unambiguously assigned to regions where isoforms differ . this article concentrates on the read count problem, which is generally applicable even when the sequencing depth is not sufficient to make transcript level analysis reliable. many statistical analysis methods have been developed to detect differential expression or differential binding on the basis of read counts . recent comparisons have concluded that the read count methods perform well relative to model-based methods for the purposes of gene-level differential expression or detection of splice variation . only a handful of general purpose read count software tools are currently available. the software packages genomicranges and iranges , developed by the core team of the bioconductor project , include functions for counting reads that overlap genomic features. the countoverlaps function of iranges is designed for counting reads overlapping exons or other simple genomic regions, whereas the summarizeoverlaps function of genomicranges is designed for counting reads at the gene level. another tool is the htseq-count script distributed with the ht-seq python framework for processing rna-seq or dna-seq data . all of these are popular and welltested software tools, but all make extensive use of programming in the interpreted computer languages r or python and none are fully optimized for efficiency and speed. bedtools is a popular tool for finding overlaps between genomic features that can be used to count overlaps between reads and features . it is fully implemented in the compiled language c, making it faster than the aforementioned tools. it is, however, not specifically designed for rna-seq data, so can count reads for exons or interval features only, similar to countoverlaps. this article presents a highly optimized read count program called featurecounts. featurecounts can be used to quantify reads generated from either rna or dna sequencing technologies in terms of any type of genomic feature. it implements chromosome hashing, feature blocking and other strategies to assign reads to features with high efficiency. it supports multithreading, which provides further speed improvements on large data problems. it is available either as a unix command or as a function in the r package rsubread. in either case, all the core functionality is written in the c programming language. the r function is a wrapper for the compiled c code that provides the convenience of the r programming environment without sacrificing any of the efficiency of the c implementation.read summarization is an important step in many next-gen sequencing data analyses. in this study, we developed a new read summarization program called featurecounts and compared it with existing methods in terms of efficiency and accuracy. our results showed a high concordance between alternative methods in summarization accuracy. however, there was a large difference observed in their computational cost. the featurecounts method was found to be an order of magnitude faster on average and far more memory efficient than other methods. the high computational efficiency of featurecounts is due to its ultrafast feature search algorithm and its highly efficient implementation entirely using the c programming language. all results presented in this article were produced using a single thread, but featurescounts also supports multithreaded processing, making it particularly useful for summarizing data generated in large sequencing studies. it is the only existing read count method that supports multithreading. this program provides a wide range of options to allow users to fully control how their read data can be best summarized. users can choose whether they should count the reads that overlap with more than one feature or meta-feature. this choice is often determined by the experiment type. reads overlapping with more than one gene (a meta-feature) should not be counted in a rna-seq experiment because such reads can only originate from one gene, but usually they should be counted in a gdna-seq experiment such as a histone chip-seq experiment. this program also allows users to filter out reads before summarization using a number of metrics such as mapping quality scores, fragment mappability (whether two ends from the same fragment are both successfully mapped or not), fragment length, strandness, chimerism and so on. it can automatically detect either sam or bam format read input and sort reads by name if paired reads are not in consecutive positions in the input. it also allows users to specify whether those reads that were reported with more than one mapping location (multi-mapping) should be counted or not. many of these useful features are not supported by other programs. the featurecounts program has been implemented in both sourceforge subread package and bioconductor rsubread package . the r function provides users with an r interface so that they can access this program from their familiar r environment. it calls the underlying compiled c program to perform all the read summarization operations, and hence has the same speed and memory usage as that of the sourceforge subread package, which is written entirely in c. the implementation of featurecounts in r enables complete pipelines to be established for analyzing next-gen sequencing data using bioconductor software programs. for example, functions included in bioconductor packages rsubread, limma and edger can be used to perform complete rna-seq and histone chip-seq analyses, starting from read mapping, to read summarization and finally to differential expression analyses or differential histone modification analyses. owing to its high efficiency and accuracy, we believe the featurecounts program will be a useful tool in the bioinformatics toolbox for analyzing next-gen sequencing data.  
