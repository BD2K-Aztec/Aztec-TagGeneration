pannzer: high-throughput functional annotation of uncharacterized proteins in an error-prone environment motivation: the last decade has seen a remarkable growth in protein databases. this growth comes at a price: a growing number of submitted protein sequences lack functional annotation. approximately 32 of sequences submitted to the most comprehensive protein database uniprotkb are labelled as unknown protein or alike. also the functionally annotated parts are reported to contain 3040 of errors. here, we introduce a high-throughput tool for more reliable functional annotation called protein annotation with z-score (pannzer). pannzer predicts gene ontology (go) classes and free text descriptions about protein functionality. pannzer uses weighted k-nearest neighbour methods with statistical testing to maximize the reliability of a functional annotation. results: our results in free text description line prediction show that we outperformed all competing methods with a clear margin. in go prediction we show clear improvement to our older method that performed well in cafa 2011 challenge. availability and implementation: the pannzer program was developed using the python programming language (version 2.6). the stand-alone installation of the pannzer requires mysql database for data storage and the blast (blastall v.2.2.21) tools for the sequence similarity search. the tutorial, evaluation test sets and results are available on the pannzer web site. pannzer is freely available at http://ekhidna.biocenter.helsinki.fi/pannzer.a correctly annotated proteome is the cornerstone of a successful genome research project and therefore accurate and reliable functional annotation tools are needed. however, due to the huge amount of various sequence data and diverse methods used in the functional annotation processes, a large part of these sequences are at risk of being annotated incorrectly . the last decade has seen an explosion in the number of genomes being sequenced, and the near future will increase the number far higher. experimental characterization is not a viable option for). low-throughput methods are time consuming, complex and expensive and therefore restricted only to small subsets of proteins of interest . annotations are also generated by biocurators by interpretation of experiments from literature. the quality of these literature-based annotations relies heavily on the expertise of biocurators . while experimental methods have problems, the computational methods struggle on a whole new level of challenges. the error rate of computationally annotated databases has been increasing rapidly in recent years. a recent study estimates the error level has risen from 5 to 40 within the last decade . in the gene ontology (go) databases the error levels grow even higher: among computationally created go annotations, the error level has been estimated to be as high as 49 and even within manually curated go annotations between 28 and 30 . the increasing error rate in these databases is believed to stem mostly from the propagation of erroneous annotations with usage of poorly performing in silico functional annotation tools . we have designed a high-throughput annotation tool called protein annotation with z-score (pannzer) in order to create more reliable annotations and thereby reduce further error propagation in annotation projects. pannzer uses the whole sequence similarity neighbourhood and weighted statistical testing in the annotation process in an attempt to maximize the evidence for correct annotation. in doing so, pannzer prevents function transfer from incorrectly annotated sequences to an uncharacterized sequence. here, we evaluate pannzer in two separate tasks: in the prediction of free text description lines (de) and in the prediction of go classes. the description line is a free text sentence about the protein function. written by biologists, it contains valuable information in human readable format. therefore, it is surprising how little attention correct de annotation has gotten in recent years. some methods do exists, e.g. genequiz , pedant , autofact and blannotator . we introduce a principled metric for the evaluation of description prediction, which allows numerical comparison of description similarities. in the prediction of free text description line, we show a clear improvement to other existing methods. the go functional annotation has become the standard tool in computationally based bioinformatics analyses. due to this, the majority of method development in functional annotation is nowadays focused on go classes, e.g. gotcha , argot 2 and blast2go . a more comprehensive list of go prediction tools can be found from. our results show an improved performance over alternative scoring methods and we also show improvement to our earlier version of pannzer that was ranked third in critical assessment of protein function annotation algorithms (cafa) 2011 challenge .the evaluation of the pannzer method performance was conducted using description prediction and also prediction of go classes. for the description prediction and the go prediction we used evaluation test sets described in section 2. we did the go evaluation to estimate the performance improvement of our latest version of pannzer against the pannzer version that participated in the cafa 2011 challenge.as the amount of newly submitted sequences grow rapidly in public databases, and the functional annotation is critical step before studying these sequences, we need more reliable methods for in silico functional annotation. the pannzer method outperforms competing methods in functional annotation prediction accuracy and brings novel statistical testings to the analysis. in particular, the k-nearest neighbour clustering with statistical testings bring major advantages over traditionally used nearest neighbour method (e.g. best blast hit). our results in description prediction show that the use of the nearest neighbour does not bring any advantage in functional annotation. it is remarkable how evenly correct and incorrect description hits are distributed over the blast result lists. in the standard blast (using default parameters) against the noself database, the correct hit count does not rise above incorrect count in any index of the result list, including the best hit . it seems that the probability of having correct annotation from the best hit is no different to any other hit in a blast result list. free text description is the most comprehensive way to describe functionality of a protein and is required for every protein sequence that is submitted to a public sequence database. the current release of uniprotkb contains more than 1.5 million unique descriptions about protein functions and go annotations that contain today 40 000 non-obsolete live terms. despite a large fraction of synonymous descriptions, the difference is considerable. go annotation suffers of biased usage of large and general go terms which explains the unexpectedly good performance of the naive go prediction method (figs 4 and 5). according to our results naive method outperforms the best blast hit method clearly. this highlights the fact that closest neighbour-based methods should be avoided. surprisingly description prediction has obtained recently very little attention in the bioinformatics community. this could be because the free text annotation is seen as an ill-defined problem without effective evaluation metrics and difficulties in handling synonyms and homonyms. to alleviate these shortcomings to some extent, we propose dsm as a new standard in description evaluation. since descriptions and gos are used in different contexts, both annotations are needed. de annotations are used by the biologists andthe improvement of the pannzer method compared with version that participated in cafa 2011 challenge are shown. other non-computationally related researchers, whereas go terms are frequently used in computational functional analysis and have become the standard in, e.g. enrichment analysis. pannzer is the only tool to our knowledge that does both types of prediction.functional annotation of uncharacterized proteins in an error-prone environment  
