bioinformatics discovery note systems biology sbml and cellml translation in antimony and jsim motivation: the creation and exchange of biologically relevant models is of great interest to many researchers. when multiple standards are in use, models are more readily used and re-used if there exist robust translators between the various accepted formats. summary: antimony 2.4 and jsim 2.10 provide translation capabilities from their own formats to sbml and cellml. all provided unique challenges , stemming from differences in each formats inherent design, in addition to differences in functionality. availability and implementation: both programs are available under bsd licenses; antimony from http://antimony.sourceforge.net/ and jsim from http://physiome.org/jsim/.biologists who want to write models for their own use tend to use proprietary procedural-based languages such as matlab or c to encode their models. but these models are rarely suitable for exchange or re-use. to more readily disseminate the model itself beyond the biological conclusions reached by running the model, a common model exchange format is used. two popular formats are the systems biology markup language (sbml) and cellml . sbml grew out of the systems biology community, where it was important to encode semantic information in the core structures of the language. as a result, it is particularly well suited to encoding models of processes such as biological reactions. the mathematics may then be derived from these process descriptions as a series of ordinary differential equations (odes) by simulation software when desired. odes may be encoded directly in alternative constructs, but encoding the model using processes preserves more of the semantics. cellml started with a different goalthat of encoding all mathematical models, not just process ones. instead of encoding processes, it encodes all mathematics (such as odes) explicitly. as a result, it is not inherently semantically rich in the same way as sbml, but covers a wider scope of models. sbml and cellml were both designed to be created, read and exchanged by computers and chose the same basic structure (xml) to accomplish this. jsim and antimony , in contrast, were designed to be created and read by humans, and therefore use human-readable infix notation as the fundamental storage unit. jsim is a complete modeling creation and simulation tool, and stores its models in the mathematical modeling language (mml) format. its scope is similar to that of cellml in that it is a way to encode a wide variety of mathematical models. as a whole, it goes beyond the scope of existing cellml simulators in that it can encode models with partial differential equations (pdes) as well as odes with multiple domains (i.e. both time and space). antimonys scope is more focused. it was developed solely as a modeling language, and comes only with a standalone editor (qtantimony), translator (sbtranslate) and a cross-platform programming library (libantimony) to parse antimony models and translate them to sbml (in version 1.0) and cellml (in version 2.1). like sbml, it not only concentrates on modeling processes but also allows you to encode odes directly. cellml and antimony were both designed to be modular from the beginning, and both allow the user to define and use submodels from a single file or spanning multiple files. jsims modularity facilities are currently limited and not in common use. sbml was recently extended to become modular, through the hierarchical model composition package (sbml-comp) (http://sbml.org/documents/specifications/sbml_level_3/ packages/comp) that adds modularity to core sbml. translators have been developed for both jsim and antimony to and from sbml and cellml. these translators allow models created in one tool to be used in a wide variety of software tools that can import sbml and cellml . the issues we had to solve during the development of these tools are inherent to the problem of translating these formats. other programs that include converters to and from sbml and cellml such as copasi , the systems biology workbench (hucka), virtual cell and opencell , as well as direct converters such as cellml2sbml and sbmltoolbox , do and will continue to encounter the same issues detailed here as the formats and the software develop.  
