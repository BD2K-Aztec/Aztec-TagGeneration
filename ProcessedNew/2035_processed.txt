genome analysis genomictools: a computational platform for developing high-throughput analytics in genomics motivation: recent advances in sequencing technology have resulted in the dramatic increase of sequencing data, which, in turn, requires efficient management of computational resources, such as computing time, memory requirements as well as prototyping of computational pipelines. results: we present genomictools, a flexible computational platform, comprising both a command-line set of tools and a c++ api, for the analysis and manipulation of high-throughput sequencing data such as dna-seq, rna-seq, chip-seq and methylc-seq. genomictools implements a variety of mathematical operations between sets of genomic regions thereby enabling the prototyping of computational pipelines that can address a wide spectrum of tasks ranging from pre-processing and quality control to meta-analyses. additionally, the genomictools platform is designed to analyze large datasets of any size by minimizing memory requirements. in practical applications, where comparable, genomictools outperforms existing tools in terms of both time and memory usage. availability: the genomictools platform (version 2.0.0) was implemented in c++. the source code, documentation, user manual, example datasets and scripts are available online atadvances in sequencing technology have led to an impressive increase in the production of experimental data in the form of rnaseq, chip-seq and other types of sequencing data. genomics studies now typically involve the analysis of dozens of sequencing datasets, or equivalently, hundreds of millions of sequenced reads. this amount of data requires an efficient management of computational resources such as time, memory and development time. in an effort to address these issues, the bedtools suite was developed where unix command-line pipelines were used to effectively reduce the genomics analyses into a form of stream computing. bamtools provides an api through which read alignments in bam/sam format can be manipulated sequentially. this computing model clearly makes a more efficient use of memory  
