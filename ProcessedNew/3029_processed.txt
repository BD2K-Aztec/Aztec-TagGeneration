model annotation for synthetic biology: automating model to nucleotide sequence conversion motivation: the need for the automated computational design of genetic circuits is becoming increasingly apparent with the advent of ever more complex and ambitious synthetic biology projects. currently, most circuits are designed through the assembly of models of individual parts such as promoters, ribosome binding sites and coding sequences. these low level models are combined to produce a dynamic model of a larger device that exhibits a desired behaviour. the larger model then acts as a blueprint for physical implementation at the dna level. however, the conversion of models of complex genetic circuits into dna sequences is a non-trivial undertaking due to the complexity of mapping the model parts to their physical manifestation. automating this process is further hampered by the lack of computationally tractable information in most models. results: we describe a method for automatically generating dna sequences from dynamic models implemented in cellml and systems biology markup language (sbml). we also identify the metadata needed to annotate models to facilitate automated conversion, and propose and demonstrate a method for the markup of these models using rdf. our algorithm has been implemented in a software tool called mosec. availability: the software is available from the authors web sitesynthetic biology involves the design and implementation of genetic circuits to enable organisms to perform novel, desirable functions for biotechnology applications. such applications include the production of medically relevant biomolecules , environmental bioremediation and biofuel production . most genetic systems are currently designed manually by a domain expert with a deep understanding of the system to be engineered. however, as the aims of synthetic biologists become to whom correspondence should be addressed. more ambitious, and designs correspondingly more complex, the manual design of systems at a genetic level becomes more challenging. consequently, interest in the computational design of genetic circuits has grown rapidly over the last few years . genetic circuits are usually designed and simulated in silico as abstract models. computational models of genetic systems, such as biobricks , are valuable because they allow rapid simulation of a system and verification of its behaviour under a range of circumstances. in synthetic biology, in silico models of modular components are typically assembled in a bottom-up fashion to produce a larger computational model of the desired system. such models are usually constructed using abstract modelling formalisms such as systems biology markup language (sbml;) and cellml . once a suitable model for a system has been designed, the conceptual model must be transformed into a dna sequence. this sequence encodes the necessary genetic features required for a designed circuit to be implemented in vitro or in vivo. at first glance this transformation appears to be a relatively straightforward task to complete manually: components are selected and their dna sequences are concatenated. appropriate restriction sites can then be added, a cloning vector selected and the entire sequence synthesized or cloned, as appropriate. in practice, the situation is far more complex, and for large models is time consuming and difficult to complete by hand. a typical computational model will contain numerous species or components that do not have a physical representation at the dna sequence level. examples include entities representing proteins, protein and rna degradation, information flow, environmental inputs and chassisrelated factors. in this article, we refer to model components representing biological parts with a dna sequence as dna-based parts. it is not always immediately obvious which entities in the model map directly to the genes and sequence features necessary to encode the system represented by the model. the fact that the mapping between component abstractions and sequence-based features is not necessarily one-to-one adds additional complexity. other factors such as the spacing and ordering of physical features and the genetic elements used to ensure their replication, can also impact on a systems behaviour and must be considered. as models for computationally designed systems increase in size and complexity, automatically deriving the physical dna sequencepage: 974 973979we applied our approach to the derivation of a dna sequence for the subtilin receiver model described in detail by. the subtilin receiver model was built from annotated svps, assembled into a model and then used to generate a dna sequence. the model was based upon that used to design a subtilin receiver device biobrick by the 2008 newcastle university igem team (part no. bba_k104001) . the device encodes a construct which responds to the lantibiotic subtilin by producing green fluorescent protein (gfp). the specification for the virtual parts used in the model was derived from the subtilin sensing and regulatory system page: 977 973979from bacillus subtilis strain atcc 6633, which uses subtilin for quorum sensing. this construct contains a promoter that transcribes an operon containing the cds for spar and spak that encode the response regulator and sensor kinase, respectively, of the subtilin twocomponent system. the spar regulated promoter, pspas, is included downstream of the operon separated by a transcription terminator. upon sensing the subtilin signal peptide, the spak subtilin sensor activates the spar regulatory protein by phosphorylation. the activated spar can then activate the pspas promoter. the subtilin receiver biobrick was modelled in cellml versions 1 and 1.1 and sbml version 2 . we annotated the virtual parts used to build this model according to the approach described above and used the model-to-sequence algorithm to automatically derive a dna sequence specification. the essential steps of the model-tosequence conversion algorithm are illustrated, using this model, in. the annotated svps, the complete model and the output of the model-to-sequence conversion process are available in the supplementary material accompanying this article. the nucleotide sequence produced from this model is currently being biologically validated.many tools have already been developed to aid biologists with the manual design, simulation and construction of synthetic biological systems . these tools are useful when the system under design is limited in size and the user possesses enough knowledge about the system to provide initial insights into the formulation of a preliminary design. however, manual, visually guided assembly of representations of sequencebased parts is unlikely to be scalable for large-scale computational design, especially where the detailed structure of the system to be designed is poorly understood. computational approaches, particularly those based on evolutionary computation (ec), are particularly promising for automating large-scale biological system design. evolutionary algorithms were developed for applications in complex problem domains where the desired behaviour of the system is known, but the details of the system itself may be poorly understood. as such, it can produce novel, non-intuitive circuits . indeed, there is increasing evidence that complex systems constructed manually are less robust than those constructed using an evolutionary approach . in order to have a completely automated circuit design process models must be constructed, their behaviour assessed via simulation, modified if necessary and then converted to a dna sequence specification without the need for human intervention. however, the computational assembly of parts that directly represent the molecular entities that comprise biochemical systems is problematical due toan xml file encoding the model is converted to a graph representation; (b) non-cis interactions between model species or components are removed, together with any entities that lie between these edges; (c) dna-based parts only are retained; (d) the final sequence. the virtual parts used to build this model were annotated according to the approach outlined above, facilitating its automatic conversion into a dna sequence specification. the complexities of mapping dna-based parts to the models that encode them. once a system has been successfully designed and simulated, the next logical step is to test the design by implementing it in the target chassis or organism. the nucleic acid sequences required to encode the system in vivo must be specified and ordered to give the correct genomic context, a process that is guided by information in the model. in other words, the model representing the system must be interpreted to identify the nucleic acid molecules necessary to implement the system in vitro or in vivo. in order to automatically specify the genetic system at a sequence level, two types of information must be present in the model: information specifying the nucleic acid sequences necessary to encode the system at a genetic level; and connectivity information that allows the correct ordering and spacing of sequences of genetic parts to be interpreted to ensure the correct cisbased interactions between these genetic parts. currently, dynamic models generated for systems or synthetic biology in sbml and cellml, are not usually annotated with this information. in this article, we have described an approach to sbml and cellml model annotation that allows the information to automatically specify genetic systems at the nucleotide sequence level to be derived. cellml and sbml have proven pedigrees in systems biology, and many complete models of synthetic systems already exist. it is possible to manually add the annotations necessary for the modelto-sequence conversion process after model composition. however, our annotation system has been designed with a bottom-up model assembly process in mind. by marking up the virtual parts prior to model composition, composite models may be directly converted to nucleotide sequences with no further manual intervention. it is our intention to provide repositories of svps already marked up using the mosec specification as a standard, to support design tools that operate in a bottom up fashion.  
