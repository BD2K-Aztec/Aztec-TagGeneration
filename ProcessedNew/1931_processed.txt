gassst: global alignment short sequence search tool motivation: the rapid development of next-generation sequencing technologies able to produce huge amounts of sequence data is leading to a wide range of new applications. this triggers the need for fast and accurate alignment software. common techniques often restrict indels in the alignment to improve speed, whereas more flexible aligners are too slow for large-scale applications. moreover, many current aligners are becoming inefficient as generated reads grow ever larger. our goal with our new aligner gassst (global alignment short sequence search tool) is thus 2-foldachieving high performance with no restrictions on the number of indels with a design that is still effective on long reads. results: we propose a new efficient filtering step that discards most alignments coming from the seed phase before they are checked by the costly dynamic programming algorithm. we use a carefully designed series of filters of increasing complexity and efficiency to quickly eliminate most candidate alignments in a wide range of configurations. the main filter uses a precomputed table containing the alignment score of short four base words aligned against each other. this table is reused several times by a new algorithm designed to approximate the score of the full dynamic programming algorithm. we compare the performance of gassst against bwa, bfast, ssaha2 and pass. we found that gassst achieves high sensitivity in a wide range of configurations and faster overall execution time than other state-of-the-art aligners. availability: gassst is distributed under the cecill software license at http://www.irisa.fr/symbiose/projects/gassst/ contact:next-generation sequencing (ngs) technologies are now able to produce large quantities of genomic data. they are used for a wide range of applications, including genome resequencing or polymorphism discovery. a very large amount of short sequences are generated by these new technologies. for example, the illuminasolexa system can produce over 50 million 32100 bp reads in a single run. a first step is generally to map these short reads over a reference genome. to enable efficient, fast and accurate mapping, new alignment programs have been recently developed. their main to whom correspondence should be addressed. goals are to globally align short sequences to local regions of complete genomes in a very short time. furthermore, to increase sensitivity, a few alignment errors are permitted. the seed and extend technique is mostly used for this purpose. the underlying idea is that significant alignments include regions having exact matches between two sequences. for example, any 50 bp read alignments with up to three errors contains at least 12 identical consecutive bases. thus, using the seed and extend technique, only sequences sharing common kmers are considered for a possible alignment. detection of common kmers is usually performed through indexes localizing all kmers. recently, several index methods have been investigated and implemented in various bioinformatics search tools. the first method, used by shrimp and maq , creates an index from the reads and scans the genome. the advantage is a rather small memory footprint. the second method makes the opposite choice: it creates an index from the genome, and then aligns each read iteratively. pass , soapv1 , bfast and our new aligner gassst (global alignment short sequence search tool); use this approach. the last method, used in cloudburst, indexes both the genome and the reads. although more memory is needed, the algorithm exhibits better performance due to memory cache locality. another short read alignment technique, used in bowtie , soapv2 and bwa , uses a method called backward search to search an index based on the burrowswheeler transform (bwt;). basically, it allows exact matches to be found before using a backtracking procedure that allows the addition of some errors. although this technique reports extremely fast running times and small memory footprints, some data configurations lead to poor performances. (http://bowtie-bio.sourceforge.net/manual.shtml). moreover, in order to speed-up computations, some methods restrict the type or the number of errors per alignment to a few mismatch and indel errors. in the building alignment process, computing the number of mismatches requires linear time, whereas indel errors require more costly algorithms such as the dynamic programming techniques used in the smithwaterman (smith and) or needlemanwunsch (nw;) algorithms. for instance, maq, eland and bowtie do not allow gaps. embf , soapv1 and soapv2 allow only one continuous gap, while pass, shrimp, bfast and seqmap allow any combination of mismatch and indel errors. gassst, as well, considers any combination of mismatch, insertion or deletion errors. in most applications, when reads are very short, dealing with a restrictedin this article, we introduced an original method to speed-up aligner programs. while the bfast approach is to reduce the number of  
