ParDRe: faster parallel duplicated reads removal tool for sequencing studies Current next generation sequencing technologies often generate duplicated or near-duplicated reads that (depending on the application scenario) do not provide any interesting biological information but can increase memory requirements and computational time of downstream analysis. In this work we present ParDRe, a de novo parallel tool to remove duplicated and near-duplicated reads through the clustering of Single-End or Paired-End sequences from fasta or fastq files. It uses a novel bitwise approach to compare the suffixes of DNA strings and employs hybrid MPI/multithreading to reduce runtime on multicore systems. We show that ParDRe is up to 27.29 times faster than Fulcrum (a representative state-of-the-art tool) on a platform with two 8-core Sandy-Bridge processors. Availability and implementation: Source code in C and MPI running on Linux systems as well as a reference manual are available at https://sourceforge.net/projects/pardre/The progress of Next Generation Sequencing (NGS) technologies has led to large datasets that are used in a wide range of bioinformatics applications. Preprocessing of NGS datasets is often required to either reduce their sizes or improve data quality. One such preprocessing step is the removal of duplicated and near-duplicated reads . There are two approaches to remove these type of reads: mapping-based and de novo strategies. The first approach initially maps the reads to a reference genome and discards those reads that are aligned to the same position . Unfortunately, it requires a complete genome as reference, which is not always available. The de novo approach only needs the NGS input data and has gained attention in recent years. Examples of de novo tools include FastUniq (not able to remove near-duplicated reads), Fulcrum (parallelized for multicore and distributed systems with MapReduce) and G-CNV (parallelized for CUDA-enabled GPUs). In this paper we describe ParDRe a fast de novo tool to remove duplicated and near-duplicated reads with support for both SingleEnd and Paired-End datasets. ParDRe uses a novel bitwise approach to compare DNA strings and exploits the computational power of current multicore CPUs by employing both multithreading and Message Passing Interface (MPI). Mutithreading support is part of all compilers that follow the C 11 standard while there exist many MPI open public compilers.(i) using only threads (one MPI process); and (ii) using the hybrid approach with the best combination of processes and threads. We also include in our table the runtime for G-CNV on an NVIDIA K20 GPU, obtained from . The selected configurations are the same as in the G-CNV reference in order to provide a fair comparison. The results show that ParDRe consistently outperforms Fulcrum. Firstly, our C suffix comparison based on bitwise operations is faster than the Python implementation included in Fulcrum. Additionally, Fulcrum uses MapReduce for parallelization. Thus, it needs intermediate files to distribute the clusters among threads. ParDRe uses an efficient on-demand multithreaded implementation that only requires main memory and avoids the overhead of I/O operations. Moreover, the experimental results also show that launching MPI processes instead of only threads further improves performance. This is due to two reasons. On the one hand, as explained in Section 2, the efficient parallel MPI I/O routines allow us to parallelize the reading and clustering of the input dataset, as well as the writing of the results. On the other hand, the hybrid approach reduces the thread synchronization overhead to know which clusters have not been analyzed yet, but it still exploits all the available cores in the machine thanks to the MPI parallelization.. Furthermore, we can assert that ParDRe executed on both systems is also faster than G-CNV running on specialized hardware (an NVIDIA K20 GPU). Regarding the memory consumption, ParDRe requires less than 7GB in the worst case (for all tests in), while Fulcrum and G-CNV require 1.6 and 17.3 GB, respectively. Conflict of Interest: none declared. 
