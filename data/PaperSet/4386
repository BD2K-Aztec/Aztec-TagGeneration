Sprites: detection of deletions from sequencing data by re-aligning split reads Motivation: Advances of next generation sequencing technologies and availability of short read data enable the detection of structural variations (SVs). Deletions, an important type of SVs, have been suggested in association with genetic diseases. There are three types of deletions: blunt deletions , deletions with microhomologies and deletions with microsinsertions. The last two types are very common in the human genome, but they pose difficulty for the detection. Furthermore, finding deletions from sequencing data remains challenging. It is highly appealing to develop sensitive and accurate methods to detect deletions from sequencing data, especially deletions with microho-mology and deletions with microinsertion. Results: We present a novel method called Sprites (SPlit Read realIgnment To dEtect Structural variants) which finds deletions from sequencing data. It aligns a whole soft-clipping read rather than its clipped part to the target sequence, a segment of the reference which is determined by spanning reads, in order to find the longest prefix or suffix of the read that has a match in the target sequence. This alignment aims to solve the problem of deletions with microhomologies and deletions with microinsertions. Using both simulated and real data we show that Sprites performs better on detecting deletions compared with other current methods in terms of F-score. Availability and implementation: Sprites is open source software and freely available at https:// github.com/zhangzhen/sprites. Contact:Structural variation (SV) was originally defined as insertions, deletions and inversions larger than 1k bp in size , and now has been extended to include much smaller variants (e.g. those 50 bp in length) and more types of variants, such as translocation and tandem duplication. These variants are prevalent in human populations and are associated with human diseases, complex traits and evolution . Thus, finding SVs is an important task. Recent advances in high throughput sequencing make it possible to reveal more variants than ever before. Many efforts have been made to detect variants from high throughput sequencing data. For example, the 1000 Genomes Project V C The Author 2016. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.comConsortium has released SV data of 1092 individuals from 14 populations . Some methods are specially designed for detecting a specific type of SVs: SVSeq for deletion and MindTheGap for insertion. A deletion indicates a DNA segment missing in an individual genome, also known as a donor/sample genome, compared with the reference genome. Eighty percent of genetic disorders in the disease database, Database Chromosomal Imbalance and Phenotype in Humans using Ensembl Resources (DECIPHER), are caused by deletions . Deletions are such an important type of SVs that almost every SV discovery tool has developed a module to find deletions. We focus on the discovery of deletions in this article. Read pairs are the most common form of current sequencing data. DNA libraries are generally constructed by shearing a genome into fragments, cloning and size-selecting the fragments. A library is a collection of fragments with a roughly equal size. The length of a fragment excluding adapters at two ends is commonly referred to as the insert size. The insert size varies from fragment-to-fragment. The exact value of insert size for each fragment cannot be determined but its approximate value can be estimated by sampling. The normal range of insert sizes is specified through the library mean and standard deviation . Two reads of a read pair are generated by sequencing two ends of a fragment. Before calling variants are performed, these read pairs need to be mapped to a reference genome using read mappers such as BWA and Bowtie2 . If two reads of a read pair are successfully mapped, its insert size is then given as the distance between two corresponding locations on the reference genome. An anomalous insert size indicates a value beyond the normal range. The corresponding read pairs are called discordant read pairs. Analyzing discordant read pairs to reveal variants, such as read pair method, is one of the most common approaches. Many tools adopt such approach, such as BreakDancer , PEMer , VariationHunter , and GASV . Although read pair methods can improve the resolution of calling with high-coverage data, they uncover variants by giving only inexact positions of breakpoints. The read depth method is another approach that gives approximate breakpoints. Read depth refers to the number of reads mapped to a particular part of the genome and can indicate how many copies of a region are present, but it cannot indicate where the copies occur . SegSeq , EWT and CNVnator are some examples of algorithms that apply this approach. Assembly and split read methods are two types of approaches that are able to detect variants with base-pair breakpoint resolution. Assembly methods exploit aberrations from the reference genome to identify locations where variants might be, and then assemble reads just for that area . Comparing the assembled contigs to the area on the reference genome can detect variants with exact breakpoints. However, assembly methods have limitations. Although only local assembly is performed, all reads of the library are processed in order to construct the k-mer spectrum that is required for assembly. The step requires a large amount of time and memory to run. It also tends not to deal well with heterozygous variants, which occur on only one of a pair of homologous chromosomes . Split reads refer to those that cover breakpoints of variants whether they are single-end or paired-end. Split read methods, as their name implies, derive variants from these split reads. Read aligners can help identify split reads. Given a pair of reads r i ; r 0 i , if r i is mapped and r 0 i is either unmapped or soft-clipped at the 5 0-or 3 0-end, r 0 i may be a split read. In some cases it may not be a split read due to either sequencing error or mapping error. There are two ways to use split reads to detect variants: via split read mapping and via soft-clipped mapping. Split read mapping focuses on unmapped reads. An unmapped read was first broken up into two parts. Then, these two parts are respectively mapped to the reference sequence, which results in the breakpoint of the corresponding variant being pinpointed. Examples of split read mapping-based methods include Pindel , AGE , SVSeq , PRISM and DELLY . Soft-clipped mapping focuses on reads with the 5 0-or 3 0-end soft-clipped. These reads are also called soft-clipping reads. One breakpoint of the variant is specified by the mapping location where soft-clipping occurs. The other breakpoint is determined by aligning the soft-clipped segment of the read to the reference sequence. ClipCrop , CREST , SVSeq2 and Socrates are representatives of soft-clipped mapped-based methods. Split read methods have a few disadvantages, such as time and memory inefficiency, and both high false positive and false negative rates. Some of them do not perform well on low-coverage data. Three deletion types are observed in the human genome: (1) blunt deletions: nothing special happened at the breakpoints, (2) deletions with microhomologies: two small identical sequences at deletion breakpoints, and (3) deletions with microinsertions: deletion breakpoints having a small untemplated sequence inserted.studied the breakpoints of 315 deletions and found that 70 of breakpoints have 130 bp of microhomology, 33 of breakpoints contain 1369 bp of inserted sequence, and 10 of breakpoints have both simultaneously. Only a few breakpoints ($7) have blunt ends. The presence of microhomology and microinsertion creates problems for re-aligning the clipped part. Microhomology in a soft-clipping read causes the clipped part to be too short for the alignment. The alignment algorithm returns multiple hits for the clipped part. Finding the correct one among these hits is challenging. Microinsertion in the clipped part causes the alignment to fail because inserted sequence cannot match the reference. However, split read mapping can deal with microhomology and microinsertion. Pindel uses the pattern growth approach to report deletions with microinsertions. AGE aligns the 5 0 and 3 0 ends of two given sequences simultaneously and creates a jumping gap to address their presence. Delly follows the AGE approach and makes changes to AGE. Despite the availability of these tools, methods with high accuracy are required for the detection of deletions with microhomologies and microinsertions. In this article, we present a new method called Sprites (SPlit Read re-alIgnment To dEtect Structural variants) for detecting deletions from sequencing data. Sprites can solve the problem that microhomologies and microinsertions cause. It re-aligns the whole read rather than the clipped part to the target sequence, a segment of the reference, in order to find the longest prefix or suffix of the read that has a match in the target sequence. In the case of microhomology, the length of the sequence to be matched is extended to the length of clipped part plus the length of microhomology. The longest mapped prefix or suffix of the read can usually cover microhomology. Thus, the deletion call is easy to determine. In the case of microinsertion, the longest matched prefix or suffix of the read can avoid the impact of microinsertion on the detection. The comparison of the re-alignments of the soft-clipped segment and the whole read is illustrated in. Sprites uses alignments produced by BWA, while it can also use alignments produced by other read aligners that support 5 0-or 3 0-end soft-clipping, like Bowtie2 . Re-alignment is one of most time-consuming tasks in the detection. A target sequence is a segment of the reference. For a soft-clipping read, Sprites relies on its spanning read pairs to determine the size and location of target sequences. Given that most of these target sequences have a length of only hundreds of base pairs, re-aligning soft-clipping reads to them saves a large amount of time. The input file has the size on the order of Gigabytes. Sprites transverses it from start to end only once and only stores information about soft-clipping reads that are useful for deletion detection, which reduces Sprites memory footprint. Besides its great performance on lowcoverage data, Sprites can also be used for the analysis of highcoverage data. We tested it extensively on the simulated data and real sequencing data and compared it with four other detection tools including SVSeq2, LUMPY, Delly and Pindel. The results show that among these tools Sprites is highly sensitive at the relatively low false discovery rates and thus has the greatest F-scores in many cases. The major contributions of this article include: (1) our method can find the longest prefix or suffix of a soft-clipping read that has a match in the target sequence by performing the re-alignment; (2) our method solves the problem of deletions with microhomology and deletions with microinsertion, which are very challenging to be found from the sequencing data; (3) our method limits the alignment length so that time and memory usage are dramatically reduced; (4) a piece of open source software is implemented based on our method and can be freely available.We compared Sprites with the four most commonly used SV detection tools, i.e. Pindel, SVSeq2, Delly and LUMPY . Pindel is the first tool that relies on the concept of splitting reads to detect variants. Besides deletions, it is able to call other types of variants, such as insertions and inversions. SVSeq2 is a tool that specializes in finding deletion calls. Deletions are called by realigning the soft-clipped sequence of reads, which is similar to our tool. It focuses on analyzing low-coverage data. The latest version of SVSeq2 can only process one chromosome at a time. When working on whole genome data, we first ran SVSeq2 for each chromosome (or contig) of the human reference genome and then concatenated the results of individual chromosomes to obtain the final results. LUMPY is a probabilistic-based approach for SV discovery, which integrates multiple SV detection signals, such as read pairs, split reads, thereby achieving a substantial improvement in detection as compared with other popular SV tools such as BreakDancer, GASVPro . Homozygous variants are commonly used for the detection evaluation. However, heterozygous variants are prevalent variants which are often less deleterious but more frequent among genetic disorders compared with homozygous variants. Moreover, the detection of heterozygous variants plays a substantial role in the tumor study because that real samples tend to be a mixture of abnormal and normal genomes and tumor samples usually to have more heterogeneous variants than homozygous ones . However, detecting heterozygous variants is problematic. So we use heterozygous variants for the evaluation besides homozygous variants. Ryan Layer, the author of Lumpy, provided us with two artificial genomes: one genome with 2500 randomly generated deletions of size 100 bp to 10 kbp, the other genome with 5516 non-randomly generated deletions. The 5516 deletions were publicly released by the 1000 Genomes Project. SVSim (https://github.com/ GregoryFaust/SVsim), an SV simulator, was used to generate these genomes by introducing these deletions into the b37 version of human reference, also known as GRCh37 version. The FASTA file of the b37 version can be found at ftp://ftp.1000genomes.ebi.ac.uk/ vol1/ftp/technical/reference/. The location of these simulated deletions in these genomes was recorded in two BEDPE files. We used the first genome for homozygous deletion detection and the second genome for heterozygous deletion detection. The first genome was intended for homozygous deletion detection. We used wgsim (https://github.com/lh3/wgsim), a read simulator, to sequence this genome with 2, 5, 10, 20 and 50 haploid coverage, respectively, to generate paired-end reads of length 150 bp. The insert size of paired-end reads was centered at 500 bp with the standard deviation equal to 50 bp. Generated reads contained sequencing errors (the overall error rate of 0.5). The second genome was intended for heterozygous deletion detection. In order to generate heterozygous deletions, a normal genome and an abnormal genome were required. We used the b37 version of the human reference genome as the normal genome and the genome with 5516 deletions as the abnormal genome. Pairedend reads were generated by using wgsim to sequence the two genomes with 0.05, 0.1, 0.2 and 0.5 SV allele frequencies at 10, 20 and 40, respectively. For example, we generated reads with 0.05 SV allele frequency at 10 coverage like this: we used wgsim to sequence the normal genome at 9.5 haploid coverage and sequence the abnormal genome at 0.5 haploid coverage, then the two sets of reads were combined to form pair-end reads with 0.05 SV allele frequency at 10 coverage. Reads for heterozygous deletions have the same properties with reads for homozygous deletions. Whether reads are for homozygous deletions or for heterozygous deletions, they need to be mapped to the reference for use with detection tools. BWA ALN was used to map reads. Then, alignment files were sorted and indexed by SAMtools . LUMPY required as input two BAM files: a file that was the original BAM file and a file that represented split read alignment. The split read alignment file was generated as follows: split reads were first extracted from the original BAM file using a custom script provided along with the Lumpy program; these split reads were then realigned by YAHA . Furthermore, we used the data of the NA12878 individual released by the Illumina Platinum Genomes project and the data of the five other individuals (NA19311, NA19312, NA19313, NA19316 and NA19317) provided by the 1000 genomes project, as the real data for the evaluation. Sprites uses two micro-intervals to represent the two breakpoints of a deletion. Micro-intervals reflect the fact that microhomologies and microinsertions occur at deletion breakpoints. LUMPY also uses two intervals to represent breakpoints. However, for each deletion SVseq2 and Pindel predicted, two breakpoints were converted to two breakpoint intervals with a length 100 bp. For each known deletion, the same conversion was performed. Since Delly provides the confidence interval of deletion breakpoints, we used them as breakpoint intervals and no conversion was performed. A deletion call is represented by two breakpoint intervals A and B. A known deletion is represented by two breakpoint intervals A 0 and B 0. The deletion calls overlaps the known deletion if and only if A overlaps A 0 and B overlaps B 0. BEDTools was used for checking such overlaps. A call is a true positive (TP) if the call overlaps a known deletion, otherwise it is a false positive (FP). False negatives (FN) refer to the known deletions that SV detection tools failed to report. A comprehensive measure, called F-score, is mainly used to evaluate the methods. The F-score is defined as the harmonic mean of the sensitivity and the precision (1 FDR). The sensitivity is defined as TP TPFN while the false discovery rate (FDR) is defined as FP TPFP .Sprites is a new deletion detection method based upon re-aligning soft-clipping reads. Results of tests on both simulated and real data show that Sprites is more sensitive in low-coverage data. The false discovery rate of Sprites is also low. As a result, Sprites performs the best overall in terms of the F-score in low-coverage data. Furthermore, there is also evidence that realigning soft-clipping reads is more effective than realigning their soft-clipped segments. Tests on simulated data show that Sprites is able to detect deletions with microhomologies and microinsertions at breakpoints in addition to blunt deletions. We have only used reads with soft-clipping at the 5 0-end because 5 0-end has generally higher quality than 3 0end. The reason why Sprites does not work well in high-coverage data may be that Sprites does not directly use paired-end information for the detection. Since there is plenty of paired-end information in high-coverage data, such information could play a more important role in the detection in high-coverage data than in low-coverage data. Utilizing paired-end information in order to improve its performance in high-coverage data is one of directions of our future work. The development of next generation sequencing technologies has increased read length from 36 to 100200 bp. As a result, SV detection methods have shifted from pure PE methods to SR and to hybrid methods such PE SR methods. As the trend continues, we believe that re-aligning split reads-based methodology will play an important role in SV detection in population-scale and cancergenome studies, because such methods are applicable to these types of data. 
