Using state machines to model the Ion Torrent sequencing process and to improve read error rates Motivation: The importance of fast and affordable DNA sequencing methods for current day life sciences, medicine and biotechnology is hard to overstate. A major player is Ion Torrent, a pyrosequencing-like technology which produces flowgrams sequences of incorporation values which are converted into nucleotide sequences by a base-calling algorithm. Because of its exploitation of ubiquitous semiconductor technology and innovation in chemistry, Ion Torrent has been gaining popularity since its debut in 2011. Despite the advantages, however, Ion Torrent read accuracy remains a significant concern. Results: We present FlowgramFixer, a new algorithm for converting flowgrams into reads. Our key observation is that the incorporation signals of neighboring flows, even after normalization and phase correction , carry considerable mutual information and are important in making the correct base-call. We therefore propose that base-calling of flowgrams should be done on a read-wide level, rather than one flow at a time. We show that this can be done in linear-time by combining a state machine with a Viterbi algorithm to find the nucleotide sequence that maximizes the likelihood of the observed flowgram. FlowgramFixer is applicable to any flowgram-based sequencing platform. We demonstrate FlowgramFixers superior performance on Ion Torrent Escherichia coli data, with a 4.8 improvement in the number of high-quality mapped reads and a 7.1 improvement in the number of uniquely mappable reads. Availability: Binaries and source code of FlowgramFixer are freely available at: http://www.cs.tau.ac.il/$davidgo5/flowgramfixer.html.The importance of fast and affordable DNA sequencing methods for current day life sciences, medicine and biotechnology is hard to overstate. Ion Torrents semiconductor sequencing technology, as implemented in its Personal Genome Machine (PGM), has been gaining popularity as a fast and affordable sequencing platform since its debut in 2011 . Semiconductor sequencing has several advantages compared with other high-throughput sequencing platforms, including lack of optics, use of natural, unmodified dNTP molecules and exploitation of ubiquitous semiconductor technology. These advances make Ion Torrent a serious player in the sequencer market, providing reads several hundred bases long and reducing sequencing costs . Ion Torrent is a pyrosequencing-like platform, similar to 454. In every sequencing step, or flow, the chip is washed over with a specific nucleotide. The nucleotide in the flow is incorporated by all consecutive complementary nucleotides hanging at the end of each templatethis is called incorporation. Each incorporation releases an ion, so that the change in pH level indicates whether incorporation occurred and, if so, the number of consecutive bases incorporated. The nucleotide that is washed during each flow is pre-determined and is composed from several repetitions of a shorter sequence of nucleotides known as the wash cycle. The default wash cycle for 454 is 4 nt long: TACG, whereas Ion Torrents PGM uses a more complicated wash cycle that is 32 nt long. The resulting read is then specified in terms of a flowgrama sequence of incorporation values, one for each flow.gives an overview of the process. Despite its advantages, Ion Torrent read accuracy remains a significant concern. Errors are produced during base-calling, a process by which the noisy signal from the sequencer is converted into a sequence of nucleotides. Base-calling errors can especially pose challenges for re-sequencing projects, where they can be confused with SNPs. In fact, a recent comparative study found that Ion Torrents PGM still suffers from high false-positive rates in SNP calling, relative to Illumina data . There is a large body of work on base-calling algorithms [seefor a survey], and there have been several techniques developed specifically for pyrosequencing data . These techniques have mostly focused on correcting 454s well-documented errors in long homopolymer runs or alignment of their flowgrams. However, there has been little work done in correcting base-calling errors in Ion Torrent data. Ion Torrents base-calling algorithm, after performing phasecorrection and normalizing to handle signal decay, simply translates the rounded values of each flow into the corresponding number of consecutive nucleotides. In essence, it is a memoryless algorithm that makes a call for each flow independent of information from previous or following flows. Our key observation is that the signals of neighboring flows carry considerable mutual information and are important in making the correct base-call. We propose that base-calling of flowgrams should be done on a read-wide level, rather than one flow at a time. To this end, we design a linear-time method that combines a state machine with a Viterbi algorithm to find the nucleotide sequence that maximizes the likelihood of the observed flowgram. Our algorithm is applicable to any flowgram-based sequencing platform and is implemented in a publicly available tool called FlowgramFixer. We demonstrate FlowgramFixers superior performance on Ion Torrent Escherichia coli data, with a 4.8 improvement in the To whom correspondence should be addressed. The Author 2013. Published by Oxford University Press. This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/ by-nc/3.0/), which permits non-commercial re-use, distribution, and reproduction in any medium, provided the original work is properly cited. For commercial re-use, please contact journals.permissions@oup.com number of high-quality mapped reads and a 7.1 improvement in the number of uniquely mappable reads.We demonstrate our method using a publicly available dataset from Ion Torrents webpage, namely, C11-278. C11-278 is a resequencing experiment of E.coli DH10B, using the PGM with an Ion 318 chip. We extracted the normalized and phase-corrected incorporation signals from the SFF files. The file contained 6 742 759 flowgrams and 1.65 Gb, respectively. The PGM was run using a wash cycle of 32 bases: TACGTACGTCTGAGCATCGATCGATGTACAGC, and used 520 flows. We note this is the default Ion Torrent wash cycle. We first ran the default calling algorithm, which is equivalent to rounding the signals in the SFF file. We use this algorithm as a baseline for our comparisons. We then ran FlowgramFixer, which took $4 h on a single CPU (Xeon E7-8837 @ 2.67 GHz) with inconsequential memory use (510 Mb). This run included a preliminary step of estimating the optimal noise-model parameters for a subset of 20 384 flowgrams, using a greedy algorithm, computing the mean intercept and trend and running the Viterbi on the entire dataset using the mean parameters. To ensure reproducibility, the subset of flowgrams we used originated from a 200-by-200 wells region from the chip, which were pre-specified by Ion Torrent and available on their website as an exploratory dataset. The mean intercept and trend were 0.0377 and 1:766 10 4 , respectively. The output of each algorithm is a list of integer-valued flowgrams, which we converted to reads and aligned to the reference with bowtie2 using default parameters. First, we compared the number of uniquely aligned reads. The baseline rounding method yielded 3 537 723 uniquely mapped reads, whereas FlowgramFixer yielded 3 788 697an increase of 250 974 reads (7.1). Second, we counted how many reads (hard clipped at 200 bp) were mapped uniquely with highmapping quality . FlowgramFixer outperformed the baseline rounding method for all quality thresholds, with a 2.84.8 increase in the number of high-quality aligned reads. We wanted to study the effect of the position along the wash cycle on error rates. For each flowgram corrected by the baseline method, we converted the aligned-to part of the reference genome to a flowgram and noted the flow positions that had a mismatch. We then averaged the error rates of flows that are identical mod 32 (the length of the wash cycle) . It is evident that different positions along the wash cycle display remarkably different error rates. This can partially be explained by patterns in the wash cycle. For example, positions 911 contain the nucleotides T, C and T. Because of the first T, the probability of observing incorporation at the second T is much lower; therefore, more flows have no incorporations. As no incorporations are easier to call, the error rate at the second T is much lower as well. A similar situation occurs at positions 2527, containing T, G and T. Positions 11 and 27 are highlighted in red in. The opposite effect can also be observed, such as the A at position 13. As there is a large gap between the appearance of the previous A (position 6), there is a higher probability of incorporation and, hence, of error. A similar situation occurs with the C at position 29. These positions are highlighted in green in. Next, we investigated the dependence of the error rate on the flow position. The average error-rates per flow of the rounding algorithm are portrayed in. It is clear that the vast majority of errors occur at the ends of the flowgrams, and that such a high-error rate renders the ends of Ion Torrent reads useless. As this is the case for most, if not all, high-throughput sequencing technologies, most real-life applications involve a step of clippingremoving the 3 0-end of each readeither by setting a pre-defined length (hard clipping) or using a reference genome to determine the optimal cut-off point (soft clipping). We, therefore, applied soft clipping to the 3 0-end of each read using bowtie2 (using the local parameter) and re-estimated thePosition within wash cycle Average error rate We have focused on developing a general inference framework without making it overly reliant on the current intricacies of Ion Torrents platform. However, there are several possible extensions that, although making the approach less robust to technology changes, could improve its performance on todays datasets. We discuss several such ideas later in the text. Our noise model relies on a intercept and trend model for the standard deviation (SD) parameter. One might suggest richer models, including more complicated dependency of the SD on the flow index, dependency of the SD on the number of incorporated nucleotides and a dependency on the position along the basic 32-nt wash cycle. We briefly experimented with these ideas and were not able to find a richer model that improved the results while maintaining a reasonable running time. However, exploring these ideas further seems worthwhile. Additionally, we suggest that additional accuracy gains might be gained by adding a spatial structure to the noise model, as nearby wells experience similar artifacts during the sequencing process. G T C T G A G C A T C G A T C G A T G T A C A G C T A C G T A C G T C T G A G C A T C G A T C G A T G T A C A G C T A C G T A C G T C T G A G C A T C G A T C G A T G T A C A G C T A C G T A C G T C T G A G C A T C G A T C G A T G T A C A G C T A C G T A C G TFig. 7. Error rate difference between the rounding method and FlowgramFixer (baseline error rate FlowgramFixer error rate). The average difference of error rate grows as the sequencing process progresses, as expected because of the noisier signal obtained at later flows. Although at some flows, the error rate decreases by as much as 3.4, at other flows the error rate actually increases. Interestingly, the error rate difference also displays a dependency on the position in the wash cycle. Per-flow error rates of the rounding algorithm, using soft clipping. As expected, the error rate increases as the sequencing process progresses, even after clipping. The dependency of the error rate on the position in the wash cycle is also evident. Similarly to, flows that are 11th or 27th within a cycle (marked red) display a considerably lower error rate, whereas flows that are 13th within a cycle (marked green) display considerably higher error rates T A C G T A C G T C T G A G C A T C G A T C G A T G T A C A G C T A C G T A C G T C T G A G C A T C G A T C G A T G T A C A G C T A C G T A C G T C T G A G C A T C G A T C G A T G T A C A G C T A C G T A C G T C T G A G C A T C G A T C G A T G T A C A G C T A C G T A C G T C T G A G C A T C G A T C G A T G T A C A G C T A C G T A C G T C T G A G C A T C G A T C G A T G T A C A G C T A C G T A C G T C T G A G C A T C G A T C G A T G T A C A G C T A C G T A C G T C T G A G C A T C G A T C G A T G T A C A G C T A C G T A C G T C T G A G C A T C G A T C G A T G T A C A G C T A C G T A C G T C T G A G C A T C G A T C G A T G T A C A G C T A C G T A C G T C T G A G C A T C G A T C G A T G T A C A G C T A C G T A C G T C T G. Per-flow error rates of the default calling algorithm used as a baseline for comparison. The error rate clearly increases with the flow number, with a dramatic increase beginning around flow 380 i350Although we are encouraged by the results of FlowgramFixer presented here, we recognize the quick pace at which technology evolves. As Ion Torrent continues to improve its sequencing technology (e.g. its new Ion Proton sequencing platform), it is likely that important parameters, such as the wash cycle, will evolve and the specific error profiles we observe today will evolve as well. However, we believe our major innovation that inference should and could be done efficiently on the whole flowgram rather than flow-by-flowwill remain relevant for any future flowgram-based technology. Such technologies have been a major workhorse of the scientific community for several years, and it is likely they would remain relevant in upcoming years. 
