Genome analysis Simple high-throughput annotation pipeline (SHAP) SHAP (simple high-throughput annotation pipeline) is a lightweight and scalable sequence annotation pipeline capable of supporting research efforts that generate or utilize large volumes of DNA sequence data. The software provides Grid capable analysis, relational storage and Web-based full-text searching of annotation results. Implemented in Java, SHAP recognizes the limited resources of many smaller research groups. Availability: Source code is freely available under GPLv3 at https://sourceforge.net/projects/The development of SHAP began in early 2006, after it became apparent that the needs of our environmental genomics (metagenomics) program would not be satisfied by available annotation tools of the day. Automated pipelines were focused primarily on the analysis of single microbial genomes (; http://manatee.sourceforge.net) and often pursued analysis strategies that became impractical when the volume of sequencing data grew substantially beyond their original design scope. SHAP was designed around five primary requirements: relational storage, scalable high-throughput analysis, a simple extensible core, platform independence and free availability; requirements that were not met by any program evaluated at the time. Recently, Ergatis and the derived annotationspecific server ISGA have become available. Streamlining the capacity of Ergatis, ISGA addresses many of the issues that motivated the creation of SHAP. However, the ambitious nature of the system makes it complex and demanding to deploy as a monolithic application. As the name implies, SHAP provides a relatively simple means of annotating high-throughput DNA sequencing datasets while, at the same time, allowing for customization and expansion.SHAP does not expect any prerequisite analysis tools be installed or any particular Analyser be defined prior to use, but does provide a set of example definitions. In this way, SHAP can be considered both a framework and a skeletonized pipeline ready to be fleshed-out by the user. Although SHAP was designed to employ an external database provider and web server, both are capable of being embedded within the application itself. This fully self-contained version requires little to no configuration by the end-user and demonstrates the value of SHAPs layered design . Its simplicity is a major advantage compared with other similar software packages when custom or new tools need to be incorporated in the pipeline. In comparison, ISGA requires 42 subordinate tools to be installed as part of the installation process, which, although no doubt offering a comprehensive analysis, remains a daunting task. A nave SLOC (source lines of code) size metric applied to the core codebases of SHAP and ISGA finds that ISGA comprises 26 867 physical and 17 305 logical lines of Perl, whereas SHAP comprises 16 395 and 10 683 lines of Java, respectively. Ignoring a possible further normalization to account for the relatively higher level nature of PERL to Java (6:2.5) , there remains a 38 reduction in codebase size. This comparative reduction could be greater still if ISGAs dependence on the larger Ergatis framework (73 227 physical LOC) for workflow support was included in the metric. However, the SHAP and Ergatis frameworks should not be compared as simplicity of purpose brings forth a feature disparity particularly in the subtly of process. From the outset of development, the goal was to build a system that could deal with large volumes of data, scale both in the persistence domain and analysis throughput, not become overly complex or difficult to adapt in a developing field of research and allow migration between platforms. Through a layered design, the areas of greatest change are isolated from the rest of system andthereby insulated from their changing habits. SHAPs Web interface provides simple and expedient access to the annotation results, presenting users with a familiar means of access. SHAP has been in active use within the group, having supported recent research activities . Deployed on our in-house 64 core cluster, the running system has accumulated over 13 years of computational time in 97 days, analysing 2.6 million DNA contigs (2.1 billion bases), producing 4.1 million ORF predictions (578 million amino acids) and recording 7.7 million significant annotation results. Future development may involve converting SHAP to OSGi dynamic modules to further enhance platform independence and ease of deployment. 
