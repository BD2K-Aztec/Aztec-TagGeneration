Data and text mining Efficient comparison of sets of intervals with NC-lists Motivation: High-throughput sequencing produces in a small amount of time a large amount of data, which are usually difficult to analyze. Mapping the reads to the transcripts they originate from, to quantify the expression of the genes, is a simple, yet time demanding, example of analysis. Fast genomic comparison algorithms are thus crucial for the analysis of the ever-expanding number of reads sequenced. Results: We used NC-lists to implement an algorithm that compares a set of query intervals with a set of reference intervals in two steps. The first step, a pre-processing done once for all, requires time OR logR Q logQ, where Q and R are the sets of query and reference intervals. The search phase requires constant space, and time OR Q M, where M is the set of overlaps. We showed that our algorithm compares favorably with five other algorithms, especially when several comparisons are performed. Availability: The algorithm has been included to SMART, a versatile tool box for RNA-Seq analysis, freely available at http://urgi.versailles. inra.fr/Tools/S-Mart. The algorithm can be used for many kinds of data (sequencing reads, annotations, etc.) in many formats (GFF3, BED, SAM, etc.), on any operating system. It is thus readily useable for the analysis of next-generation sequencing data.With the advent of high-throughput sequencing, bioinformatics must analyze a large amount of data every day. Modern sequencers can generate several hundred millions of sequences in a week for a price that is affordable to more and more labs. When a reference genome is available, the first task is to map the reads on the genome. Many mapping tools are now available and research is active on this topic. For RNA-Seq, the second step may be the assignment of the mapped read to the transcripts they originate from, to estimate the expression of the genes . In general, the genomic comparison of the mapped reads with a reference annotation is the basis of many analyses: comparison of putative transcription factor binding sites with up-regulated genes ; detection of the single-nucleotide polymorphisms that are located in coding regions ; processing de novo transcript sequences to determine if they represent known or novel genes . These three examples involve a comparison of two annotations, and the problem has been addressed often. However, high-throughput sequencing, for the amount a data it produces, requires optimized algorithms for its analysis. Most tools model the reads or annotation as intervals, or lists of intervals when different elements are modeled (exons, UTRs, etc.). These intervals are considered along a reference, which usually is a chromosome or a scaffold. Thus, comparing RNASeq reads with known transcripts reduces to comparing a set of query intervals (the reads) with a set of reference intervals (the exons of the transcripts). Every efficient algorithm requires a dedicated data structure, such as an indexed database, an indexed flat file [such as a BAM file (, an R-tree or NC-lists (nested containment lists) . These structures are usually built once during the pre-processing step, and can be reused for other analyses. Although these structures may take considerable amount of time to build, the balance is usually favorable to pre-processed structures when several comparisons are performed, as the time spent for the comparison itself is considerably reduced. This observation leads to the conception of the BAM format, now widely used in the bioinformatics community. With the notable exception of the fjoin algorithm , almost all the algorithms previously described only get all the reference intervals that overlap with one given query interval: most algorithms have been designed to retrieve all the intervals a user can see when he selects a given window in a genome browser . Whereas these algorithms can be used to compare two sets by comparing each query interval, one after the other, with the reference intervals, we will show here how comparing the whole query set with the reference set can be more efficient. Among the possible data structures presented to compare intervals, NC-lists are one of the most promising. NC-lists have been first described to retrieve all the reference intervals that overlap with a single interval. Their structure is compact (a simple set of two arrays, L and H), the algorithm is fast in practice and the search phase requires only constant space, which is compulsory when handling several hundreds of millions of reads. The key idea of NC-lists is to perform binary dichotomic search on the list of reference intervals. But dichotomic search cannot be performed when some intervals are contained (or nested) inside other intervals, so NC-lists arrange intervals into liststhe L arraywhere no two intervals are nested. If some intervals are nested inside an ancestor interval, To whom correspondence should be addressed. The Author 2013. Published by Oxford University Press. All rights reserved. For Permissions, please e-mail: journals.permissions@oup.com they are stored in a separate sublist using the H array (see). NC-lists can be built in linearithmic time [i.e. of the form On log n], using linear space (actually, only five integers are stored per interval). In their article, the authors presented a recursive dichotomic algorithm, equivalent to Alg. 1, which uses NC-lists. It is claimed that getting all the reference intervals that overlap with a query interval could be done in time OlogR M, where R is the reference set and M the pairs query/reference that overlap, but this is not accurate for some cases (see section 3.1). In this article, we will present an algorithm, which relies on NC-lists, and provides all the pairs query intervals/reference intervals that overlap. In a pre-processing step, the algorithm sorts the query and the reference intervals. It then builds a NC-list for the reference intervals. In the search phase, the algorithm compares every query interval with the reference intervals in time OR Q M. All together, the algorithm takes OR logR Q logQ M. Although the complexity of the whole algorithm is not better than already known algorithms, the runtime complexity is significantly lower than other constant-space algorithms. As such, our algorithm is especially useful when performing multiple comparisons on large sets of data, such as in an RNA-Seq data analysis.Comparison to other implementations. We show here the results of our algorithm when compared with several other published methods. The first is a simple NC-list algorithm, as presented by, which does not use any information between two consecutive query intervals, hereafter called nc. The second method implements binning using an indexed SQLite table, hereafter called bin. We also implemented another flavor of this algorithm, called has, where the database has been replaced by a hash structure, such that the keys are the bins, and the values are lists of intervals. A forth algorithm is a binning table with segment tree, as described in Segtor , called seg. We also added FJoin (fj), which scans the previously sorted query intervals and reference intervals simultaneously to find overlaps. Our algorithm will simply be called new. Among the presented algorithms, only bin, nc and new have constant space complexities. The other algorithms, has, seg (where the trees are stored in memory) and fj (which has a linear space complexity), are thus not likely to work on the large amount of data modern sequencers generate, with a standard computer. For instance, in our implementation, the has algorithm fills our RAM (4 GB) when the reference dataset contains 30 M intervals. Still, as they rely on in-memory data, they usually run faster on the sets they can handle. For a fair comparison of all the algorithms, and to exclude any bias that would originate from the choice of the programming language used by the different methods, we re-implemented all the algorithms carefully as described by the articles. All the algorithms have exactly the same input, output and functionalities, which reflect a usual mapped reads/annotation comparison study. First, strand is ignored (as many RNA-Seq data have no strand information, and most algorithms, when described in their original articles, do not deal with this case). Second, each feature (hereafter a read or a transcript) is stored as a single interval. If an overlap is detected, the transcript is extracted from the input file (each method keeps track of the memory address of the features) and a second comparison is performed to check if the overlap is not located in the introns of the transcript, in which case the overlap is not reported. Last, the output file is a GFF3 file, which contains the query intervals that overlap with at least one reference element, and the list of the overlapping elements are added in the tags of the ninth field. These implementations, as well as the benchmark itself, are available in the SMART toolbox. See supplementary materials for more information about these implementations. Example on a real dataset. We downloaded three different publicly available RNA-Seq datasets: on yeast, fly and cress (available as SRR014335, SRR030228 and SRR346552 datasets in GEO). We mapped the reads with Bowtie on the reference genome and we compared the mapped reads with the annotation (the genome sequence and the annotations are both available from the Bowtie website). For each dataset, we reported the number of annotated transcripts (which are the reference intervals) as well as the number of reads (the query intervals). We used the six different algorithms previously mentioned. Run-time results are shown in. The first columns give the characteristics of the datasets: number of reads, number of transcripts and number of overlaps. The following columns give the run-time spent by the algorithms when the genes are the reference and the reads are the query. As expected, has and the fj algorithms usually perform well on this dataset because the intervals are stored in memory.Our algorithm is still among the fastest ones. However, the preprocessing of our algorithm is by far the slowest one (see Supplementary Data). This is a typical trade-off between run-time speed and pre-processing-time speed because the bin algorithm, the slowest algorithm in the comparison step, is the fastest algorithm in the pre-processing step among constant space methods.Example on simulated datasets. We also generated several datasets to compare the algorithms in detail. The intervals ranged from 36 to 100 nt, the genome contained a single chromosome, ranging from 10 k to 2 M bp. The number of reference and query intervals varies from 100 to 100 k and 100 to 10 M elements, respectively. Each configuration was generated five times. The results ingive the run-time results of each method. Our algorithm is still the fastest among the constant space complexity algorithms. The fj required too much RAM (more than 4 GB) to work on the largest datasets. Regarding the pre-processing step, our algorithm is the slowest one (see Supplementary Information) but overall, the balance is always favorable to our algorithm after three comparisons when compared with the bin, the seg or the nc algorithm.Insertion in SMART. SMART is a versatile tool box for the analysis of RNA-Seq data. It contains many useful tools for the comparison of RNA-Seq data with respect to a given annotation: number of reads for each transcript, distance distribution between the reads and the closest transcripts, discovery of previously unknown transcribed loci, etc. We added a new tool, called FindOverlapsOptim, which implements the algorithm presented in this article. As a consequence, the algorithm can be used for many kinds of data (such as RNA-Seq reads, but also annotation of any feature) in many formats (GFF3, BED, SAM, etc.). We included a so-called nclist format in SMART, which contains several NClists (one per chromosome), so that preprocessing can be done once for all. This pre-processing step can be performed using a separate tool called ConvertToN CList. These files can be used as input file by most tools of the SMART suite, much like BED or GFF3 files. We also implemented a second version of our algorithm in the SMART tool called CompareOverlapping. This version is more flexible and accepts many different parameters: it may output the query elements only if they are collinear (or antisense) to the overlapping reference element, the query elements that are nested inside reference elements, the query elements that overlap the first 100 bp of the reference elements, etc. Because CompareOverlapping is much more flexible than FindOverlapsOptim, it is also substantially slower. Last, we added two versions of the much faster has algorithm in SMART, to be used when the query or the reference have moderate sizes. The encapsulation of the algorithms within SMART ensures that the presented method is not only a theoretical work, but also used in a tool that is readily available to biologists. For the computer scientists, we also implemented an API and executables in C so that they can embed them in their algorithms.The method presented here uses NC-lists and provides a fast algorithm that compares two large sets of intervals efficiently.To our knowledge, it is the first time that an algorithm with both linear time complexity and constant space complexity during the search phase is presented. This low run-time complexity comes at the cost of a high pre-processing time complexity, where the intervals should be sorted. However, this step is done only once and is far from untractable (the samtools sort algorithm is used routinely to sort BAM files). As a result, the algorithm presented in this article is adapted to multiple comparisons. When we designed the algorithm, we had the idea in mind that it could help comparing features such as RNA-Seq data, which can amount to several hundreds millions reads. While this algorithm presents a theoretical interest by itself, we also encapsulated it in the SMART tool box, which includes all the features to handle usual file formats. As a consequence, we hope this work will be useful for both computer scientists and biologists. 
