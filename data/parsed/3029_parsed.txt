model annotation for synthetic_biology automating model to nucleotide_sequence conversion motivation the need for the automated computational_design of genetic_circuits is becoming increasingly apparent with the advent of ever more complex and ambitious synthetic_biology projects currently most circuits are designed through the assembly of models of individual parts such as promoters ribosome binding_sites and coding_sequences these low_level models are combined to produce a dynamic_model of a larger device that exhibits a desired behaviour the larger model then acts as a blueprint for physical implementation at the dna level however the conversion of models of complex genetic_circuits into dna_sequences is a non trivial undertaking due to the complexity of mapping the model parts to their physical manifestation automating this process is further hampered by the lack of computationally_tractable information in most models results we describe a method for automatically generating dna_sequences from dynamic_models implemented in cellml and systems_biology sbml we also identify the metadata needed to annotate models to facilitate automated conversion and propose and demonstrate a method for the markup of these models using rdf our algorithm has been implemented in a software_tool called mosec availability the software is available from the authors web sitesynthetic biology involves the design and implementation of genetic_circuits to enable organisms to perform novel desirable functions for biotechnology applications such applications include the production of medically relevant biomolecules environmental bioremediation and biofuel_production most genetic_systems are currently designed manually by a domain expert with a deep_understanding of the system to be engineered however as the aims of synthetic biologists become to whom correspondence should be addressed more ambitious and designs correspondingly more complex the manual design of systems at a genetic level becomes more challenging consequently interest in the computational_design of genetic_circuits has grown rapidly over the last few years genetic_circuits are usually designed and simulated in silico as abstract models computational_models of genetic_systems such as biobricks are valuable because they allow rapid simulation of a system and verification of its behaviour under a range of circumstances in synthetic_biology in silico models of modular components are typically assembled in a bottom up fashion to produce a larger computational_model of the desired system such models are usually constructed using abstract modelling formalisms such as systems_biology sbml and cellml once a suitable model for a system has been designed the conceptual_model must be transformed into a dna_sequence this sequence encodes the necessary genetic_features required for a designed circuit to be implemented in vitro or in vivo at first glance this transformation appears to be a relatively straightforward task to complete manually components are selected and their dna_sequences are concatenated appropriate restriction_sites can then be added a cloning_vector selected and the entire_sequence synthesized or cloned as appropriate in practice the situation is far more complex and for large models is time consuming and difficult to complete by hand a typical computational_model will contain numerous species or components that do not have a physical representation at the dna_sequence level examples_include entities representing proteins protein and rna degradation information_flow environmental inputs and chassisrelated factors in this article we refer to model components representing biological_parts with a dna_sequence as dna based parts it is not always immediately obvious which entities in the model map directly to the genes and sequence_features necessary to encode the system represented by the model the fact that the mapping between component abstractions and sequence_based features is not necessarily one to one adds additional complexity other factors such as the spacing and ordering of physical features and the genetic_elements used to ensure their replication can also impact on a systems behaviour and must be considered as models for computationally designed systems increase in size and complexity automatically deriving the physical dna sequencepage we applied our approach to the derivation of a dna_sequence for the subtilin receiver model described in detail by the subtilin receiver model was built from annotated svps assembled into a model and then used to generate a dna_sequence the model was based upon that used to design a subtilin receiver device biobrick by the newcastle university igem team part no bba k the device encodes a construct which responds to the lantibiotic subtilin by producing green_fluorescent gfp the specification for the virtual parts used in the model was derived from the subtilin sensing and regulatory system page from bacillus_subtilis strain_atcc which uses subtilin for quorum_sensing this construct contains a promoter that transcribes an operon containing the cds for spar and spak that encode the response_regulator and sensor kinase respectively of the subtilin twocomponent system the spar regulated promoter pspas is included downstream of the operon separated by a transcription terminator upon sensing the subtilin signal_peptide the spak subtilin sensor activates the spar regulatory protein by phosphorylation the activated spar can then activate the pspas promoter the subtilin receiver biobrick was modelled in cellml versions and and sbml version we annotated the virtual parts used to build this model according to the approach described above and used the model to sequence algorithm to automatically derive a dna_sequence specification the essential steps of the model tosequence conversion algorithm are illustrated using this model in the annotated svps the complete model and the output of the model to sequence conversion process are available in the supplementary_material accompanying this article the nucleotide_sequence produced from this model is currently being biologically validated many tools have already been developed to aid biologists with the manual design simulation and construction of synthetic biological_systems these tools are useful when the system under design is limited in size and the user possesses enough knowledge about the system to provide initial insights into the formulation of a preliminary design however manual visually_guided assembly of representations of sequencebased parts is unlikely to be scalable for large_scale computational_design especially where the detailed_structure of the system to be designed is poorly_understood computational_approaches particularly those based on evolutionary computation ec are particularly promising for automating large_scale biological system design evolutionary algorithms were developed for applications in complex problem domains where the desired behaviour of the system is known but the details of the system itself may be poorly_understood as such it can produce novel non intuitive circuits indeed there is increasing evidence that complex systems constructed manually are less robust than those constructed using an evolutionary approach in order to have a completely automated circuit design process models must be constructed their behaviour assessed via simulation modified if necessary and then converted to a dna_sequence specification without the need for human intervention however the computational assembly of parts that directly represent the molecular_entities that comprise biochemical_systems is problematical due toan xml file encoding the model is converted to a graph_representation b non cis interactions between model species or components are removed together with any entities that lie between these edges c dna based parts only are retained d the final sequence the virtual parts used to build this model were annotated according to the approach outlined above facilitating its automatic conversion into a dna_sequence specification the complexities of mapping dna based parts to the models that encode them once a system has been successfully designed and simulated the next logical step is to test the design by implementing it in the target chassis or organism the nucleic_acid required to encode the system in vivo must be specified and ordered to give the correct genomic_context a process that is guided by information in the model in other words the model representing the system must be interpreted to identify the nucleic_acid molecules necessary to implement the system in vitro or in vivo in order to automatically specify the genetic system at a sequence level two types of information must be present in the model information specifying the nucleic_acid necessary to encode the system at a genetic level and connectivity_information that allows the correct ordering and spacing of sequences of genetic_parts to be interpreted to ensure the correct cisbased interactions between these genetic_parts currently dynamic_models generated for systems or synthetic_biology in sbml and cellml are not usually annotated with this information in this article we have described an approach to sbml and cellml model annotation that allows the information to automatically specify genetic_systems at the nucleotide_sequence level to be derived cellml and sbml have proven pedigrees in systems_biology and many complete models of synthetic systems already exist it is possible to manually add the annotations necessary for the modelto sequence conversion process after model composition however our annotation system has been designed with a bottom up model assembly process in mind by marking up the virtual parts prior to model composition composite models may be directly converted to nucleotide_sequences with no further manual intervention it is our intention to provide repositories of svps already marked up using the mosec specification as a standard to support design_tools that operate in a bottom up fashion 
