raptr sv a hybrid method for the detection of structural_variants motivation identification of structural_variants svs in sequence_data results in a large number of false_positive calls using existing software which overburdens subsequent validation results simulations using raptr sv and other similar algorithms for sv_detection revealed that raptr sv had superior sensitivity and precision as it recovered of simulated tandem_duplications with a precision of when compared with calls made by delly and lumpy on available datasets from the genomes_project raptr sv showed superior sensitivity for tandem_duplications as it identified fold more duplications than delly while making fewer duplication predictions availability_and raptr sv is written in java and uses new features in the collections framework in the latest release of the java version language specifications a compiled version of the software instructions for usage and test results files are available on the github repository page https github com njdbickhart raptr sv among one of the larger classes of heritable genetic_mutations structural_variants svs are difficult to detect within data derived from current high_throughput svs have been implicated as the causative_agents of several phenotypes in animal_species such as color sidedness in cattle and peacomb in chickens however their reliable_detection from next_generation data requires cutting_edge computational algorithms and extensive molecular validation much of the need for validation stems from the high false_discovery fdrs of several popular sv callers several of which have been shown to have a fdr of additionally the exact nucleotide breakpoints of sv events are difficult to detect from sequence_data using existing_methods many algorithms such as read_depth based copy_number cnv_detection attempt to improve sv_detection precision by lowering the resolution of detection however this prevents reliable breakpoint estimation higher_resolution sv breakpoint detection has recently been the subject of extensive research within the genomics community much work has been done to utilize short_read library_construction techniques such as paired_end libraries to infer the exact breakpoints of svs in the genome as was implemented in the program pemer one such algorithm implemented in the program pindel splits reads into smaller constituents prior to realignment to the reference_genome to find the precise breakpoints of smaller events these two techniques were shown to contribute the highest quality sv predictions in the recent human genomes_project still these methods are highly prone to false_positive sv call predictions due to chimeric read fragments and repetitive sequence misalignment we expand on these methods by combining their predictions to generate highly confident sv calls which can be filtered at runtime for improved accuracy such a strategy can be considered a hybrid of the split_read and paired_end algorithms and has previously been implemented in software such as delly and lumpy sv we have also designed our tool to be used on non model_organism reference assemblies by taking_into the uncertain nature of gap regions in our runtime filters we call our method raptr sv which embodies a combination of read_pair rp and split_read sr methodologies 
