systems_biology accelerating reaction diffusion simulations with general_purpose graphics_processing we present a massively_parallel stochastic_simulation ssa for reaction_diffusion implemented on graphics_processing gpus these are designated chips optimized to process a high number of floating point operations in parallel rendering them well suited for a range of scientific high performance computations newer gpu generations provide a high_level programming interface which turns them into general_purpose graphics_processing gpgpus our ssa exploits gpgpu architecture to achieve a performance_gain of two orders_of over the fastest existing implementations on conventional hardware availability the software is freely_available attreating chemical_reaction systems as spatially homogeneous is insufficient for many applications in a biological_context often spatial_distributions play_an in the dynamic evolution of biomolecular systems the analysis of such systems requires accurate yet highly performant simulation algorithms that can handle spatially inhomogeneous reactiondiffusion unfortunately stochastic simulation_methods for this problem are computationally extremely expensive and it thus becomes necessary to build parallel versions of existing algorithms gpgpus can potentially provide high_performance resources to a broad audience and are consequently becoming increasingly popular for scientific computing in the present article we present a data parallel gpgpu implementation of an ssa which achieves significant performance gains over the fastest conventional implementations to the best of our knowledge this is the first time that a data parallel gpgpu implementation of a quantitative ssa for spatially_heterogeneous reaction diffusion networks is reported several approaches to compute the stochastic time evolution of reactiondiffusion networks can be found in the literature such as agent_based first passage kinetic to whom correspondence should be addressed monte_carlo algorithms or on a mesoscopic level compartment based models such as the next subvolume method nsm not all these methods lend themselves equally well to a dataparallel implementation on gpgpus the standard algorithms based on gillespies next reaction method perform an event based simulation in which global communication is required to compute the next event time as well as to determine the corresponding reaction due to the high_cost of global synchronization and inter node communication attempts to implement the gillespie ssa directly on gpgpus could only yield moderate performance gains petzold andpursue a different approach by running many instances of the same model in parallel on a gpgpu this technique allows immediate parallelization of sequential algorithms but cannot speed up individual runs and can thus only exploit the full hardware potential if a large number of simulations are required for a full parallelization methods that treat diffusion seperately from reactions appear to be more promising such methods are termed hybrid one can distinguish between deterministic stochastic algorithms where diffusion is handled in a deterministic manner and stochasticstochastic methods which are preferable for cases where the diffusive species is not necessarily present in high_densities two prominent examples of the latter type of hybrid algorithms are the gillespie multiparticle method gmp first presented by and the multinomial simulation algorithm msa in this article we report a gpgpu implementation of gmp hybrid stochastic reactiondiffusion algorithms are an active and relatively recent field of research and no clear champion has emerged yet cellular_automata methods are widely used to simulate reactiondiffusion systemsfor a comprehensive_review in particular the multiparticle lattice gas algorithm underlying gmp has been successfully_applied for example to problems in electrochemistry its applicability to biochemical_pathways has been shown in a number of studies e g for the phosphoenolpyruvatedependent phosphotransferase pts pathway in escherichia_coli we believe that msa should in principle be just as well suited for a data parallel implementation however the free availability of the source_code made gmp our first choice a detailed comparison of computational_methods for reaction diffusion networks is given by for completeness we point out that the deterministic treatment of reactiondiffusion equations with gpgpus has a long history in the context of computer graphics the driving motivation behindwe have described an implementation of the gillespie multiparticle method gmp on gpgpus we report performance gains of two orders_of compared with standard implementations of the exact inhomogeneous stochastic_simulation and the hybrid serial implementation of gmp like any other hybrid method gmp sacrifices some numerical accuracy for performance gains this trade_off can in principle be arbitrarily adjusted through the choice of the diffusion time step for a more detailed discussion we refer the reader to section of the supplementary_material we provide a full simulation system inchman that allows the user to run their models without any coding on the monash sun grid gpu cluster access to this system is via an easy to use web_interface that understands systems_biology sbml specifications the lingua franca of systems_biology in addition we provide a full implementation of the algorithm on our website researchers may use the c interface to construct their own reaction diffusion model from scratch the application_programming api is designed to mimic the structure of sbml models allowing the user to easily convert their models into gpgmp without having to deal with the internal details of the simulation algorithm a variety of test problems that can be used as templates are part of the package the full source_code is included so the user can easily add the relevant gpu_implementation into their own projects most scientific applications require a reasonable sample_size to extract statistic information from the simulations it is therefore necessary to perform multiple runs of the same problem possibly with varying input_parameters we pursue a fold approach to tackle this requirement first the standard implementation of gpgmp distributes the total number of runs over all available gpgpu cards this works best if the host machine provides a one to one ratio of cpu cores to gpgpu cards second we are integrating inchman with nimrod a toolkit to allow users to run parameter sweeps and parameter_optimization and distribute runs over gpgpu clusters this will become an integral part of the next release of inchman 
