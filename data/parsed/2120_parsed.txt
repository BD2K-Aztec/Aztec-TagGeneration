graphics_processing implementations of relative expression analysis algorithms enable dramatic computational speedup the top scoring pair tsp and top scoring triplet tst algorithms are powerful_methods for classification from expression data but analysis of all combinations across thousands of human_transcriptome samples is computationally_intensive and has not yet been achieved for tst implementation of these algorithms for the graphics_processing results in dramatic speedup of two orders_of greatly_increasing the searchable combinations and accelerating the pace of discovery rapidly improving technologies have made large_amounts of gene_expression data available for analysis and classification the ncbi gene_expression geo database contains hundreds of thousands of samples_representing a wide_range of diseased and healthy_tissue for which gene_expression has been measured as next_generation technology becomes ubiquitous geo and other databases will further increase in size and accuracy of information researchers have sought to use this expression data to identify distinct gene relationships that classify disease_states allowing for accurate_diagnosis of diseases given the expression_patterns of a few genes such methods include support_vector decision_trees and neural_networks the top scoring pair tsp algorithm and its variants have demonstrated similar accuracies to these methods while remaining relatively simple resistant to overfitting and consistent across data normalization_methods classifiers identified using these algorithms have been used to predict cancer outcomes and model disease_progression despite these advantages the tsp and especially the top scoring triplet tst algorithm are computationally_intensive and therefore slow because increasing the accuracy of predictions may require analysis of thousands of samples across tens_of of transcripts it is important to improve the speed of to whom correspondence should be addressed these algorithms faster algorithms also enable more comparisons to be made including automated data_mining across many sample_sets while primarily known for gaming applications the graphics_processing gpu is increasingly_applied to computationally_challenging scientific problems including molecular_dynamics simulations quantum_chemistry and medical_imaging the gpu is designed for massive parallelism involving thousands of simultaneous executing threads but requires different coding than that which runs on cpus algorithms well suited for such parallelism can run tens to hundreds of times_faster on gpus than a corresponding cpu implementation gpus are also now widely available to researchers via national center for supercomputing applications ncsa clusters and businesses such as amazon_web ec cloud_computing here we present implementations of the tsp algorithm and the tst algorithm on the gpu as the tst algorithm is particularly computationally_demanding this gpu_implementation enables the first comprehensive search of all possible tsts for classification the algorithms described above have been implemented in c with cuda extensions and compiled into mex files for use within the matlab computing environment a standalone application is also available two existing cpu implementations of the tsp algorithm tspair and rxa were used for speed comparisons with the gpu code one existing cpu implementation of the tst algorithm rxa was used for speed comparisons both cpu software_packages are implemented in the c programming_language as packages for the statistical environment r all cpu speed tests were performed on an intel_xeon x ghz core processor the gpu tests were performed on a nvidia tesla t and an nvidia geforce gtx source_code and executables for all gpu implementations are available at http www igb illinois edu labs price downloads shows the results of the running time comparisons the results for rxa and tspair are plotted separately due to the fact that rxa implements the wilcoxon_rank to filter for only the most differentially_expressed whereas tspair does not as the number of genes increases the speedup on the gpu improves therefore further speedup might be expected for larger tests all gpu timings include the device data transfer as well as computation times the tesla t executes the algorithms x to x faster than the corresponding cpu implementations and the gtx executes the algorithms x to x faster processing genes on the cpu version of the tst algorithm would take over months while the gpu_implementation of the tst algorithm on this dataset was completed in h using the gpu enables the discovery of accurate marker gene_pairs and triplets thatare infeasible with the cpu implementations while also allowing more stringent error estimation methods than are currently possible due to previous computational time constraints 
