genome_analysis repmaestro scalable repeat detection on disk based genome_sequences motivation we investigate the problem of exact repeat detection on large genomic_sequences most existing_approaches based on suffix_trees and suffix_arrays sas are limited either to small sequences or those that are memory resident we introduce repmaestro a software that adapts existing in memory enhanced sa algorithms to enable them to scale efficiently to large sequences that are disk resident supermaximal repeats maximal unique matches mums and pairwise branching tandem_repeats have been used to demonstrate the practicality of our approach the first such study to use an enhanced sa to detect these repeats in large genome_sequences results the detection of supermaximal repeats was observed to be up to two times_faster than vmatch but more importantly was shown to scale efficiently to large genome_sequences that vmatch could not process due to memory constraints gb similar_results for the detection of mums with repmaestro shown to scale well and also perform up to six times_faster than vmatch for tandem_repeats repmaestro was found to be slower but could nonetheless scale to large disk resident sequences these results are a significant advance in the quest of scalable repeat detection software availability the analysis of whole genome_sequences is of critical importance in bioinformatics a significant problem in such sequence_analysis is the presence of repetitive structures the analysis of which plays_a in the study and comparison of complete_genomes these repetitive_regions occur in biological strings such as in dna rna and protein and have been shown to play a functional and evolutionary role the vast_majority of repeats occur in larger organisms such as plants and animals belonging to the eukaryote kingdom and comparatively fewer repeats occur in prokaryote organisms such as bacteria significantly families of repeats account for almost of to whom correspondence should be addressed the human_genome and comprise nearly of the mustard weed genome and of the worm genome surprisingly only a very small fraction of the human_genome contains the protein_coding a large fraction of the genome contain repetitive_elements the functioning of which are yet to be known for example long and short interspersed elements account for and of the genome respectively while repetitive_elements such as micro and minisatellites could amount to of the genome this indicates that repetitive_sequences exist in abundance in the genome and several of them have been shown to result in abnormalities and diseases during the analysis of genomes the basic tasks include locating and characterizing repetitive_sequences in the genome and finding similar repeats between two genomes broadly there are two types of repeats exact and approximate while exact repeats are a smaller fraction of the repeats having biological interest they form the core blocks of approximate repeats consequently we restrict our discussion to the detection of exact repeats and do not consider approximate or inexact repeats nonetheless adapting our software to detect approximate repeats presents a promising_avenue for future_research repeats play_a in furthering our understanding but the rate at which new genome_sequences are being uncovered has been increasing rapidly the genome_sequencing project has been generating sequence_data at an exponential_rate and the size of genbank has been doubling approximately every months hence with the growth of genomic collections as well as increasing query lengths it is crucial that the efficiency of sequence_analysis remains practical an example of the impact of this exponential data growth is with the popular local_alignment search tool blast which has been getting slower by each year inspite of hardware improvements thus we continue to need not only faster and more efficient approaches for the detection of repeats but also ones that are scalable two key data_structures used for such tasks are the suffix_tree and the suffix_array sa these are helpful for the analysis of sequences that are large but otherwise static there exists disk based suffix_tree and sa construction algorithms that can create a human genome_scale structure in under h however these data_structures are seldom considered for large_scale genome_analysis where these indexes primarily reside on disk this is primarily due to the poor locality of access inherent in these structures our intention is to show that the enhanced sa based structure page repmaestro scales very well to the task of repeat detection of large_genomes furthermore it has been shown that a sa equipped with additional information can be used to solve all problems for which a suffix_tree has been traditionally used thus our techniques could be applied to enhance the scalability of a wide_array of bottomup traversal problems fundamental problems in bioinformatics include the detection of supermaximal repeats maximal repeats maximal unique matches mums maximal multiple exact_matches tandem_repeats exact pattern matching and maximal_exact each of which has numerous applications in comparative_genomics homology searching and finding repeat sequences for example tandem_repeats are the markers of choice in genomic_research and find applications in determining parentage genealogical dna tests genotyping pathogens morphological evolution and in human identification in forensic_cases furthermore variations in tandem_repeats are an indication of diseases existing genomic search tools can be divided_into two major groups exhaustive and index based the exhaustive_search tools like blast incorporate several heuristics to compare the query to each sequence in the database but there are growing concerns regarding its scalability the index based tools such as cafe vmatch and mummer preprocess the collection to create an index cafe adapts the inverted index structure for fast and scalable homology_search but it remains_unclear if it could be adapted to solve the other core bioinformatics problems vmatch a state of the art pattern_recognition software is based on an enhanced sa structure and solves several of the core bioinformatics problems but it is restricted to sequences and indexes being memory resident reputer a precursor to vmatch is based on the suffix_tree representation and consequently has both speed and scalability concerns introduced a technique that builds an index on top of an external suffix_tree to detect supermaximal repeats on large genome_sequences with a minimum repeat_length of their implementation is faster than vmatch but its large index size is prohibitive thus a primary drawback in existing_systems is that the sequences and associated structures are required to be memory resident for efficiency the tallymer software addresses this concern for the task of k_mer and for indexing large sequence_sets by utilizing a disk resident enhanced sa tallymer offers linear processing time and space consumption but it is unclear as to whether the software can operate with a bound on memory_usage i e whether or not it is scalable as a consequence of its linear space requirement moreover the authors do not investigate or propose software solutions for finding repeats such as mums in a scalable manner consequently there exists inherent constraints in existing software_tools that we seek to improve upon we have therefore developed a pattern_recognition software called repmaestro that offers scalable and memory conscious algorithms for finding supermaximal repeats mums and tandem_repeats in large genome_sequences on disk our approach similar to the workings of vmatch employs an enhanced sa that is engineered to be accessed and maintained from disk we demonstrate through careful experimental_evaluations that our approach is highly scalable and in many cases faster than vmatch and mummer the analysis of repetitive_sequences plays_a in genome_analysis such repetitive_regions are abundant in genome_sequences and these have been demonstrated to have several practical biological_applications such as in the determination of parentage and in forensics while there are several efficient algorithms available that enable the detection of repetitive_sequences these are mainly restricted to smaller memory resident sequences and therefore can not scale well or operate on large sequences that are stored on disk we have therefore introduced repmaestro a software that implements algorithms that allows us to compute supermaximal repeats mums and tandem_repeats of a large genome_sequence stored on disk in a scalable and memory_efficient manner in most cases we outperform a state of the art memory resident algorithm while simultaneously consuming significantly less and bounded memory this allows repmaestro to be an immediate solution for the problem of rapidly processing large genome_sequences that are many times larger than the available main_memory repmaestro is however dependant on third_party software s to generate the required indexes and so its applicability is subjected to their operational constraints see_supplementary 
