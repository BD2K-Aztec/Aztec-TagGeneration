faster sequence homology_searches by clustering subsequences motivation sequence homology_searches are used in various fields new sequencing_technologies produce huge_amounts of sequence_data which continuously increase the size of sequence_databases as a result homology_searches require large_amounts of computational time especially for metagenomic_analysis results we developed a fast homology_search method based on database subsequence clustering and implemented it as ghostz this method clusters similar subsequences from a database to perform an efficient seed search and ungapped extension by reducing alignment candidates based on triangle inequality the database subsequence clustering technique achieved an fold increase in speed without a large decrease in search sensitivity when we measured with metage nomic data ghostz is times_faster than rapsearch and is times_faster than blastx availability_and the source_code is freely_available for download atdna sequencing_technologies have improved rapidly the hiseq can produce several hundred billion base_pairs bp of sequence_data in a single run and its throughput is times_higher than that of old generation sequencers most sequencers produce information in short fragments reads that range in length from to bp thus it is necessary to determine the location of each read in a genome to use known biological_information even when a reference_genome is available this process is called mapping and many effective mapping programs such as bwa and bowtie have been developed for this purpose in metagenomic_analysis environmental_samples frequently include dna_sequences from many different species and the reference_database often does not contain closely_related genome_sequences thus more sensitive approaches are required to identify novel genes in these samples in a typical metagenomic_analysis reads are translated into protein_coding and assigned to protein_families by running homology_searches against publicly_available databases such as cog and pfam the blastx program is commonly used for such binning and classification searches to identify homologs that may not have high nucleotide sequence_identities blastx translates nucleotide_sequences into protein_sequences because protein_sequences are often more similar than the original nucleotide_sequences however the search speed of blastx has become insufficient for analysis of the large_quantities of sequence_data now available in the evaluation experiment ghostz achieved an fold increase in speed relative to ghostz without clustering this acceleration can probably be attributed to the reduction in the number of ungapped extensions that were required when using ghostz to validate this hypothesis we compared the total number of ungapped extensions required by each method in the database subsequence clustering approach similarity filtering requires comparable computing time to the ungapped extension process therefore we added the number of similarity filterings performed to the number of ungapped extensions we found that the number of ungapped extensions could be reduced to approximately one third of the original number using database subsequence clustering currently ungapped extension is one of the primary bottlenecks in fast homology_searches thus we think that this effective decrease in ungapped extensions contributed to the large acceleration we observed when using subsequence clustering for homology_searches cablastp which is based on a compression approach achieved fold faster processing_speed than the original blastp the acceleration achieved by ghostz was fold faster than the speed of ghostz without clustering which is comparable to that of cablastp however we achieved a processing_speed that was much faster than that of the blast homology_search algorithm as described earlier the compression approach used in cablastp requires high search sensitivity and cannot be applied to faster but less sensitive homology_search algorithms in the initial processing the compression search algorithm needs to find remote_homologs in a coarse database and less sensitive homology_search algorithms often fail to find such sequences in contrast the clustering targets used in our approach are subsequences in a database which does not depend on search sensitivity in addition ghostz uses hamming_distance in database subsequence clustering to measure the dissimilarity between sequences whereas cablastp uses sequence_similarity using distance allows search seeds to be pruned efficiently using triangle inequality in an ungapped extension process contributing to the acceleration in processing ghostz allows the indexes of a database to be constructed anew so that users who wish to use other parameters can use thisnote the first second and third columns show the size of the database chunks the memory required for constructing the index gb and the memory required for the homology_search gb respectively we searched the kegg genes gb database note the first second and third columns show the size of the database chunks the computation time and the acceleration in processing_speed relative to ghostz respectively using gb database chunks we searched the kegg genes gb database we developed a new homology_search algorithm with subsequence clustering we reduced the number of ungapped alignment extensions by clustering subsequences in a database and achieved a fold acceleration in processing_speed without a drop in search sensitivity the algorithm was designed for functional and taxonomic annotation in metagenome analysis the proposed database subsequence clustering method could also be useful in proteome research which requires a huge number of sequence homology_searches 
