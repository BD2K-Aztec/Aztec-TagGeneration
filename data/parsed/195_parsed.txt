genetics_and al c high performance software for parameter_inference using approximate_bayesian motivation the development of approximate_bayesian abc algorithms for parameter_inference which are both computationally_efficient and scalable in parallel_computing environments is an important area of research monte_carlo rejection sampling a fundamental component of abc algorithms is trivial to distribute over multiple processors but is inherently inefficient while development of algorithms such as abc sequential monte_carlo abc smc help address the inherent inefficiencies of rejection sampling such approaches are not as easily scaled on multiple processors as a result current bayesian_inference software offerings that use abc smc lack the ability to scale in parallel_computing environments results we present al c a c framework for implementing abc smc in parallel by requiring only that users define essential functions such as the simulation_model and prior_distribution function al c abstracts the user from both the complexities of parallel programming and the details of the abc smc algorithm by using the al c framework the user is able to scale the abc smc algorithm in parallel_computing environments for his or her specific application with minimal programming overhead availability_and al c is offered as a static binary for linux and os x computing environments the user completes an xml configuration file and c plug in template for the specific application which are used by al c to obtain the desired results users can download the static binaries source_code reference documentation and examples including those in this article by visiting https github com ahstram al c when modeling biological_phenomena the presence of interacting_factors can make the identification of the models parameter distribution intractably complicated creating an incentive to simplify the model rather than risk oversimplifying such a model a numerical estimate of parameter distributions can be obtained using monte_carlo rejection sampling methods by repeatedly simulating data with randomly_chosen parameters and considering the distribution of only those parameters responsible for simulations most similar to the observed data one can make inferences about the models parameter distribution given the observed data when the proposed parameters for rejection sampling are generated from a prior_distribution the process can be classified as an approximate_bayesian abc algorithm as described in due to their reliance on rejection sampling abc algorithms are inherently inefficient while basic abc algorithms can trivially be accelerated by parallelizing simulations more efficient methods of abc are harder to parallelize abc sequential monte_carlo abc smc improves the efficiency of abc with an iterative_method of rejection sampling ultimately requiring less simulations and therefore less computation time due to its sequential nature abc smc is less trivial to parallelize and as a result existing software implementations byallows for the massively_parallel execution of code on graphics_processing gpus although this requires in depth parallel programming knowledge researchers are therefore unable to scale an efficient method of abc on multiprocessor computers or computing clusters without some parallel programming knowledge to address this we present al c an object oriented framework for implementing abc smc in parallel without knowledge of parallel programming we have given two examples in which parameter_inference of biological_models was accelerated with the al c framework the literature on methods and programs for abc inference is broad and there are problems where parallel implementations are optimized to perform well for a narrower class of problems and may be a more appropriate choice such as in systems_biology al c however provides the research_community with the first available general_purpose abc application that allows users to employ parallelized abc smc in any context without knowledge of parallel programming future features for al c may include automatic optimizing of rejection threshold schedules to prevent parameter_estimates from converging to local maxima and gpu support to further parallelize individual simulations 
