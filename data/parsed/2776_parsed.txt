gene_expression magi a node js web_service for fast microrna seq analysis in a gpu infrastructure magi is a web_service for fast microrna seq data analysis in a graphics_processing gpu infrastructure using just a browser users have access to results as web reports in just a few hours end_to performance improvement over state of the art magis salient_features are i transfer of large input_files in native fasta with qualities fastq format through drag and drop operations ii rapid prediction of microrna target_genes leveraging parallel_computing with gpu devices iii all in one analytics with novel feature_extraction statistical_test for differential_expression and diagnostic plot generation for quality_control and iv interactive visu_alization and exploration of results in web reports that are readily available for publication micrornas mirnas are short single_stranded and nonprotein coding rnas with an average size of bases that silence target_genes either by degradation of mrna_level or repression of a translated_protein mirnas have generated great interest by the biomedical community because of their implications in human disease and development the advent_of short_read has enabled comprehensive mirna studies there are several web_services for mirna seq data analysis targeting the needs of non technical users deep_sequencing small_rna analysis_pipeline dsap quantifies known mirnas while miranalyzer computational platform analysis of small_rna deep sequencing_data cpss and waprna perform novel mirna prediction and and enriched pathways in this article we introduce four novel features of magi technical_details are provided in the supplementary_material magi natively accepts large fastq format files as input requiring no additional file processing by the user for instance in with a simple drag and drop into the browser six fastq_files are added to the processing queue using html webworkers that scan over the short_reads and compress each sequence from a gb fastq file down to a mb read_count hash_table file completely within the browser this process makes the processed data small enough to reach our server in just a few seconds the adoption of webworkers technology reduced the end_to analysis time of micrornaseq samples total size gb down to h using a macbook air with ghz dual core cpu gb ram gb hdd comparatively when using omiras the fastq input_file transfer time alone took h miranalyzer and mirtools require file preprocessing that alone took h before uploading them to the web_service magi uses our parallel implementation of miranda a widely used cpu algorithm for mirna target_identification its compute_unified c implementation modifies and parallelizes the smithwaterman_algorithm to return multiple_alignment results with the corresponding trace back sequences plus heuristic rules for mirnas four nvidia m gpu devices gb_memory are installed in our magi server and reduced the prediction time from hours using just the cpu to a few minutes using the gpu devices additionally magi predicts novel mirs using a novel feature_extraction algorithm and random_forest based_classifier in just minutes with mirdeep a widely used novel mir prediction algorithm the prediction module alone took h with the same samples then a list of differentially_expressed between two groups is tabulated using the deseq r package that performs a statistical_test for both known and novel mirnas with multiple samples for quality_control magis web socket module collects diagnostic statistics and plots such as average quality_score length_distribution of trimmed reads and guanine cytosine contents at the time of fastq file drag and drop by a user magi generates d and jquery enabled charts where users can zoom in out mouse over for actual numbers and export them as separate image files tables and pile up charts are interactive as users can sort and filter with different cutoff_values such powerful visualization features enable users to discover signals and patterns 
