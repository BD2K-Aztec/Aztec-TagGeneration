genome_analysis htseq a python framework to work with high_throughput a large choice of tools exists for many standard tasks in the analysis of high_throughput hts_data however once a project deviates from standard workflows custom scripts are needed results we present htseq a python_library to facilitate the rapid development of such scripts htseq offers parsers for many common data_formats in hts projects as well as classes to represent data such as genomic_coordinates sequences sequencing_reads alignments gene model information and variant_calls and provides data_structures that allow for querying via genomic_coordinates we also present htseq count a tool developed with htseq that preprocesses rna_seq for differential_expression by counting the overlap of reads with genes the rapid technological advance in high_throughput hts has led to the development of many new kinds of assays each of which requires the development of a suitable bioinformatical analysis_pipeline for the recurring big tasks in a typical pipeline such as alignment and assembly the bioinformatics practitioner can choose from a range of standard_tools for more specialized tasks and to interface between existing_tools customized scripts often need to be written here we present htseq a python_library to facilitate the rapid development of scripts for processing and analysing hts_data htseq includes parsers for common file_formats for a variety of types of input_data and is suitable as a general platform for a diverse range of tasks a core component of htseq is a container class that simplifies working with data associated with genomic_coordinates i e values attributed to genomic positions e g read_coverage or to genomic_intervals e g genomic_features such as exons or genes two stand alone applications developed with htseq are distributed with the package namely htseq qa for read quality_assessment and htseq count for preprocessing rna_seq alignments for differential_expression calling most of the features described in the following sections have been available since the initial release of the htseq package in since then the package and especially the htseq count script have found considerable use in the research_community the present article provides a description of the package and also reports on recent improvements htseq comes with extensive documentation including a tutorial that demonstrates the use of the core classes of htseq and discusses several important use cases in detail the documentation as well as htseqs design is geared towards allowing users with only moderate python knowledge to create their own scripts while shielding more advanced internals from the user 
