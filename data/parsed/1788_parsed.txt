genome_analysis fastpval a fast and memory_efficient program to calculate very low p values from empirical distribution motivation resampling methods such as permutation and bootstrap have been widely used to generate an empirical distribution for assessing_the of a measurement however to obtain a very low p value a large size of resampling is required where computing speed memory and storage consumption become bottlenecks and sometimes become impossible even on a computer cluster results we have developed a multiple stage p value calculating program called fastpval that can efficiently calculate very low up to p values from a large number of resampled measurements with only two input_files and a few parameter_settings from the users the program can compute p values from empirical distribution very efficiently even on a personal computer when tested on the order of resampled data our method only uses the time used by the conventional method implemented by standard quicksort and binary search algorithms and consumes only of the memory and storage furthermore our method can be applied to extra large_datasets that the conventional method fails to calculate the accuracy of the method was tested on data generated from normal poison and gumbel distributions and was found to be no different from the exact ranking approach availability the fastpval executable file the java gui and source_code and the java web start server with example data and introduction are available atpermutation and bootstrap are resampling procedures to assess_the of a measurement they are non parametric statistical_tests that can convert a measurement score into an empirical p value even when the distribution of the measurements is unknown since resampling does not assume known distribution of the data and biological data are usually complex it has been widely used in the bioinformatics field such as transcription_factor searching pathway analysis and genome_wide to whom correspondence should be addressed finding transcription_factor tfbss in the promoter_region of a gene is important to understand gene_regulation tfbs of a particular transcription_factor are usually represented by a computational_model known as the position_weight pwm to search for a putative binding_site we use the pwm to score dna_sequences with a sliding_window approach for each window we obtain a score by comparing this score with the distribution of the scores from the background we can obtain the statistical_significance empirical p value of this score the empirical background score distribution is obtained by scoring a large set of random_sequences from the intergenic_regions in the genome with the same pwm we then sort the background scores and save them for later usage when we convert a new score into a p value we load the background into the memory and search for the score the ranking of the score is then converted to a p value this empirical approach of calculating p values is very powerful since it does not assume any distribution of the data however the significance of the p value is limited by the size of the background we sample to obtain a very low p value we have to sample a very large dataset from the background the large dataset causes three limitations i sorting and searching in a large dataset are time consuming ii storage of the sorted background scores requires a large amount of hard disk_space and iii processing of the sorted array requires a great_deal of memory which is not usually feasible on a personal computer efficient methods have been developed to relieve the computational_burden resulting from large_scale resampling for example developed a bayesian_approach to dynamically assign resamples for multiple testing problems for microarray_expression they assume that each gene has a different null_distribution and allocate more resamples to the genes with p values close to the classification threshold but for the p values that are far lower or far higher than the threshold and the decisions that are easy to make they allocate much fewer resamples than the traditional method the dynamic resampling allocation strategy has improved the computing efficiency particularly when the number of tests is large while the above_mentioned method deals with the efficiency of multiple tests assuming each test has a different null_distribution p value calculation from resampling based on a single test or multiple tests assuming the same null_distribution is still hampered by computing memory and storage limitations we have developed an efficient program to calculate the empirical p value for a single test or multiple tests assuming the same null 
