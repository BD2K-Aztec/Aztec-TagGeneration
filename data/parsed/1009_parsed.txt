cloud coffee implementation of a parallel consistency based multiple_alignment algorithm in the t coffee package and its benchmarking on the amazon elastic cloud we present the first parallel implementation of the t coffee consistency based multiple aligner we benchmark it on the amazon elastic cloud ec and show that the parallelization procedure is reasonably effective we also conclude that for a web_server with moderate usage k hits month the cloud provides a cost_effective alternative to in house deployment availability t coffee is a freeware open_source package available from http www tcoffee org homepage html contactt coffee was the first package featuring an implementation of the consistency based progressive alignment algorithm for reviews see while the use of consistency is widely_recognized as an important development in the field of multiple_sequence this improvement comes at a cost consistencybased methods have increased cpu and memory_consumption proportional to the number of sequences being processed this overhead is incompatible with the size of the datasets being generated by next_generation heuristic solutions have been proposed that rely on a pre clustering of the sequences but no effort had yet been reported to extensively parallelize consistency based algorithm and benefit from the widely available multi core cpus to our knowledge this report is the first one describing a parallelization of all steps involving consistencybased alignments the new implementation is available from version and higher of t coffee in practice its usage is transparent to the user with the package automatically and explicitly switching to parallel mode whenever multi core processors are available the procedure supports all modes of t coffee for aligning protein o or rna_sequences it runs on all the platforms where the standard t coffee can be compiled and installed windows macosx linux unix etc to whom correspondence should be addressed we benchmarked this new implementation on the amazon elastic cloud ec in order to estimate its efficiency and also measure the cost associated with running this type of application on a cloud environment cloud computation is providing the community with an increasingly popular alternative to in house computational_resources it is therefore becoming an important question to determine the relative cost of these new environments when comparing them with more traditional infrastructures the parallelization procedure presented here should only be considered an initial framework in which more sophisticated schemes could be implemented it relies entirely on the unix fork function with child and parent processes communicating via temporary files for benchmarking purpose this new implementation has been deployed onto the amazon elastic compute cloud ec service http aws amazon com ec the ec is a resource provided by amazon that makes it possible to run software on virtual machines of various sizes the amazon machine image ami used to perform this benchmark is available on http s amazonaws com tcoffee machine x bit version and http s amazonaws com tcoffee machine x bit version we also used this benchmark as an opportunity to assess amazon billing procedure with respect to msa computation the way amazon charges for cpu is complex with the final bill depending on a combination of i o cpu consumption and virtual machines specifications benchmarking was done on the rv subset of balibase version results indicate that the new implementation is effectively taking_advantage of the multi core implementation for instance the medium instance ec computation units ecu runs times_faster than its small counterpart ecu this speedup is observed consistently across all instances although the relative speedup decreases with the largest instances probably owing to the increased i o limiting the speedup for instance with ecu one only obtains of the expected speedup in practice the most widely used public t coffee server is the one running on the vital it platforms http tcoffee vital it ch it delivers roughly jobs a month with an average size close to that of the benchmarks used here maximum number of sequences if replicated on the ec using a dedicated hi cpu extra large instance the cost would be roughly us per year a figure reasonably competitive with the cost of locally installed maintained hardware this suggests that ec based deployment of bioinformatics services is a cost_effective alternative to in house deployment of similar services especially in the case of cpu intensive analysis such as msa computation 
