structural_bioinformatics entropy accelerated exact clustering of protein decoys motivation clustering is commonly used to identify the best decoy among many generated in protein_structure when using energy alone is insufficient calculation of the pairwise distance_matrix for a large decoy set is computationally_expensive typically only a reduced set of decoys using energy filtering is subjected to clustering analysis a fast clustering method for a large decoy set would be beneficial to protein_structure and this still poses a challenge results we propose a method using propagation of geometric constraints to accelerate exact clustering without compromising the distance measure our method can be used with any metric distance metrics that are expensive to compute and have known cheap lower_and will benefit most from the method we compared our methods accuracy against published results from the spicker clustering software on large decoy_sets from the i tasser protein_folding engine we also performed some additional speed comparisons on six targets from the semfold decoy set in our tests our method chose a better decoy than the energy criterion in out of cases versus for spicker our method also was shown to be consistently faster than another fast software performing exact clustering named calibur in some cases our approach can even outperform the speed of an approximate method protein_structure from amino_acid generally involves the search for the lowest energy conformation this is based on anfinsens hypothesis that the native_state of a protein is at the global minimum in free_energy sometimes the predicted structure with the lowest energy might not be the closest to the native_structure due to imperfections in the free_energy function used it has been shown that clustering can be used to identify the best structure among many decoys this is based on the hypothesis that there are a greater number of low_energy surrounding the correct fold than there are surrounding low_energy incorrect folds in order to fold efficiently and retain robustness to changes in amino_acid as well as tolerance to structural perturbations proteins to whom correspondence should be addressed may have evolved a native_structure situated within a broad basin of low_energy the exact clustering_algorithm can be described briefly as two repeating steps first the cluster containing the structure with the maximum number of neighbors within a predefined cutoff value is found second this cluster is removed from the set remaining to be clustered subsequent clusters are found by iterating these steps until the remaining set is empty two of the most successful ab_initio engines rosetta and i tasser use exact clustering in their protocol in the context of protein_folding exact clustering is used to reduce the population of in silico generated models also called decoys at the end of a folding simulation as there is an imperfect correlation between energy_functions used during the folding_process and distance to the native_structure clustering can choose structures that are closer to native better than selecting the lowest energy decoy for a good introduction to clustering the reader is referred to the earliest publication concerning clustering in the context of protein_folding decoy identification seems to be from clustering after energy filtering identified conformations close to the native_structure better than when using energy as the sole selection criterion by using clustering and a variant of rmsd less sensitive to protein length in the scar software betancourt and skolnick could decide if a protein_folding simulation need more sampling of the conformational_space if sampling was enough they could create representative structures of the different fold families that were discovered in the able folding engine ishida et_al used urmsd and kohonens self_organizing in the clustering step of their folding protocol some improvements over results obtained by rosetta were reported to identify the best decoys from protein_folding simulations zhang and skolnick tested their spicker program on protein targets because of the limited computer memory spicker first shrinks the decoy set to k members prior to clustering a good correlation between the cluster density of the biggest cluster and rmsd to native of the cluster representative is shown the construction of a representative decoy for a given cluster in spicker is quite unique it is an average of all the cluster members called a centroid this procedure is reported to improve rmsd to native as opposed to simply choosing the cluster center among cluster members albeit it can create a structure that needs some corrections prior to refinement in of the cases if the highest cluster density a measure of cluster compactness was greater than one of the top five cluster centroids had an rmsd to native below in spicker the cluster cutoff value is refined automatically based on decoys distribution its value is fixed once the first cluster_size has reached a given percentage of the whole decoy set or once a stop value is reached faster clustering of decoys was investigated by li and zhou with scud computing a distance_matrix takes considerable time o n complexity so li and zhou used an upper_bound of rmsd called reference rmsd rrmsd to avoid computing the optimal superposition of many decoy pairs a fold increase in speed over brute_force rmsd based_methods was reported the obtained clusters still had a high similarity to the ones obtained when using rmsd a strong correlation between rmsd and rrmsd was shown scud uses an automatic threshold finding technique that increases the cluster cutoff until the three biggest clusters are statistically meaningful most researchers working on decoy identification are using exact clustering but gront and kolinski used hierarchical_clustering with the hierarchical_clustering of protein models software hcpm http biocomp chem uw edu pl hcpm partitioning of the conformational_space that was sampled during folding is possible hcpm can act as a data reduction filter and create libraries of decoys with a variety of low_energy hcpm was also used to identify structures with a native like topology in the study of folding_pathway by multiscale modeling hcpm incorporates a heuristic to automatically choose a clustering threshold to obtain clusters of reasonable sizes a model that can predict the number of decoys necessary to obtain a given low rmsd value from native was proposed by li the model can also be trained on a few decoys to predict the minimum rmsd that would be present in a larger set of decoys it can also reliably estimate the fraction of decoys in the largest cluster as a function of cutoff value handling large_amounts of decoys should allow us to find higher quality models compared to doing data reduction prior to clustering in calibur http sourceforge net_projects calibur li and ng try to handle quickly large_datasets experiments with several tens_of of decoys are reported as soon as the decoy set is larger than k decoys calibur is faster than spicker the quality of calibur results seems to be better or at least equal to that of spicker caliburs algorithm is a rather intricate assembly of three strategies first outlier decoys detected by a statistical_test are filtered out second cheap to compute lower_and of rmsd are used as much as possible third the metric property of rmsd is used to avoid many distance computations caliburs default strategy for threshold finding is x percentile based and deduced from statistics on the dataset we present here the fastest method to the best of our knowledge to implement exact clustering our method focus on efficient distance_matrix initialization the most time consuming part of exact clustering this initialization step is mandatory in order to enumerate clusters we have implemented our method in a software called durandal in reference to a mighty sword from medieval french legends distance_matrix computation is the most time consuming part of exact clustering it is interesting to look at how the same problem was approached in two different ways by calibur and durandal caliburs algorithm grows clusters stepwise in an online manner caliburs focus is targeted at grouping together proximate decoys so the problem is looked from a spatial_organization viewpoint durandal computes clusters off line once enough information is known regarding distances of all decoy pairs distance information are inserted into the distance_matrix using methods to maximize page the lower clustering threshold for each target was chosen so that the first cluster is statistically_significant calibur and durandal are exact methods while scud is approximate the acceleration rates labeled scud or calibur in the table are the total run time of scud or calibur divided by the total run time of durandal the speed of the procedure durandal attacks the problem using an information centered approach one of the consequences of these different strategies is that calibur does not fully_exploit some of the expensive methods to compute information it collects in calibur some previously computed distances or their bounds are used to avoid computing some more distances but this information does not percolate through all clusters whereas in durandal as long as inserting then propagating new distance information is the fastest strategy information is exploited to the maximum both spicker and durandal implement the same clustering_algorithm however some slight_differences remain both methods use different automatic threshold finding strategies decoy selection technique and energy filtering concerning threshold finding strategy spicker follows a cutoff refinement algorithm while durandal picks a value after some quick sampling of the decoy set durandals way is close to caliburs default threshold finding strategy for decoy selection spicker selects the decoy nearest to the cluster centroid while durandal selects the cluster center as understood in definition moreover durandal clusters full decoy_sets without applying additional energy filtering whereas spicker reduces the decoy set to k decoys maximum using an energy criterion when the energy function is inaccurate durandal may benefit more from the averaging effect of clustering 
