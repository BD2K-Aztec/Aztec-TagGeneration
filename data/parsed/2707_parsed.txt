systems_biology libroadrunner a high performance sbml simulation and analysis library motivation this article_presents libroadrunner an extensible high performance cross_platform open_source library for the simulation and analysis of models expressed using systems_biology sbml sbml is the most widely used standard for representing dynamic networks especially biochemical_networks libroadrunner is fast enough to support large_scale problems such as tissue models studies that require large_numbers of repeated runs and interactive simulations results libroadrunner is a self contained library able to run both as a component inside other tools via its c and c bindings and interactively through its python interface its python application_programming api is similar to the apis of matlab www mathworks com and scipy http www scipy org making it fast and easy to learn libroadrunner uses a custom just in time jit compiler built on the widely used llvm jit compiler framework it compiles sbml specified models directly into native machine code for a variety of processors making it appropriate for solving extremely_large models or repeated runs libroadrunner is flexible supporting the bulk of the sbml specification except for delay and non linear algebraic equations including several sbml extensions composition and distributions it offers multiple deterministic and stochastic integrators as well as tools for steady_state analysis stability analysis and structural analysis of the stoichiometric matrix availability_and libroadrunner binary distributions are available for mac os x linux and windows the library is licensed under apache license version libroadrunner is also available for arm based computers such as the raspberry pi http www libroadrunner org provides online documentation full build instructions binaries and a git source repository contacts dynamic_network models of metabolic gene regulatory protein signaling and electrophysiological networks require the specification of components interactions compartments and kinetic_parameters the systems_biology sbml has become the de facto standard for declarative specification of these types of model popular tools for the development simulation and analysis of models specified in sbml include copasi systems_biology workbench sbw the systems_biology simulation core algorithm tsbsc jarnac libsbmlsim soslib ibiosim pysces and virtualcell some of these applications are stand alone packages designed for interactive use with limited reusability as components in other applications few are reusable libraries currently none is fast enough to support emerging applications that require largescale simulation of network_dynamics for example multi cell virtual tissue simulations often require simultaneous simulation of tens_of of replicas of dynamic_network models residing in their cell objects and interacting between cells in addition optimization_methods require generation of timeseries for tens_of of replica networks to explore the highdimensional parameter spaces typical of biochemical_networks we designed libroadrunner to provide i efficient time series generation and analysis of large or multiple sbml based models ii a comprehensive and logical application_programming api iii interactive simulations in the style of ipython and matlab and iv extensibility most existing sbml simulation engines use built in interpreters to parse and execute sbml model specifications interpreted execution is simple and flexible but much slower than execution of compiled code other simulation engines generate compiled executables from sbml by first converting sbml specified models into a general_purpose language representation the engines then call an external compiler to translate the general_purpose language into an executable shared library to load at run time e g sbwroadrunner in the sbw suite converts sbml into c see of then compiles the c using the built in compiler from the net distribution this approach generates relatively fast executables however it requires distribution of a separate compiler or a redistributable runtime reducing portability a more efficient approach to sbml to executable compilation uses a specialized just in time jit compiler to compile sbml into an optimized intermediate language il representation and the il code into native executable machine code directly in memory used jit compilation to generate cuda code from sbml and execute it on an nvidia gpu libroadrunner and the stochastic_simulation compiler ssc both compile dynamic_network model specifications into executables ssc focusing on stochastic_simulation of rule_based and libroadrunner on sbml specified models libroadrunner supports execution of a broad range of sbml models on cpus using a custom_built jit compiler based on the llvm jit compiler framework which translates sbml into highly optimized executable code for a broad range of processors llvmbased compilers are small so all jit operations occur in memory without external file or compiler access ensuring fast self contained simulations and a relatively small distribution package 
