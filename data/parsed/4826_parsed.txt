using state machines to model the ion_torrent sequencing_process and to improve read error_rates motivation the importance of fast and affordable dna_sequencing methods for current day life_sciences medicine and biotechnology is hard to overstate a major player is ion_torrent a pyrosequencing like technology which produces flowgrams sequences of incorporation values which are converted into nucleotide_sequences by a base_calling algorithm because of its exploitation of ubiquitous semiconductor technology and innovation in chemistry ion_torrent has been gaining_popularity since its debut in despite the advantages however ion_torrent read accuracy remains a significant concern results we present flowgramfixer a new algorithm for converting flowgrams into reads our key observation is that the incorporation signals of neighboring flows even after normalization and phase correction carry considerable mutual_information and are important in making the correct base call we therefore propose that base_calling of flowgrams should be done on a read wide level rather than one flow at a time we show that this can be done in linear time by combining a state machine with a viterbi algorithm to find the nucleotide_sequence that maximizes the likelihood of the observed flowgram flowgramfixer is applicable to any flowgram based sequencing_platform we demonstrate flowgramfixers superior_performance on ion_torrent escherichia_coli data with a improvement in the number of high_quality mapped_reads and a improvement in the number of uniquely mappable reads availability binaries and source_code of flowgramfixer are freely_available at http www cs tau ac il davidgo flowgramfixer html the importance of fast and affordable dna_sequencing methods for current day life_sciences medicine and biotechnology is hard to overstate ion torrents semiconductor sequencing_technology as implemented in its personal genome machine pgm has been gaining_popularity as a fast and affordable sequencing_platform since its debut in semiconductor sequencing has several advantages compared with other high_throughput including lack of optics use of natural unmodified dntp molecules and exploitation of ubiquitous semiconductor technology these advances make ion_torrent a serious player in the sequencer market providing reads several hundred bases long and reducing sequencing_costs ion_torrent is a pyrosequencing like platform similar to in every sequencing step or flow the chip is washed over with a specific nucleotide the nucleotide in the flow is incorporated by all consecutive complementary nucleotides hanging at the end of each templatethis is called incorporation each incorporation releases an ion so that the change in ph level indicates whether incorporation occurred and if so the number of consecutive bases incorporated the nucleotide that is washed during each flow is pre determined and is composed from several repetitions of a shorter sequence of nucleotides known as the wash cycle the default wash cycle for is nt_long tacg whereas ion torrents pgm uses a more complicated wash cycle that is nt_long the resulting read is then specified in terms of a flowgrama sequence of incorporation values one for each flow gives an overview of the process despite its advantages ion_torrent read accuracy remains a significant concern errors are produced during base_calling a process by which the noisy signal from the sequencer is converted into a sequence of nucleotides base_calling errors can especially pose_challenges for re sequencing_projects where they can be confused with snps in fact a recent comparative_study found that ion torrents pgm still suffers from high_false in snp_calling relative to illumina data there is a large body of work on base_calling algorithms seefor a survey and there have been several techniques developed specifically for pyrosequencing_data these techniques have mostly focused on correcting s well documented errors in long homopolymer runs or alignment of their flowgrams however there has been little work done in correcting base_calling errors in ion_torrent data ion torrents base_calling algorithm after performing phasecorrection and normalizing to handle signal decay simply translates the rounded values of each flow into the corresponding number of consecutive nucleotides in essence it is a memoryless algorithm that makes a call for each flow independent of information from previous or following flows our key observation is that the signals of neighboring flows carry considerable mutual_information and are important in making the correct base call we propose that base_calling of flowgrams should be done on a read wide level rather than one flow at a time to this end we design a linear time method that combines a state machine with a viterbi algorithm to find the nucleotide_sequence that maximizes the likelihood of the observed flowgram our algorithm is applicable to any flowgram based sequencing_platform and is implemented in a publicly_available tool called flowgramfixer we demonstrate flowgramfixers superior_performance on ion_torrent escherichia_coli data with a improvement in the to whom correspondence should be addressed the author published_by this is an open_access the terms of the creative_commons http creativecommons org_licenses which permits non commercial re use distribution and reproduction in any medium provided the original_work for commercial re use please_contact permissions_oup com number of high_quality mapped_reads and a improvement in the number of uniquely mappable reads we demonstrate our method using a publicly_available dataset from ion torrents webpage namely c c is a resequencing experiment of e coli dh b using the pgm with an ion chip we extracted the normalized and phase corrected incorporation signals from the sff files the file contained flowgrams and gb respectively the pgm was run using a wash cycle of bases tacgtacgtctgagcatcgatcgatgtacagc and used flows we note this is the default ion_torrent wash cycle we first ran the default calling algorithm which is equivalent to rounding the signals in the sff file we use this algorithm as a baseline for our comparisons we then ran flowgramfixer which took h on a single_cpu xeon e ghz with inconsequential memory use mb this run included a preliminary step of estimating the optimal noise model_parameters for a subset of flowgrams using a greedy_algorithm computing the mean intercept and trend and running the viterbi on the entire dataset using the mean parameters to ensure reproducibility the subset of flowgrams we used originated from a by wells region from the chip which were pre specified by ion_torrent and available on their website as an exploratory dataset the mean intercept and trend were and respectively the output of each algorithm is a list of integer valued flowgrams which we converted to reads and aligned to the reference with bowtie using default_parameters first we compared the number of uniquely aligned_reads the baseline rounding method yielded uniquely_mapped whereas flowgramfixer yielded an increase of reads second we counted how many reads hard clipped at bp were mapped uniquely with highmapping quality flowgramfixer outperformed the baseline rounding method for all quality thresholds with a increase in the number of high_quality aligned_reads we wanted to study the effect of the position along the wash cycle on error_rates for each flowgram corrected by the baseline method we converted the aligned to part of the reference_genome to a flowgram and noted the flow positions that had a mismatch we then averaged the error_rates of flows that are identical mod the length of the wash cycle it is evident that different positions along the wash cycle display remarkably different error_rates this can partially be explained by patterns in the wash cycle for example positions contain the nucleotides t c and t because of the first t the probability of observing incorporation at the second t is much lower therefore more flows have no incorporations as no incorporations are easier to call the error_rate at the second t is much lower as well a similar situation occurs at positions containing t g and t positions and are highlighted in red in the opposite effect can also be observed such as the a at position as there is a large_gap between the appearance of the previous a position there is a higher probability of incorporation and hence of error a similar situation occurs with the c at position these positions are highlighted in green in next we investigated the dependence of the error_rate on the flow position the average error_rates per flow of the rounding algorithm are portrayed in it is clear that the vast_majority of errors occur at the ends of the flowgrams and that such a high_error renders the ends of ion_torrent reads useless as this is the case for most if not all high_throughput most real_life applications involve a step of clippingremoving the end of each readeither by setting a pre defined length hard clipping or using a reference_genome to determine the optimal_cut soft_clipping we therefore applied soft_clipping to the end of each read using bowtie using the local parameter and re estimated theposition within wash cycle average error_rate we have focused on developing a general inference framework without making it overly reliant on the current intricacies of ion torrents platform however there are several possible extensions that although making the approach less robust to technology changes could improve its performance on todays datasets we discuss several such ideas later in the text our noise model relies on a intercept and trend model for the standard_deviation sd parameter one might suggest richer models including more complicated dependency of the sd on the flow_index dependency of the sd on the number of incorporated nucleotides and a dependency on the position along the basic nt wash cycle we briefly experimented with these ideas and were not able to find a richer model that improved the results while maintaining a reasonable running time however exploring these ideas further seems worthwhile additionally we suggest that additional accuracy gains might be gained by adding a spatial_structure to the noise model as nearby wells experience similar artifacts during the sequencing_process g t c t g a g c a t c g a t c g a t g t a c a g c t a c g t a c g t c t g a g c a t c g a t c g a t g t a c a g c t a c g t a c g t c t g a g c a t c g a t c g a t g t a c a g c t a c g t a c g t c t g a g c a t c g a t c g a t g t a c a g c t a c g t a c g tfig error_rate difference between the rounding method and flowgramfixer baseline error_rate flowgramfixer error_rate the average difference of error_rate grows as the sequencing_process progresses as expected because of the noisier signal obtained at later flows although at some flows the error_rate decreases by as much as at other flows the error_rate actually increases interestingly the error_rate difference also displays a dependency on the position in the wash cycle per flow error_rates of the rounding algorithm using soft_clipping as expected the error_rate increases as the sequencing_process progresses even after clipping the dependency of the error_rate on the position in the wash cycle is also evident similarly to flows that are th or th within a cycle marked red display a considerably_lower error_rate whereas flows that are th within a cycle marked green display considerably_higher error_rates t a c g t a c g t c t g a g c a t c g a t c g a t g t a c a g c t a c g t a c g t c t g a g c a t c g a t c g a t g t a c a g c t a c g t a c g t c t g a g c a t c g a t c g a t g t a c a g c t a c g t a c g t c t g a g c a t c g a t c g a t g t a c a g c t a c g t a c g t c t g a g c a t c g a t c g a t g t a c a g c t a c g t a c g t c t g a g c a t c g a t c g a t g t a c a g c t a c g t a c g t c t g a g c a t c g a t c g a t g t a c a g c t a c g t a c g t c t g a g c a t c g a t c g a t g t a c a g c t a c g t a c g t c t g a g c a t c g a t c g a t g t a c a g c t a c g t a c g t c t g a g c a t c g a t c g a t g t a c a g c t a c g t a c g t c t g a g c a t c g a t c g a t g t a c a g c t a c g t a c g t c t g per flow error_rates of the default calling algorithm used as a baseline for comparison the error_rate clearly increases with the flow number with a dramatic_increase beginning around flow i although we are encouraged by the results of flowgramfixer presented here we recognize the quick pace at which technology evolves as ion_torrent continues to improve its sequencing_technology e g its new ion proton sequencing_platform it is likely that important parameters such as the wash cycle will evolve and the specific error profiles we observe today will evolve as well however we believe our major innovation that inference should and could be done efficiently on the whole flowgram rather than flow by flowwill remain relevant for any future flowgram based technology such technologies have been a major workhorse of the scientific_community for several years and it is likely they would remain relevant in upcoming years 
