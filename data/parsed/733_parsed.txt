genome_analysis binary interval search a scalable algorithm for counting interval intersections motivation the comparison of diverse genomic_datasets is fundamental to understand genome biology researchers must explore many large_datasets of genome intervals e g genes sequence_alignments to place their experimental_results in a broader context and to make new discoveries relationships between genomic_datasets are typically measured by identifying intervals that intersect that is they overlap and thus share a common genome interval given the continued advances in dna_sequencing efficient methods for measuring statistically_significant between many sets of genomic_features are crucial for future discovery results we introduce the binary interval search bits algorithm a novel and scalable approach to interval set intersection we demonstrate that bits outperforms_existing at counting interval intersections moreover we show that bits is intrinsically suited to parallel_computing architectures such as graphics_processing by illustrating its utility for efficient monte_carlo measuring the significance of relationships between sets of genomic_intervals availability https github com arq x bits searching for intersecting intervals in multiple sets of genomic_features is crucial to nearly all genomic_analyses for example interval intersection is used to compare chip enrichment between experiments and cell_types identify potential regulatory_targets and compare genetic_variation among many individuals interval intersection is the fundamental operation in a broader class of genome arithmetic techniques and as such it underlies the functionality found in many genome_analysis software_packages as high_throughput have become the de facto molecular tool for genome biology there is an acute need for efficient approaches to interval intersection microarray techniques for measuring gene_expression and chromatin_states have been largely supplanted by sequencing based techniques and whole exome and whole_genome experiments are now routine consequently most genomics laboratories now conduct analyses including datasets with billions of genome intervals experiments of this size require substantial computation time per pairwise_comparison moreover typical analyses require comparisons with many large sets of genomic_features where set size refers to the number of intervals in the set existing_approaches scale poorly and are already reaching their performance limits we therefore argue the need for new scalable algorithms to allow discovery to keep pace with the scale and complexity of modern datasets in this manuscript we introduce the binary interval search bits algorithm as a novel and scalable solution to the fundamental problem of counting the number of intersections between two sets of genomic_intervals bits uses two binary searches one each for start and end coordinates to identify intersecting intervals as such our algorithm executes in n log n time where n is the number of intervals which can be shown to be optimal for the interval intersection counting problem by a straightforward reduction to element uniqueness known to be n log n in contrast counting intersections by enumeration is less efficient as enumerating intervals requires time m n log n where m is the number of intersections that can be quadratic to the input size we illustrate that a sequential version of bits outperforms existing_approaches and show that bits is intrinsically suited to parallel architectures the parallel version performs the same amount of work as the sequential version i e there is no overhead which means the algorithm is work efficient and because each parallel thread performs equivalent work bits has little thread divergence although thread divergence degrades performance on any architecture finished threads must wait for overburdened threads to complete the impact is particularity acute for graphics_processing gpus where threads share a program counter and any divergent instruction must be executed on every thread we have developed a novel algorithm for interval intersection that is uniquely_suited to scalable computing architectures such as gpus our algorithm takes a new approach to counting intersections unlike existing_methods that must enumerate intersections to derive a count bits uses two binary searches to directly infer the count by excluding intervals that cannot intersect one another we have demonstrated that a sequential implementation of bits outperforms existing_tools and illustrated that bits is task efficient and highly parallelizable bits is also memory_efficient our mc simulation required mb of random_access and the sequential implementation consumed mb of random_access versus mb for ucsc and mb for bedtools we show that a gpu_implementation of bits is therefore a superior solution for mc analyses of statistical relationships between genome intervals sets given the efficiency with which the bits algorithm counts intersections it is also well suited to other genomic_analyses including rna_seq transcript quantification chip_seq peak_detection and searches for copy_number and structural_variation moreover the functional and regulatory data produced by projects such as encode have led to new approaches for measuring relationships among genomic_features we recognize the importance of scalable approaches for detecting such relationships and we anticipate that our new algorithm will foster new genome mining tools for the genomics community 
