correcting errors in short_reads by multiple_alignments motivation current_sequencing produce a large number of erroneous reads the sequencing_errors present a major_challenge in utilizing the data in de_novo sequencing_projects as assemblers have difficulties in dealing with errors results we present coral which corrects sequencing_errors by forming multiple_alignments unlike previous tools for error_correction coral can utilize also bases distant from the error in the correction process because the whole read is present in the alignment coral is easily adjustable to reads produced by different sequencing_technologies like illumina_genome and roche life_sciences sequencing_platforms because the sequencing error_model can be defined by the user we show that our method is able to reduce the error_rate of reads more than previous methods availability the source_code of coral is freely_available atnext generation sequencing_technologies such as illumina_genome applied_biosystems solid and roche life_sciences dna sequencing_platforms produce a vast amount of reads in a single run vagaries of the reads produced by each sequencing machine are still being discovered correction of errors in short_reads is a critical task in bioinformatics the variety of errors and biases of the current sequencing_platforms must be addressed if the data is to be used to maximum effect error_correction aims to revert these mistakes made by a sequencing_platform by exploiting the redundancy of the data and judging each base in a read as correct or incorrect and then ideally correcting it error_correction helps to achieve high data use in de_novo furthermore the computational_demands of assembly algorithms are reduced significantly if reads are first corrected although we evaluate here the impact of error_correction on de_novo the technique could also be useful in other applications because error_correction can potentially increase the mappability of reads in resequencing as well as in other applications of high_throughput to whom correspondence should be addressed error characteristics of the different platforms are complex making error_correction a difficult_task for instance the roche sequencing_platform produces reads with indel_errors due mainly to homopolymers whereas the solid and illumina platforms are prone to substitution_errors investigate quality_score evolvement error characteristics and biases of short_sequencing the first error correction_method that is aimed at short_read datasets is built into the assembly tool euler sr it uses the spectral alignment_method which first establishes a spectrum of trusted k_mers from the input_data and then corrects each read so that it contains only sequences from the spectrum shrec byfollowed a stand alone error correction_method shrec is based on a parallelized suffix trie data_structure that holds a set of reads and corrects errors with a majority_voting scheme shrec was extended by salmela to accommodate hybrid sets of reads from various sequencing_technologies with different read_lengths and error characteristics hitec byuses a suffix_array of the reads to count how many times short_sequences are present in the read set and use these counts to correct the reads the approach byrevisits the idea of chaisson and pevzner by overlaying reads with trustworthy tiles pairs of k_mers and correcting differences between the reads and the tiles to obtain error corrected read sets quake byis another recent method that relies on spectral alignments to correct reads in this article we present coral correction with alignments a novel approach which relies on multiple_alignments of short_reads to correct errors in the data the idea of using multiple_alignments for correcting sequencing_reads is not new for example the preprocessing in the arachne assembler and the mised error_correction tool use multiple_alignments to correct reads from the older sanger technology our new tool is the first to apply this approach to short_read most of the recent error_correction tools are aimed at reads from the illumina_genome platform and therefore they are limited to correcting substitutions which is the dominant error type in illumina_reads coral is easily adjustable to different error models of the various sequencing_platforms furthermore adjusting the error_model is easily_accessible to the end_user who only needs to set the familiar parameters of multiple_alignments gap penalty and mismatch penalty to appropriate values according to the error_model for example for illumina_reads one needs to set the gap penalty to a high value effectively disallowing indels whereas onethe aims of the experiments were fold first we measured the quality of correction and its effect on subsequent assembly secondly the computational resources_required for the new method were compared to alternative_approaches shrec quake and reptile experimental_setup for testing we used the datasets listed in unlike in other publications on the topic we consider only real sequencing_data and no simulated reads we believe that none of the available read simulators can grasp the true characteristics of next_generation and thus observations on simulated_data may be invalid all tests were conducted on an otherwise idle amd opteron machine with ghz cpus gb main_memory and k l cache the operating system was ubuntu linux version lts the compiler was g gcc version executed with the o option times given are the average of two runs and were recorded with the linux unix time command to test the performance of the short_read error_correction tools under investigation we first have to distinguish correct from erroneous bases in the experimental_data we accomplish this by mapping the reads to their respective references and defining mismatches and indels as errors in the sequence_reads this is common practise as can be seen in the publications by however this method bears risks since genomic_variants such as snps can be defined as errors and ambiguously mapping reads can lead to false classifications of bases as well this is a general_problem with short_read for applications like error_correction assembly or mapping since the actual genomic_sequence is hardly ever known as that is the target of discovery to minimize the risk of false classification we only consider uniquely mapping reads for our experiments also this disadvantage is the same for all of the tested methods we used soap byfor mapping the illumina_reads and shrimp byto map the roche reads we can then assess the performance of an error correction_method by identifying how many of the alleged errors in the data it can correct from these numbers other statistics like specificity sensitivity or gain can be inferred which will be explained below such statistics however are not entirely satisfactory to assess the quality of corrections of a method because it is unclear which statistic when optimized will indeed yield the best performance for other applications depending on the data since error_correction of short_read really is a preprocessing_step for other applications like assembly we assess performance on the impact on this key page the runtime is given as total runtime and cpu time where applicable application for short_read for this purpose we choose edena by a well established short_read assembler to run on the corrected read sets bullet coral standard parameters with the appropriate configurations with regards to the sequencing_platforms illumina note that we did not explore the parameter_space to obtain optimal results for any of the error_correction methods in reality when working on a read set fresh off a sequencing_platform there is no immediate feedback for the user to identify good or bad error_correction which makes parameter choices hard for this reason we ran the tools with a best guess kind of configuration to make it more indicative of a real application for shrec this meant adjusting the cutoff value c for coral standard parameters and for reptile standard configuration as well since it estimates all the important statistics by itself statistical error_correction performance to assess the accuracy of the different methods by numbers we identify the above four categories of error classification and then deduct the following statistics bullet sensitivity tp tp fn the sensitivity towards erroneous bases bullet gain tp fp tp fn as introduced by a statistic to combine the two intuitions of removing errors without introducing additional ones 
