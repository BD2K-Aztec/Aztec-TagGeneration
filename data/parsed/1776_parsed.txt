systems_biology fastmedusa a parallelized tool to infer gene_regulatory motivation in order to construct gene_regulatory of higher organisms from gene_expression and promoter sequence_data efficiently we developed fastmedusa in this parallelized version of the regulatory_network modeling tool medusa expression and sequence_data are shared among a user_defined number of processors on a single multi core machine or cluster our results show that fastmedusa allows a more efficient utilization of computational_resources while the determination of a regulatory_network of brain_tumor in homo_sapiens takes days with medusa fastmedusa obtained the same results in h by utilizing processors availability source_code of fastmedusa are available at https wiki nci nih gov display nobbioinf fastmedusa contact among the numerous ways to determine gene_regulatory of higher organism medusa is a well known and powerful computational_tool utilizing a boosting algorithm medusa models promoter_sequences and gene_expression data from various experimental_conditions providing a global predictive_model of condition specific expression states of target_genes medusa has been successfully used to discover novel regulators in oxygen and heme regulatory_networks in saccharomyces_cerevisiae although medusa is a powerful computational_tool for inferring_gene it has certain limitations medusa requires the commercially_available software_package matlab in addition the execution time of medusa increases dramatically with larger sizes of input data_sets for example medusa needed weeks for the modeling and analysis of about genes using iterations parallel_computing has been used to solve the latter problem for several bioinformatics applications to date here we introduce fastmedusa a fast parallelized open_source implementation of medusa in c that uses freely_available libraries our benchmark results showed thatwe tested the performance of fastmedusa and medusa by controlling for the number of iterations and the number of processors used specifically we defined the performance increase of fastmedusa utilizing i iterations and n processors where t is the execution time the results on the yeast and human data_sets show that fastmedusa consistently outperforms medusa for instance medusa takes about days to analyze the human glioma data_set utilizing iterations whereas fastmedusa analyzes the same data_set and obtains the same adts in about h utilizing processors fastmedusa is also about faster than medusa in serial mode the slope of the performance increase reduces for increasing computing_resources because of the increase in the cost of inter process communications 
