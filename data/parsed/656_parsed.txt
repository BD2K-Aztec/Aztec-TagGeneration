genome_analysis bamtools a c api and toolkit for analyzing and managing bam_files motivation analysis of genomic sequencing_data requires efficient easy to use access to alignment results and flexible data management_tools e g filtering merging sorting etc however the enormous amount of data produced by current_sequencing is typically stored in compressed binary formats that are not easily handled by the text_based parsers commonly used in bioinformatics_research results we introduce a software_suite for programmers and end_users that facilitates research analysis and data management using bam_files bamtools provides both the first c api publicly_available for bam_file support as well as a command_line toolkit availability bamtools was written in c and is supported on linux mac osx and ms windows source_code are freely_available github org pezmaster bamtools the genomes_project created the sequence_alignment sam format and its sister format the binary alignment map bam to provide a generic and modular approach to the analysis of genomic sequencing_data such formats are necessary to provide a standardized vehicle for reporting alignment results and analyzing them using a wide_variety of tools the binary compressed nature of bam has made it the format of choice in many large_scale sequencing projectswhere the text_based sam does not scale to the massive_amounts of data produced however storing the data in binary compressed form comes at a cost as well casual programmers and end_users can no longer use the text_based parsing techniques to which they are typically accustomed apis and tools that can accomplish similar tasks while managing bams more complex data storage behind the scenes are vital to genomics researchers bamtools is a flexible efficient and easy to use suite designed to serve just these sorts of operations we tested the raw read through time on a bam_file containing the reads from ceu samples from the genomes low coverage pilot_project resulting in fold coverage of chromosome it took on average min to read every alignment sequentially from this file on a single_cpu corresponding to h for a whole_genome file at the same coverage resource usage is ultimately application dependent however the basic process of reading alignments from bam_files is i o bound rather than cpu bound 
