data_and campaign an open_source library of gpu accelerated data clustering_algorithms motivation data clustering techniques are an essential component of a good data analysis toolbox many current bioinformatics applications are inherently compute intense and work with very large_datasets sequential algorithms are inadequate for providing the necessary performance for this reason we have created clustering_algorithms for massively_parallel architectures including gpu nodes campaign a central resource for data clustering_algorithms and tools that are implemented specifically for execution on massively_parallel processing architectures results campaign is a library of data clustering_algorithms and tools written in c for cuda for nvidia gpus the library provides up to two orders_of speed up over respective cpu based clustering_algorithms and is intended as an open_source resource new modules from the community will be accepted into the library and the layout of it is such that it can easily be extended to promising future platforms such as opencl availability releases of the campaign library are freely_available for download under the lgpl from https simtk org home campaign source_code can also be obtained through anonymous subversion access as described on https simtk org scm group id data clustering_algorithms have been useful in many fields of computer science and are of ever increasing importance in the life_sciences for instance data analysis in modern day biology and bioinformatics often involves the extraction of patterns from diverse sources such as gene_expression data and protein_structures this can require substantial_amounts of processing time putting a limit on the amount and quality of information that can be derived in reasonable time to allow the development of more sophisticated analysis protocols we present clustering_algorithms for massively_parallel architectures including gpu nodes campaign a library of gpu accelerated clustering to whom correspondence should be addressed algorithms for large_scale datasets equipped with an initial set of tools and gpu ports of well established algorithms including k means k centers and hierarchical_clustering campaign is intended to form the basis for devising new parallel clustering codes specifically tailored to the gpu and other massively_parallel architectures the c for cuda parallel_computing platform from nvidia provides a framework for accessing cuda enabled graphics cards the c like syntax facilitates writing and maintaining code we thus chose nvidias cuda parallel_computing engine for developing the first release of the library providing the code as individual modules allows easy modification and extensibility for example by future modules using opencl we executed the parallel clustering codes on a single nvidia tesla c gpu and compared the results with the serial versions running on one core of an intel_xeon e ghz cpu we obtained performance_improvements of one to two orders_of for the campaign gpu codes over sequential cpu reference implementations performance_improvements over popular software_packages such as matlab were up to three orders_of in terms of accuracy we find that for k means k centers k medoids and hierarchical_clustering outputs for the different variants match closely with exception of machineprecision related rounding errors whereas for self organizing map initial minor differences in rounding between two architectures are greatly amplified in successive steps we tested the algorithms with a biological dataset a selection of gene array measurements of human genes from ncbi geo a number of performance_comparisons are summarized in although there is substantial interest in fast clustering_algorithms previously_published implementations are in most cases not readily available as either binaries or source_code this lack of availability hinders the evolution and incremental improvement of algorithms in addition such black_box implementations can be frustrating to use or understand and cannot be customized besides offering ready to use implementations of gpu based clustering_algorithms campaign can serve both as a readily available benchmark against which to test future implementations of such algorithms as well as a seed for the creation of a more exhaustive library of clustering codes the current library is limiting the size of usable datasets to the amount of memory available on the gpu such as gb in case of the tesla gpu used here for testing with less memory available on more low end graphic cards we have introduced campaign an open_source library of data clustering_algorithms and tools that aims to grow through contributions by the scientific and technical communities the first batch of algorithms distributed with the initial release of the library offers one to two orders_of speed up as compared with cpu reference implementations 
