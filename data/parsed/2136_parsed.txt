gsa lightning ultra_fast permutation_based gene_set the computational speed of many gene_set can be slow due to the com putationally demanding permutation step this article introduces gsa lightning a fast implementation of permutation_based gene_set gsa lightning achieves significant speedup compared with existing_methods particularly when the number of gene_sets and permutations are large availability_and the gsa lightning r package is available on github at https github com billyhw gsalightning and on r bioconductor the package also contains a comprehensive users guide with a step_by tutorial vignette gene_set embodies a range of techniques for analyzing the functional and biological_properties of differentially_expressed one common type of gene_set method termed selfcontained method tests whether genes within a predefined gene_set are collectively differentially_expressed across two different experimental_conditions the gene_sets significance is typically assessed through permutation_testing due to the computationally_demanding permutation_tests the speed of permutation_based gene_set is often compromised there is a need to address this computation issue particularly when performing large_scale analysis as an example for a genome_wide of target_genes of regulatory_elements the number of gene_sets each set being the target_genes of a regulatory_element can reach tens_of if there areexpression measurements and the gene_set statistics are functions of the mean of the individual statistics all these quantities can be computed efficiently using matrix products also it is actually possible to perform the permutations using matrix products the online supplementary_materials provide_details on how this can be done speed and memory_efficiency are further increased by using sparse matrix computations whenever possible when the number of permutations is large gsa lightning breaks the permutations into batches each batch is handled separately and then combined to obtain the final results the online supplementary_materials provide further details and also contain a justification of the equivalence between gsa lightning and gsa by comparing the two methods program outputs this justifies that gsa lightning does not sacrifice gsas accuracy in order to achieve the speedup only methods with r implementations were compared to ensure hardware independent results focusing on permutation_based twosample testing non permutation based_methods were not compared gsa lightning with the maxmean option and restandardization was compared with six other methods using their default options unless stated otherwise these methods were gsa with the maxmean option and restandardization gseattperm from the r bioconductor_package category the self contained version of sigpathway safe globaltest and padog all analyses were performed using a macbook pro with a ghz intel core i processor and gb ram the gene_sets used were the target_genes of distal regulatory_elements from with three or more target_genes the breast_cancer data_set from the cancer_genome the cancer_genome research downloaded using the elmer r bioconductor_package was used as the gene_expression data the data_set contained gene_expression measures for controls and patients after removing genes without matching gene symbols and or with sample variance genes remained for further analysis three speed trials were performed to examine the speed of the various methods first the number of gene_sets was fixed at and the number of permutations varied from to second the number of permutations was fixed at and the number of gene_sets varied from to the third trial mimics a more realistic scenario the numbers of gene_sets were the same as in the second trial but the number of permutations varied according to no genesets this number of permutations ensured accurate p value estimation even after multiple correction at significance_level only gsa lightning sigpathway and globaltest were tested in this trial as the other methods were too slow here presents the results gsa safe and padog were not run for number of permutations and gseattperm was not run for permutations since these methods were too slow also sigpathway and globaltest encountered memory issues when the numbers of permutations were respectively and in the first trial and when the number of gene_sets was in the third trial and hence were not performed there gsa lightning was faster than all other methods in particular suggests that gsalightning was the only method that could analyze large_amounts of gene_sets with a large number of permutations within reasonable time in the experiments above the maximum ram usage for gsalightning was gb a speed comparison between the different gene_set statistics with or without restandardization for gsa lightning and gsa is provided in the online supplementary_materials note that all the methods compared earlier are based on different test_statistics the results and sensitivity of these methods will therefore be different depending on the data_set and the methods assumptions nevertheless a recent review considered gsa with the maxmean statistics one of the better gene_set by virtue of gsas strengths a fast version of gsa is worth developing also a detailed speed comparison would involve comparing separately the speed for calculating the individual gene statistics the gene_set statistics and the permutation such comparison is beyond the scope of this article still for large_scale gene_set the results above suggest that gsa lightning is the only possible option among the methods compared altogether gsalightning is a tool capable of performing large_scale gene_set with statistical_power guarantee 
