systems_biology xip a computational environment to create extend and share workflows xip extensible integrative pipeline is a flexible editable and modular environment with a user_friendly interface that does not require previous advanced programming_skills to run construct and edit workflows xip allows the construction of workflows by linking components written in both r and java the analysis of high_throughput data in grid engine systems and also the development of customized pipelines that can be encapsulated in a package and distributed xip already comes with several ready to use pipeline flows for the most common genomic and transcriptomic_analysis and computational components large_scale sequencing and microarray_technologies are high_throughput methodologies that generate huge genomic and transcriptomic_data that must be processed in a multi_step fashion usually it is carried_out by several distinct programs that are interconnected in a specific order forming a workflow process namely pipeline for example a simple workflow to investigate genes potentially related to cancer might begin with microarray image_analysis normalization statistical_tests to_identify between the normal and the tumor_tissues followed by a multiple test p value correction have described that pipelines must satisfy at least three characteristics i flexibility a software can be used to analyze different data_sets that may require different analysis tools ii integrability a system should provide the framework to facilitate data_integration of analysis results from different tools and iii extensibility a system needs to allow for the inclusion of new tools in a modular fashion in addition to these characteristics that are actually necessary to a pipeline we believe that the portability with grid engines and the interoperability with pre existing_systems are also important in this new era of generation of high_throughput data the portability with grid engines makes possible to run heavy routines in supercomputers hundreds of cores in an easy manner while the interoperability allows the use of workflows constructed under different platforms to facilitate the construction of workflows we present xip extensible integrative pipeline a free under the lesser general_public lgpl and easy to use environment designed to integrate the state of the art computational_methods and to satisfy researchers need in multi collaborative projects carried_out in different laboratories to guarantee both reproducibility and quality the construction of a computational_pipeline under the xip platform does not require advanced computer programming_skills at there is a list of components and a tool to search for a specific algorithm to build a workflow the user clicks on the component of interest and drags and drops on the canvas the order of analysis in the pipeline is set according to the order of the components defined by the arrows of the workflow the tail of the arrow represents from which component the data comes and the head points to the next analysis step in other words the direction of the arrows indicates the data flow the parameters of each component can be easily set up by using the graphical_interface illustrated on and the results are visualized in separate windows as shown in xip satisfies the three essential characteristics for a pipeline platform and also the fourth portability to grid engines and fifth interoperability described in section as follows flexibility the specific requirements of a research_project make it difficult to use a pipeline designed for a particular data_set for analysis of another data_set as a result two different pipelines must be constructed both sharing several common components however notice that it is not necessary to reconstruct the entire pipeline but only the different parts as the pipelines constructed by xip are modular i e the pipelines are composed of an ordered sequence of components one must replace only the different components to adapt the pipeline to a new data_set integrability components written in both r and java programming_languages run on xip internally xip translates the r data_structures into java structures thus allowing the connection of packages available at the r webpage http www r project org and the biojava project extensibility r and java functions developed by different groups can automatically be translated to a xip component and included in the platform therefore xip can be customized and extended with several components depending on the users necessities portability to grid engine the analysis of large_amounts of data generated by the new technological approaches in molecular_biology requires high performance computational_resources the xip platform allows the construction of pipelines that use grid engines to parallelize computational jobs to run a parallel job the user must set up a cluster server with several cores and log in to this remote server the integration with grid engines makes xip suitable for individual researchers with modest data sizes as well as for big collaborative projects with large_amounts of data interoperability owing to several different pipeline platforms available in the literature such as pegasus kepler and galaxy each one with unique advantages it would be interesting whether one platform could integrate components developed in different environments xip satisfies the interoperability by converting the components developed in the galaxy platform to an xip component interoperability with other systems is under development once a pipeline is constructed it can be distributed in both a xip xml format and a jar file the xip xml is a markup_language that stores the pipeline structure i e the information about how the components are interconnected the jar format is a closed stand alone package that runs in a computational and the cso validator other examples can be found at the xip webpage summing up the main advantages of xip are i it satisfies all the five characteristics for a pipeline platform ii components developed in the galaxy platform can be converted to xip components and iii stand alone packages created under xip can be run outside the xip environment the entire code is open and we encourage researchers to contribute with novel functionalities for the xip platform 
