an efficient parallel algorithm for accelerating computational_protein motivation structure based computational_protein scpr is an important topic in protein_engineering under the assumption of a rigid backbone and a finite set of discrete conformations of side_chains various methods have been proposed to address this problem a popular method is to combine the dead_end elimination dee and a tree search algorithms which provably finds the global minimum energy conformation gmec solution results in this article we improve the efficiency of computing a heuristic functions for protein design and propose a variant of a algorithm in which the search_process can be performed on a single gpu in a massively_parallel fashion in addition we make some efforts to address the memory exceeding problem in a search as a result our enhancements can achieve a significant speedup of the a based protein design algorithm by four orders_of on large_scale test data through pre computation and parallelization while still maintaining an acceptable memory overhead we also show that our parallel a search algorithm could be successfully combined with imindee a state of the art dee criterion for rotamer pruning to further improve scpr with the consideration of continuous side chain flexibility availability our software is available and distributed open_source under the gnu lesser general license version gnu february the source_code can be downloaded fromstructure based computational_protein scpr provides a promising tool in a wide_range of protein_engineering applications such as drug_design enzyme synthesis drug_resistance prediction and design of proteinprotein_interactions the basic idea of scpr is to find a new amino_acid sequence_based on a known structure such that the total_energy of the resulting molecular complex is minimized in general it is difficult to model an ideal protein design framework with the consideration of full backbone and side chain flexibility since there are usually a huge number of conformations that need to be sampled even for a small protein therefore in practice assumptions are often made to reduce the complexity of the protein design problem in most of protein design models the backbone_structure is assumed as a rigid_body and only side_chains are allowed to rotate among a finite set of discrete conformations called the rotamer library under the rigid backbone assumption the goal of scpr is to search over all possible combinations of side chain rotamer conformations of different allowed amino_acids trying to find the global minimum energy conformation aka gmec unfortunately this problem has been proven np_hard thus a number of heuristic methods such as monte_carlo and genetic_algorithms have been proposed to find the approximate solutions to this problem a recent study also suggests that we can split the entire task into small pieces so that a large_scale protein design problem can be solved in parallel however these approaches cannot provide any provable guarantee of finding the global optimal_solution i e gmec as they may get trapped in a local optimum in contrast provable algorithms such as tree decomposition integer_linear with a branch and bound technique dead_end elimination dee and a search assure that gmec will be outputted as a final solution in particular the combination of dee and a search is popular in computational_protein in this design_strategy dee is first applied to prune a large number of unfavorable rotamers that are provably not part of the optimal_solution next the a algorithm is used to search over all possible combinations of the remaining rotamers and compute the gmec solution a number of dee criteria have been proposed to improve the rotamer pruning and reduce the complexity of the rotamer conformation search_space although dee can prune most rotamer conformations in the problem space the a algorithm still runs in exponential time in the worst_case in the dee and a based framework a is generally one of the most time consuming parts especially for large_scale protein design_problems thus it is vital to propose a faster algorithm to alleviate this bottleneck and therefore accelerate the protein design process in this article we develop an efficient parallel a tree search algorithm to accelerate computational_protein by optimizing and parallelizing the computation of heuristic functions and the underlying data_structure i e the priority queue for a search our algorithm significantly speeds up the a search to whom correspondence should be addressed the author published_by this is an open_access the terms of the creative_commons http creativecommons org_licenses which permits non commercial re use distribution and reproduction in any medium provided the original_work for commercial re use please_contact permissions_oup com process our approach fully exploits the capacity of parallelism on a graphics_processing gpu to support the a search for protein design tests on a benchmark_dataset of proteins show that our new algorithm runs up to times_faster than the original a based protein design algorithm while still maintaining an acceptable amount of memory overhead thus our parallel a search algorithm can provide a practically useful tool for computational_protein 
