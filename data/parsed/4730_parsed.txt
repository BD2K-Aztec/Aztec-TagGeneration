transwesd inferring cellular_networks with transitive_reduction motivation distinguishing direct from indirect influences is a central issue in reverse_engineering of biological_networks because it facilitates detection and removal of false_positive edges transitive_reduction is one approach for eliminating edges reflecting indirect_effects but its use in reconstructing cyclic interaction graphs with true redundant structures is problematic results we present transwesd an elaborated variant of transitive_reduction for weighted signed digraphs that overcomes conceptual problems of existing versions major changes and improvements concern i new statistical_approaches for generating high_quality perturbation graphs from systematic perturbation experiments ii the use of edge_weights association strengths for recognizing true redundant structures iii causal interpretation of cycles iv relaxed definition of transitive_reduction and v approximation algorithms for large_networks using standardized benchmark tests we demonstrate that our method outperforms existing variants of transitive_reduction and is despite its conceptual simplicity highly_competitive with other reverse_engineering methods contactreverse engineering of cellular_networks has become a key methodology in analysing and exploiting the increasing amount of data generated by omics_technologies whereas the structure of metabolic reaction_networks could be reconstructed mainly from genomic informationin great detail for many organisms knowledge of the topology of regulatory and signal_transduction networks is in many cases still incomplete and wiring diagrams even of canonical signalling_pathways may differ in different cell_lines the ultimate_goal of reverse_engineering methods is the identification of interactions between the involved players genes proteins etc by analysing_data of systematic and controlled perturbation experiments the result is a network in many cases represented as a graph which can be directed or undirected and to whom correspondence should be addressed may have signs and or weights at its edges some algorithms deliver refined representations such as boolean_networks reaction_networks or differential_equations but the main_result is still the underlying network_topology a simple yet smart method for reverse_engineering is based on transitive_reduction a graph_theoretical method whose potential for reconstructing regulatory_networks was first recognized by the basic idea is as follows to reconstruct a regulatory_network with n nodes one first measures the state of the nodes in the wild_type and then performs at least n perturbation experiments in experiment i node i is perturbed whereas all other n nodes are screened whether they changed their state compared to the wild_type if a perturbation in i affected j a directed edge from node i to j denoted by i j is drawn the complete set of these observed effects in all perturbation experiments yields the perturbation graph each edge in the perturbation graph reflects either a direct or an indirect effect of one node upon another the next step deals with a central issue in network_reconstruction namely identification and removal of edges that represent indirect_effects transitive_reduction as used byaims at finding the minimal most parsimonious subgraph that can explain all effects seen in the experiments transitive_reduction in its most general form allows removal and addition of edges to find the minimum graph however in the context of network_reconstruction one usually focuses on the special_case where edges may only be removed i e where one searches for a minimal subgraph explaining the perturbation graph also known as minimum equivalent graph problem herein we only consider transitive_reduction based on edge removals determined the minimal subgraph from the perturbation graph by removing all edges i j for which a simple path starting in i and ending in j not using i j can be found assuming the effect of i on j to be indirect thus explainable by the path the resulting graph is the transitive_reduction of the perturbation graph a simple example is depicted in every acyclic graph has a unique transitive_reduction with a minimal number of edges explaining all measured perturbation_effects the method proposed byis easy to implement but has some drawbacks that might be the reason for its rare application first transitive_reduction as described above does not consider the full amount of information that is available from perturbation experiments even when considering only qualitative observations if a node shows a significant response to a perturbation one can at least classify the measured effect as up or down this informationpage can be taken into account by adding a sign label to each edge in the perturbation graph which becomes then a signed directed graph seesigned version of transitive_reduction can then be performed in a similar way an edge i j is deleted only if there is a path from i to j whose overall sign product of the signs of the involved edges corresponds to the sign of this edge as can be seen in the example in this may save edges that were mistakenly deleted in the unsigned version a second drawback of the original approach of transitive_reduction is the risk to remove true edges even in signed perturbation graph the radical pruning strategy of transitive_reduction aims at minimizing false_positive fp edges in the reconstructed network but it may lead to a high number of false_negatives fns this effect becomes visible in networks comprising many coherent feed_forward loops where a node may affect another node via direct edge and indirect path links of the same sign since feed_forward loops have been shown to occur frequently in gene_regulatory this property can become a serious limitation of the method a third shortcoming is the prerequisite that the perturbation graph is acyclica condition that is often not fulfilled in realistic biological_networks if the perturbation graph is cyclic the solution of transitive_reduction is in general not unique as we will see negative cycles in signed perturbation graphs may bring about even more complications for transitive_reduction in this article we will present transwesd transitive_reduction in weighted signed digraphs a new variant of transitive_reduction that seeks to overcome these problems generalizations of transitive_reduction to signed and cyclic directed_graphs have been proposed by other authors however our approach_combines and extends existing variants and differs in several key aspects e g use of weighted perturbation graphs treatment of negative cycles and handling of elementary versus non elementary paths we also discuss issues related to the identification of significant perturbation_effects a key_step in generating the perturbation graph using standardized benchmark tests we demonstrate that our method outperforms existing variants of transitive_reduction and is despite its conceptual simplicity highly_competitive with other reverse_engineering methods using the developed reverse_engineering methodology_presented herein we took part in the fourth challenge of the dialogue of reverse_engineering assessments and methods dream on in silico gene network_reconstruction the dream initiative offers a platform for objective assessment of rivalling methods based on in silico data providing a realistic scenario for high_throughput gene_expression and reconstruction of gene_regulation networks from the dream_challenge we present the results of our method for the dataset insilico size subchallenge which can be downloaded from the dream website_http wiki c b columbia edu dream index php the dream project based on sub networks of nodes sampled from gene_networks of escherichia_coli and yeast realistic kinetic_models with randomly_selected parameters were generated and simulated with genenetweaver using stochastic_differential for reconstructing these networks in silico measurement data were provided containing noisy steady_state mrna_expression levels of wild_type and singlegene knockout and knockdown experiments as well as time series data the gold_standards of the five networks were provided after announcing the results of all submissions and we can thus compare our computed results to the real_networks for each network we first generated the perturbation graph as described above using the wild_type and knockout steady_state data the two required parameters were trained from the dream challenges edge_weights were computed as conditional correlation_coefficients from knockout and knockdown data the results were very similar when using only the knockout data the provided time series data were not used at all we then applied transitive_reduction with transwesd to the generated perturbation graphs yielding the final reconstructed graph found edges were sorted according to their weight required for performance analysis relevant for auroc area under the receiver_operator curve and aupr area under the precisionrecall curve values see below for comparison with the method of we used net synthesis to apply their algorithm of transitive_reduction in the unweighted version of the perturbation graph we also implemented the sos save our signs pruning procedure proposed by this transitive_reduction method also operates on weighted graphs but differs from transwesd in two key aspects i as discussed in section and analogous to net synthesis this pruning approach accepts non elementary paths containing negative cycles for explaining edges and ii the length of a path is computed as the product of edge probabilities based on this metric an edge z v is removed if there is a elementary or non elementary path z v of the same sign whose overall probability is larger than the probability of the edge z v actually sos pruning distinguishes two probabilities one for having a positive edge p and one for having a negative edge p and the sign s of the edge is given by the sign of p p for the dream setting we used the same perturbation graph as for transwesd and we assigned the conditional correlation_coefficients either with full amount to p if s is positive or to p if s is negative whereas the other probability was set to zero summarizes the results for all five networks and indicates for each inferred network the number of tp fp tn fn edges the computation time and standard statistical metrics assessing the quality of reconstructed networks the latter were determined by the dream evaluation scripts and include auroc aupr as well as pauroc and paupr probabilities that a given or larger auroc aupr value is obtained by random_network link permutation as estimated from runs see as the aupr value is more sensitive in sparse networks it is especially useful to assess the quality of reconstructed gene_regulatory the p values reveal that our method_produces results that are significantly better than randomly_chosen networks this even holds for the perturbation graph alone indicating that an appropriate thresholding strategy for classifying observed changes as relevant or not delivers large_amounts of meaningful_information note that even the raw perturbation graphs obtained by our thresholding strategy outperform many solutions submitted to the dream_challenge applying transwesd to the perturbation graphs increased the aupr value in four of five networks whereas in one network aupr decreased marginally as expected the desired removal of fps by transitive_reduction is inevitably accompanied by the removal of some tps this often implies a decrease in the auroc value however in most of the cases this reduction is about one magnitude lower than the improvement in aupr the positive effect of transitive_reduction becomes more apparent when looking at the p values and at the numbers of true and fps in network for example the number of fps could be reduced by from to sacrificing only tps reducing the tps from to which results in a moderate increase of aupr from to and a more significant increase in the p value from e to e the effect of transwesd becomes even more pronounced if we take the same data but based on deterministic simulation without any noise these data were provided when releasing the results of the challenge for illustration displays the results when taking noise_free data for network without noise we can choose small thresholds e g and as expected auroc and aupr are much higher already in the perturbation graph but using transwesd we can further increase the aupr paupr value from e to e the number of fps is reduced from to whereas the number of fns increases moderately from to hence a perturbation graph with high_quality increases the effectiveness of transitive_reduction in network we observed a decrease of the aupr measures when applying transwesd although the number of fps is reduced by compared to additional fns strikingly when announcing the results of dream_challenge it was mentioned that network exhibited oscillations and that the knockout data provided represented therefore transient and not steady_state data under those conditions some edges in the perturbation graph may correspond to perturbation responses resulting from the action of non elementary influence paths with negative cycles leading to a higher_error of transwesd as expected the computational costs for generating the perturbation graph are constantly low in contrast running_times for applying the full transwesd algorithm varies for the different networks and may become extensive in two networks and we were able to apply the exact algorithm to the perturbation graph in reasonable time for the other networks we interrupted the exact algorithm after h and used the approximate variant approximate shortest_path computation and no recalculation of paths after edge removals which in all networks needed s checking the approximation results for errors removed edges violating we saw that the simplified algorithm introduced no errors in any of the five networks indicating that the simplified algorithm delivers reasonable approximations in realistic gene_regulatory however when choosing the number of errors may quickly increase especially if the network contains positive cycles data not shown we also computed the transitive_reduction using the method ofimplemented in net synthesis taking as input the same perturbation graph as used for transwesd without weights as the computed result is non unique and very sensitive to edge ordering we repeated the computation for different random orderings and took the best result in terms of aupr value for fair comparison we sorted the remaining edges in the final graph also with respect to the edge_weights taken from the perturbation graph the algorithm is much faster than full transwesd but comparable with the approximate version s in all networks and removes much more edges resulting in significantly less fns however this comes at the price of eliminating a relatively high number of tps the resulting aupr values are constantly significantly_lower than in networks obtained by transwesd it even turns out that all networks obtained by net synthesis have partially considerably_lower auroc and aupr values than the perturbation graphs from which they were produced these results indicate that the attenuated pruning strategy of transwesd based on edge_weights is highly advantageous for reconstructing regulatory_networks probably for this reason the sos pruning strategy ofwhich also operates on weighted graphsyielded better results than net synthesis however the improvement in the aupr value if it increased the aupr value of the perturbation graph at all is significantly_lower than for transwesd except in the problematic case of the nonstationary network where sos pruning performed slightly better but also led to a decrease of the aupr value compared to the perturbation graph generally sos pruning deleted significantly less edges than transwesd which can probably be attributed to the very conservative metric multiplication of probabilities used by sos pruning for quantifying path lengths as a proof_of with the results presented in our algorithm was ranked on place out of submissions in the dream insilico size sub challenge this result is page 
