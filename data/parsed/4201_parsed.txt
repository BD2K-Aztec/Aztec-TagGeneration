sequel improving the accuracy of genome_assemblies motivation assemblies of next_generation ngs_data although accurate still contain a substantial number of errors that need to be corrected after the assembly process we develop sequel a tool that corrects errors i e insertions deletions and substitution_errors in the assembled_contigs fundamental to the algorithm behind sequel is the positional de_bruijn a graph_structure that models k_mers within reads while incorporating the approximate positions of reads into the model results sequel reduced the number of small insertions_and in the assemblies of standard multi cell escherichia_coli data by almost half and corrected between and of the substitution_errors further we show sequel is imperative to improving single_cell assembly which is inherently more challenging due to higher_error and non uniform coverage over half of the small_indels and substitution_errors in the single_cell assemblies were corrected we apply sequel to the recently assembled deltaproteobacterium sar genome which is the first bacterial_genome with a comprehensive single_cell genome_assembly and make over changes insertions deletions and substitutions to refine this assembly availability sequel can be used as a post_processing step in combination with any ngs assembler and is freely_available atthe advent_of ngs_technologies along with the development of new assembly algorithms has enabled the production of genome_assemblies for a multitude of organisms at ever decreasing costs robust assembly methods are imperative to the success of large de_novo sequencing initiatives such as the genome k project that aims to sequence the genomes of vertebrate_species genome k community of and the ik project where the objective is to sequence the genomes of arthropods ngs_technologies produce short_sequence approximately base_pairs bp for illumina technology at increasingly high_throughput permitting assembly methods suited to these technologies to exploit the redundancy in the data in order to produce high_quality contigs although these platforms have much higher throughput than sanger sequencing_platforms assessment of short_read assemblies have shown them to be less accurate than the the authors wish it to be known that in their opinion the first two authors should be regarded_as to whom correspondence should be addressed finished genomes assembled using the previous technologies earlier assembly algorithms developed for sanger_sequencing follow an overlap_layout paradigm where consensus refers to fixing errors in the contigs since this paradigm faces difficulties in short_read assembly most ngs assemblers employ a de_bruijn approach that effectively deals with large_amounts of data however most ngs assemblers neglect the consensus step i e there exists no post_processing of the contigs in velvet and many other popular assemblers relying on high and uniform coverage ngs assembly algorithms push the burden of producing high_quality assemblies onto the construction of the de_bruijn we argue that ngs assemblers can benefit from the use of a consensus step particularly in the case of single_cell data that suffers from high_error and non uniform coverage in the spirit of the consensus step we propose an additional step to the ngs assembly process refinement we develop sequel a tool that refines an initial assembly of short_read by using approximate positions of reads in contigs sequel takes as input an assembled contig the paired_end that align to that contig and the approximate positions where they aligned and returns a refined contig we refer to the process implemented by sequel as positional reassembly in eulerian assembly a de_bruijn is constructed with a vertex v for every k_mer present in a set of reads and an edge v v for every observed k_mer in the reads with k_mer prefix v and k_mer suffix v a contig corresponds to a non branching path through this graph seefor a more thorough explanation of de_bruijn and their use in assembly euler sr velvet soapdenovo abyss and allpaths all use this paradigm for assembly most existing ngs assemblers follow the same general outline break the possibly error corrected reads into k_mers construct the de_bruijn on the set of resulting k_mers simplify the de_bruijn resolve repeats by using matepair information and construct contigs although the implementation of these steps varies_widely between different assemblers existing ngs assemblers return contigs recovered from the de_bruijn with little refinement if every position in the genome was uniformly covered by errorfree reads and the genome had few repeats this would result in a simple de_bruijn however sequencing_errors and repeats lead to highly complex graphs and force assemblers to rely on graph simplification it is during this simplification process that errors in the assembly are introduced substitution_errors and indels in the reads create undirected cycles called bulges and short_tandem lead to directed cycles called whirls there exist numerous methods for removing bulges and whirls sequel an example of a bulge on eight vertices in a de_bruijn k resulting from a sequencing_error during the process of bulge removal the correct path top cct cta tag agg gga may be discarded thus creating a substitution error in the final contig this may occur if for example coverage is taken as a consideration since the bottom path cct ctt ttgtgg gga erroneous in this case may have higher_coverage due to k_mers originating from other parts of the genome but unfortunately these methods potentially introduce errors in the contigs illustrates a scenario where a bulge in the de_bruijn is caused due to a sequencing_error error_correction of the reads prior to assembly can greatly simplify the assembly process by implicitly eliminating bulges from the de_bruijn it is now established as a common pre_processing before assembly and used by several ngs assemblers including euler sr abyss and allpaths although error_correction eliminates the majority of errors in reads in of the cases it introduces rather than corrects errors this leads to the following trade_off in fragment assembly either error_correction of reads is performed which may lead to errors in the contigs or error_correction is not performed and the complex de_bruijn has to undergo aggressive simplification that may lead to errors in the contigs it is clear however that in both cases subtle and complex errors will arise the accuracy of different assemblers varies_widely for example our tests of velvet produced contigs with errors per kb for k_mer size while soapdenovo produced contigs with errors per kb even the accuracy of velvet deteriorates greatly when used in default mode with k_mer size however soapdenovo has some advantages over velvet e g the ability to handle larger genomes therefore it is beneficial to design a refinement program that can be used in combination with any assembler decoupling the contig refinement problem from the assembly process removes the burden of re implementing a positional reassembly process for each assembler we show that ngs assemblies suffer from indels and substitution_errors that are somewhat masked by common metrics for assessing assembly_quality many of these errors can be corrected using sequel we give an analysis of the types of complex errors that occur in ngs assembly and that can be fixed by sequel offering some insight into why positional reassembly is a necessity for obtaining accurate assemblies we give a computational_problem formulation for correcting errors in contigs and present an algorithm for reassembly based on a graph_structure referred to as the positional de_bruijn we demonstrate the ability of sequel to improve the accuracy of assemblies generated from three assemblers euler sr velvet and velvet sc euler sr performs error_correction on the sequence_reads prior to assembly whereas velvet does not perform error_correction velvet sc is a specialized assembler tailored to handle the dramatic fluctuations in coverage that are characteristic to single_cell data single_cell amplified dna has been shown to suffer from amplification_bias and low template quality resulting in sequence_data with highly non uniform coverage by error_prone reads thus assembly of such data is inherently more challenging and error_prone our experiments demonstrate that sequel is able to substantially reduce the number of errors in single_cell and standard multi cell assembly although we demonstrate the use of sequel with euler sr velvet and velvet sc its use is not limited to these assemblers 
