compressive genomics for protein databases motivation the exponential_growth of protein sequence_databases has increasingly made the fundamental_question of searching for homologs a computational bottleneck the amount of unique data however is not growing nearly as fast we can exploit this fact to greatly accelerate homology_search acceleration of programs in the popular psi delta blast family of tools will not only speed up hom ology search directly but also the huge collection of other current programs that primarily interact with large protein databases via precisely these tools results we introduce a suite of homology_search tools powered by compressively accelerated protein blast cablastp which are significantly_faster than and comparably accurate with all known state of the art tools including hhblits delta blast and psi_blast further our tools are implemented in a manner that allows direct substitution into existing analysis_pipelines the key idea is that we introduce a local_similarity based compression scheme that allows us to operate directly on the compressed data importantly cablastps runtime scales almost linearly in the amount of unique data as opposed to current blastp variants which scale linearly in the size of the full protein database being searched our compressive algorithms will speed up many tasks such as protein_structure and orthology mapping which rely heavily on homology_search identification of homologous_sequences is of fundamental_importance in computational_biology sequence_search tools such as blastp and psi_blast have played_important in various tasks arising in protein science including secondary_and prediction functional_annotation and orthology mapping the runtimes of the most popular_methods e g blastp psi_blast and deltablast scale nearly linearly in the size of protein databases with the exponential_increase in protein sequence_data this is becoming a major_bottleneck to computation thus it is imperative to design_algorithms that scale sublinearly in the size of the databases the recent exponential_growth in genomic sequence_data which is outpacing growth of computing_power has spurred an interest in compressive genomics and the need to compress sequence_data for efficient storage protein sequence_data although on a slower growth_curve than genomic_data nonetheless increase at an exponential_rate doubling roughly every years for now just keeping pace with moores law for computational power a key observation from compressive genomics is that much of the new data are actually similar to existing data which was used to accelerate nucleotide sequence_search without loss of accuracy despite its name even ncbis non redundant protein_sequence database nr contains a great_deal of redundancy it is non redundant only at the level of entire sequences highly_similar sequences are represented separately thus even nr lends itself to a compression scheme that takes_advantage of this redundancy although nr has already eliminated exact duplicates at the global sequence level we take advantage of local sequence_similarity to achieve compression we introduce a compressive algorithm cablastp along with an implementation that allows direct computation on the compressed data cablastp boosts the runtime performance of any search tool in the protein blast family while maintaining accuracy specifically we show that compressive versions of blastp psi_blast and delta blast scale nearly linearly in the size of the unique data as well as sub linearly in the size of the complete protein database notably any program that relies on protein blast can take advantage of our compressive software with virtually no effort thus we expect cablastp to be of great use to the community we have introduced a compression accelerated search algorithm that boosts the speed while maintaining accuracy of tools in the protein blast family our approach scales sub linearly with the size of the database being searched and linearly with the size of the unique data we expect that as the nr database continues to grow_exponentially the benefits of this compressive approach will become more pronounced in contrast to genomic_sequence compression which appears on its surface to be similar subtle differences make protein_sequence compression a different problem the primary difference is that proteins have a larger alphabet and thus random_sequences will have less similarity this results in different parameters and compression_ratios but it also increases the computational_complexity of compression as the number of k_mers is exponential in the alphabet size another difference is that protein_sequences are discrete therefore our compression algorithm must handle sequence beginnings and ends we have demonstrated that our compressive approach provides significant_gains as the redundancy of the data increases but we also see future challenges as the ncbis nr database continues to grow in the coming_years the size of each cluster of similar subsequences will also grow we expect that for compression to remain tractable further algorithmic and software engineering improvements for example a hierarchical compression scheme will be required many sophisticated homology_search and protein_structure prediction_tools require blast_searches of one type or another to incorporate sequence_profiles or structural_information to improve performance for example when we introduced the betawrappro method which requires a blastp search at query time ncbis nr database contained million sequences today it contains million sequences thus search requires approximately five times the running time although the original motivation for developing our compressive approach was the growing running time of blastp searches on nr the results described insuggest that our approach may also be useful for orthology mapping across organisms performing an all against all search between a query proteome and a set of well studied proteomes which takes an inordinate amount of time our tools can be readily incorporated into these applications to accelerate their search pre_processing or library_construction our software can be easily interfaced with any programs that use protein blast_search tools another important advantage of our methods is that the compressed database can be incrementally maintained to keep current with new proteomic sequence_data 
