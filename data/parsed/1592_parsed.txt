epga memory_efficient de_novo assembler motivation in genome_assembly as coverage of sequencing and genome_size growing most current softwares require a large memory for handling a great_deal of sequence_data however most researchers usually cannot meet the requirements of computing_resources which prevent most current softwares from practical_applications results in this article we present an update algorithm called epga which applies some new modules and can bring about improved assembly results in small memory for reducing peak memory in genome_assembly epga adopts memory_efficient dsk to count k_mers and revised bcalm to construct de_bruijn moreover epga parallels the step of contigs merging and adds errors correction in its pipeline our experiments demonstrate that all these changes in epga are more useful for genome_assembly genome_assembly is one of the most important tasks in numerous applied fields when using one software to reconstruct complete_genome from sequence_data researchers not only emphasize assembly results but also memory_efficiency although many softwares have been developed for genome_assembly their balance between accuracy and memory_efficiency are not satisfactory due to complex data_structures we previously_published epga one de_novo assembler which can resolve some problems caused by complex repetitive sequence_regions although epga can get satisfactory assembly results it does not have advantage about peak memory comparing with other popular assemblers the bottleneck of epgas memory_efficiency primarily exists in two steps k_mers counting and de_bruijn constructing because epga requires that all reads and k_mers reside in memory such storage strategy ends up with the memory_consumption growing dramatically as the number of reads is increasing dsk is one k_mer tool which partitions reads and each partition is separately loaded in memory bcalm is one algorithm for building simple paths in de_bruijn which clusters k_mers and iteratively loads each cluster in memory for resolving memory problem in epga we present epga which replaces some components in epga with dsk and bcalm in addition epga adds errors correction in its pipeline and parallels the step of contigs merging the experimental_results demonstrate that epga can produce more satisfactory contigs and scaffolds using small memory in this article to resolve the memory_efficiency problem in epga we present epga which updates some modules in epga in addition for reducing running time epga parallels contigs merging for improving accuracy of assembly results epga adds errors correction using bless the experimental_results demonstrate the balance between assembly results and memory_efficiency of epga is satisfactory epga should be particularly appropriate for researchers with limited computing_resources c num the number of contigs c cn the cn of contigs c cov the coverage of contigs s num the number of scaffolds s cn the cn of scaffolds s cov the coverage of scaffolds time running time pm peak memory last column is the smallest peak memory and corresponding assembler about other popular assemblers 
