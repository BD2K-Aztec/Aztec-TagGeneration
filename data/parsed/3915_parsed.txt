gene_expression reademption a tool for the computational_analysis of deep_sequencing based transcriptome_data rna_seq has become a potent and widely used method to qualitatively_and study transcriptomes to draw biological conclusions based on rna_seq several steps some of which are computationally_intensive have to be taken our reademption pipeline takes care of these individual tasks and integrates them into an easy to use tool with a command_line to leverage the full power of modern computers most subcommands of reademption offer parallel data_processing while reademption was mainly developed for the analysis of bacterial primary transcriptomes we have successfully_applied it to analyze rna_seq from other sample_types including whole transcriptomes and rna immunopre cipitated with proteins not only from bacteria but also from eukaryotes and archaea availability_and reademption is implemented in python and is published under the isc open_source the tool and documentation is hosted at http pythonhosted org reademption rna_seq the examination of cdna by massively_parallel is a potent way to perform transcriptome analyses at single_nucleotide and with a high dynamic range it has been successfully used to annotate transcript boundaries and to identify novel transcripts such as small_regulatory in both prokaryotes and eukaryotes most prominently it can be applied to quantify the expression levels of genes having been shown to be more powerful to detect changes in gene_expression than microarrays it can also be used to study the interaction of proteins and rnas through performing rna_seq of coimmunoprecipation coip samples k onig et_al likewise any other subset of rna_molecules from for instance rna size fractionation ribosome_profiling metatranscriptomics or degradome profiling experiments can be sequenced owing to decreasing costs and ever increasing speed of deep_sequencing the bioinformatical analysis has become a bottleneck of rna seqbased projects we have created an automated rna_seq processing pipeline named reademption with the initial purpose to handle differential rna_seq drna_seq data for the determination of transcriptional_start in bacteria we saw the need for this as other available rna_seq analysis_pipelines e g were not designed for this application additionally while most available rna_seq pipelines put priority on fast mapping we have chosen segemehl as short read_aligner this mapper has a relatively high_demand of memory and computation capacities but in return it offers high_sensitivity as well as a low false_discovery and can perform multiple splitting of reads we have since extended the functionality of this pythonbased pipeline so that it is now capable of analyzing rna_seq from a wide_range of experiments we have successfully_applied reademption for the analyses of rna samples from bacterial archaeal and eukaryotic_species as well as for rna virus_genomes e g it is able to work with reads from both illumina and platforms of different lengths and can be used for single and paired_end sequenced libraries several parameters which enable the user to adapt its execution to the specific needs reademption provides the subcommands align coverage gene quanti deseq viz align viz gene quanti and viz deseq which combine several processing substeps into comprehensible units read processing and mapping the fundamental tasks of preprocessing the input reads and aligning them to reference_sequences is covered by the subcommand align in an initial step reademption parses the input read files in fasta or fastq format performs quality trimming removes adapters and or poly a tails introduced during the library_preparation and discards reads shorter than a given cutoff default nt for the alignment of reads to reference_sequences the short read_mapper segemehl and its remapper lack are used to have high_confidence of read mappings even for short_sequences the required mapping accuracy of is used per default the mapping is followed by the conversion of the resulting sequence_alignment format sam alignment files into binary alignment map format bam_files and the generation of mapping statistics the latter summarizes the numbers of uniquely and multiple mapped_reads as well as the number of alignments clipping and filtering events for each genomic element in table format coverage calculation based on the read_alignments provided in the bam_files cdna coverage files can be generated using the subcommand coverage it creates several wiggle files that are based on different normalization_methods such as the division by the total number of aligned_reads and represents the nucleotide wise cdna coverage in a strand specific_manner to visually inspect the reads_mapped to the individual cdna_libraries and to compare them among each other these wiggle files can be loaded into common genome_browsers gene_expression quantification the read_alignments can also be further used by the subcommand gene quanti to calculate gene wise read_counts for this purpose annotation files including gene positions in gff format gene feature format have to be provided for each annotation entry the number of reads that are overlapping with a user_defined number of nucleotides default nt are reported to also detect non annotated antisense_transcripts the reads which are mapped in antisense direction to a given annotation can be quantified besides raw genewise read countings normalized valuesby total number of aligned_reads as well as reads per kilobase per exon model per_million rpkm are returned differential_gene analysis for pairwise expression comparison the subcommand deseq offers statistical_analysis based on the approach implemented in deseq which builds on the raw read counting and is a widely adapted and intensively tested library the user has to specify the conditions of the libraries to let deseq treat replicates accordingly the results of deseq are reformated and supplemented with the provided gene_annotations plotting the final three subcommands called viz align viz gene quanti and viz deseq generate several visualizations that help to interpret the result of the subcommand align gene quanti and deseq respectively the diverse plots contain among others histograms of the read_length distributions before and after the read clipping volcano plots and ma plots log ratios m versus arithmetic mean of expression values a of the differential_gene analysis reademption requires python or higher http python org biopython matplotlib and numpy as well as the samtools wrapper pysam http pypi python org pypi pysam the subcommand deseq relies on an r http cran r project org installation and the bioconductor_package deseq instructions how to install reademption and how to execute its subcommands includingexamples can be found in the documentation additionally an ubuntu live and installation image with reademption preinstalled is available for download 
