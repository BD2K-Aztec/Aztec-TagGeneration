lower confidence bounds for prediction_accuracy in high_dimensions via arohil monte_carlo motivation implementation and development of statistical_methods for high_dimensional often require high_dimensional monte_carlo simulations are used to assess performance evaluate robustness and in some cases for implementation of algorithms but simulation in high_dimensions is often very complex cumbersome and slow as a result performance_evaluations are often limited robustness minimally investigated and dissemination impeded by implementation challenges this article_presents a method for converting complex slow high_dimensional monte_carlo into simpler faster lower dimensional simulations results we implement the method by converting a previous monte_carlo algorithm into this novel monte_carlo which we call arohil monte_carlo arohil monte_carlo is shown to exactly or closely match pure monte_carlo results in a number of examples it is shown that computing time can be reduced by several orders_of the confidence bound method implemented using arohil outperforms the pure monte_carlo method finally the utility of the method is shown by application to a number of real microarray_datasets availability the r computer program for forming confidence bounds is freely_available for download at the url http dobbinke myweb uga edu rprogramarohilloweraccuracybound txt this article_presents a novel approach to monte_carlo in high_dimensions the approach permits routines to be written in simpler and faster code using mathematical_modeling the savings comes from reducing the computational dimension of the monte_carlo from very high_dimension to a much lower dimensional_space as we will show this computational savings makes it possible to provide r functions to perform statistical_analyses that previously required a compiled language such as c moreover the r programs are significantly_faster and more transparent enhancing reproducibility than the compiled programs because the underlying models have been streamlined we make to whom correspondence should be addressed available such a program with this publication more generally this approach by providing a faster method for performing simulations can enable method developers to consider the robustness of novel procedures across a wider_range of simulation scenarios than would otherwise be feasible monte_carlo are commonly_encountered in papers on high_dimensional methodologies perhaps the most common use of monte_carlo is to evaluate the performance characteristics of novel statistical_procedures such as the performance of classifiers based on partial_least regularization methods for variable_selection or evaluation of multiple_hypothesis error control methods the advantages of monte_carlo investigations are that the truth can be known exactly and model_assumptions can be violated in systematic ways to explore the limits of robustness some other methodologies also use monte_carlo as part of their algorithms this new simulation procedure is called adequate representation of high_dimensions in low dimensions arohil monte_carlo there are two types of arohil monte_carlo the first type does not involve any resampling the basic idea behind this type of monte_carlo is to split the monte_carlo into two subsimulations one simulation represents the dimension reducing feature selection_step the second simulation represents the conditional distribution of the features given that they were selected and can typically be carried_out in a space with dimension similar to the number of features selected the second type of arohil monte_carlo does involve resampling such as bootstrap or cross_validation in this case resampling creates complex inter relationships among the resampled datasets to capture these inter relationships we propose a relatively simple hierarchical_model that requires generation of a single highdimensional vector and then a series of low_dimensional vectors conditionally generated given the high_dimensional vector to our knowledge there has not been work to develop a general_methodology along the lines presented here work with a similar spirit can be seen in the high_dimensional literature for example venkatraman and olshen developed a faster version of their earlier method for performing circular_binary monte_carlo methods for estimating the distribution of functionals in complex statistical_models have a longer history and include rejection sampling importance sampling e g markov_chain e g and related algorithms such as the gibbs_sampler but these methods do not achieve the reduction in thearohil monte_carlo was applied in multiple places to the algorithm of dobbin briefly the method of dobbin constructs a lower confidence bound for the true prediction_accuracy of a classifier developed on high_dimensional this bound provides an estimate of the variability in the leave_one estimate of prediction_accuracy which is otherwise problematic to assess the motivation was to convert the method of dobbin from a set of c programs to a single r program while at the same time reducing the computation time we first compare pure monte_carlo to arohil monte_carlo computation times in some simple settings then we turn to the implementation of the method of dobbin and analyze some of the results to validate the arohil method and to show how intermediate steps of arohil monte_carlo algorithms can be checked we first performed a set of simulations to benchmark the computational savings of arohil monte_carlo compared with traditional monte_carlo on some simple examples results are presented in as can be seen from the table computational costs in high_dimensions can be reduced several orders_of by using arohil monte_carlo instead of traditional monte_carlo on the fourth row of the table representing a dimensional_space the computation time is reduced from over a day to under a minute also note that the estimates from the two methods are practically identical now we turn to the arohil program implementation three key intermediate steps in the application of the arohil method to the algorithm of dobbin are as follows generate the distribution of cutpoints used for classification of samples generate mean accuracies corresponding to a particular highdimensional mahalanobis_distance between the class means of the parameters with p dimensions n using ccp predictor over simulations when sim resampling simulations are estimating the th_percentile of the leave_one cross_validated prediction_accuracy distribution for fixed values of the parameters with p dimensions n using ccp prediction over simulations no resamplings done in r on a bit operating system resamplings done in r on a bit operating system no resampling estimates include standard_deviations in parentheses we have presented a mathematical modeling_approach to speed up high_dimensional monte_carlo by reducing the effective dimension of the space in which the simulations are performed we have described in a general way how this approach can be usedin the case of simple monte_carlo and also monte_carlo that require resampling such as bootstrap or crossvalidation the modification for the resampling setting is achieved by constructing a hierarchical_model for which the distributions of the functionals of interest match or approximately match the pure monte_carlo distributions this new method is called arohil and can enable complex and slow high_dimensional simulations to be converted into simpler and much faster low_dimensional simulations we have discussed how this method can be used to improve robustness evaluations and to disseminate software as an example we are disseminating an arohil program with this article and have presented a robustness evaluation of this previously_published method in the discussion below we discuss arohil monte_carlo generally first and then the implementation program provided in this article we have discussed one detailed example of how high_dimensional leave_one monte_carlo can be converted into an arohil monte_carlo generalizing this to other cross_validations such as fold_cross is straightforward bootstrapping by arohil would require a further modification we showed in this article that arohil for cross_validation is performed by calculating the distribution of a backbone vector of statisticsis the effect_size for individual differentially_expressed features is the correlation parameter for cs and ar a is the mean true accuracy over all simulations lb coverage is the coverage probability of lower confidence bound using either arohil or an exact binomial confidence_interval constructed naively incorrectly from the loocv accuracy estimate applications to real_datasets used in a loocv is the leave_one accuracy dim is the number of features n and n are the number from each class lb is the lower confidence bound computed by arohil monte_carlo and similarly lb is a lb comparable to the twosided intervals used in for thedataset the outcome is survival status at years for the vantdataset outcome is year metastases free survival for thedataset outcome is survival status for thedataset outcome is survival status for thedataset outcome is survival status for all datasets the significance_level for gene_selection was that represents the full dataset then calculating the conditional distribution of key cross_validation statistics when a sample is left out for bootstrapping an extra level would need to be added to the hierarchical_model that would represent the overlap pattern between the bootstrap samples this pattern could be represented by a simple multinomial model with probability n on each of the n samples for each of the bootstrap draws sampling with replacement then the conditional distribution given the backbone vector and the pattern can be derived in a straightforward way and used to generate the bootstrap sample we have discussed that sometimes arohil models will require approximations to the pure monte_carlo distribution importantly such approximations must be checked carefully to ensure that they are true to the original model on the other hand it does not seem reasonable to throw the baby out with the bathwater and abandon arohil monte_carlo when any approximations are required in many cases these approximations are straightforward to check over the range of simulation_settings that are of interest we have termed the dimension_reduction step of arohil as adequate and not attempted here to define this idea exactly dimension_reduction could be based on more general notions such as sufficiency a potential area of future_research is to find a more formal approach to the dimension_reduction step which would establish that the statistics used by the arohil monte_carlo are capturing all the key aspects of the pure monte_carlo a potential critique of the arohil approach is that it requires some work to build the mathematical_models used to reduce dimension while it is true that this method requires some extra work which is not generally worth the trouble in lower dimensional settings the computational savings in high_dimensions is so large that it can not only be worthwhile but also critical furthermore very complex high_dimensional procedures can be challenging to implement and thoroughly checking for coding bugs information leak or inadvertent neglect of specification of all parameters and assumptions can be fraught with difficulties an important aspect of arohil is that implementation is simplified i e the added complexity of the mathematics is often more than compensated for by the greater simplicity and transparency of the computer code we argue that this results in a cleaner and overall simpler procedure than traditional brute_force monte_carlo where any errors are often buried in long computer code scripts we have found that the arohil monte_carlo approach results in very short and simple code compared with pure monte_carlo for example the r script we are providing with this publication is much shorter and simpler than the original code from dobbin consisting of multiple c programs and steps to integrate the outputs together the resulting simplification of the code is likely to greatly enhance reproducibility of high_dimensional studies which has been a continuing challenge to this area the accompanying arohil program is implemented with one informative feature which was used in all the coverage probability simulations in this article the program is also available with a userselected number of features the number of informative features has relatively small effect on the confidence_interval bound and the number of informative features is unknown hence it is preferable to have a program in which the user does not have to come up with this unknown quantity see section in supplementary_material for the table of simulation_results showing the stability of bounds across different numbers of informative features an alternative approach would be to search over different possible numbers of informative features to find a worst_case setting resulting in more conservative confidence bounds the accompanying arohil program is implemented with a diagonal covariance_matrix this is done not because the true covariance for high_dimensional is likely to be diagonal but because it is generally not possible to estimate the covariance_matrix 
