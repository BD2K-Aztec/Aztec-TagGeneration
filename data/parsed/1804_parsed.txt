sequence_analysis featurecounts an efficient general_purpose program for assigning sequence_reads to genomic_features motivation next_generation generate millions of short_sequence which are usually aligned to a reference_genome in many applications the key information required for downstream_analysis is the number of reads mapping to each genomic feature for example to each exon or each gene the process of counting reads is called read summarization read summarization is required for a great variety of genomic_analyses but has so_far received relatively little attention in the literature results we present featurecounts a read summarization program suitable for counting reads generated from either rna or gen_omic dna sequencing_experiments featurecounts implements highly_efficient chromosome hashing and feature blocking techniques it is considerably faster than existing_methods by an order of magnitude for gene level summarization and requires far less computer memory it works with either single or paired_end and provides a wide_range of options appropriate for different sequencing_applications next generation next gen sequencing_technologies are revolutionizing biology by providing the ability to sequence dna at unprecedented speed the computational_problem of mapping short_sequence to a reference_genome has received enormous attention in the past_few and the rapid development of fast and reliable aligners is one of the success_stories of bioinformatics raw aligner output however is not usually sufficient for biological_interpretation read_mapping results have to be summarized in terms of read_coverage for genomic_features of interest before they can be interpreted biologically one of the most ubiquitous operations that forms part of many next gen analysis_pipelines is to count the number of reads overlapping predetermined genomic_features of interest depending on the next gen application the genomic_features might be exons genes promotor regions gene_bodies or other genomic_intervals read_counts are required for a wide_range of count_based statistical_methods for differential_expression or differential_binding analysis despite its importance in genomic_research the read counting problem has received little specific attention in the literature the problem may appear superficially simple but in practice has many subtleties read_count programs need to accommodate both dna and rna_sequencing as well as single and pairedend reads the reads or paired_end fragments to be counted may incorporate insertions deletions or fusions relative to the reference_genome and these complications need to be accounted for when comparing the location of each read or fragment to each possible target genomic feature when the number of features is large the computational_cost of read counting can be comparable with that of the read_alignment step dna_sequence arise from a variety of technologies including chip_seq for transcription_factor chip_seq for histone_marks and assays that detect dna_methylation the genomic_features of interest for dna_reads can usually be specified in terms of simple genomic_intervals for example counted reads associated with histone_marks by gene promotor regions and by whole gene_bodies rosscounted reads overlapping with intervals identified by a peak caller counting rna_seq is somewhat more complex because of the need to accommodate exon splicing one way is to count reads overlapping each annotated exon an approach that can be used to test for alternative_splicing between experimental_conditions another common approach is to summarize counts at the gene level by counting all reads that overlap any exon for each gene gene_annotation from refseq or ensembl is often used for this purpose read_counts provide an overall summary of the coverage for the genomic feature of interest in particular gene level counts from rna_seq provide an overall summary of the expression_level of the gene but do not distinguish between isoforms when to whom correspondence should be addressed the author published_by all_rights for permissions please_e journals permissions_oup com multiple_transcripts are being expressed from the same gene reads can generally be assigned to genes with good confidence but estimating the expression levels of individual isoforms is intrinsically more difficult because different isoforms of the gene typically have a high proportion of genomic overlap a number of model based_methods have been developed that attempt to deconvolve the expression levels of individual transcripts for each gene from rna_seq essentially by leveraging information from reads unambiguously assigned to regions where isoforms differ this article concentrates on the read_count problem which is generally_applicable even when the sequencing_depth is not sufficient to make transcript_level analysis reliable many statistical_analysis methods have been developed to detect differential_expression or differential_binding on the basis of read_counts recent comparisons have concluded that the read_count methods perform well relative to model based_methods for the purposes of gene level differential_expression or detection of splice variation only a handful of general_purpose read_count software_tools are currently available the software_packages genomicranges and iranges developed by the core team of the bioconductor_project include functions for counting reads that overlap genomic_features the countoverlaps function of iranges is designed for counting reads overlapping exons or other simple genomic_regions whereas the summarizeoverlaps function of genomicranges is designed for counting reads at the gene level another tool is the htseq count script distributed with the ht seq python framework for processing rna_seq or dna_seq data all of these are popular and welltested software_tools but all make extensive use of programming in the interpreted computer languages r or python and none are fully optimized for efficiency and speed bedtools is a popular tool for finding overlaps between genomic_features that can be used to count overlaps between reads and features it is fully implemented in the compiled language c making it faster than the aforementioned tools it is however not specifically_designed for rna_seq so can count reads for exons or interval features only similar to countoverlaps this article_presents a highly optimized read_count program called featurecounts featurecounts can be used to quantify reads generated from either rna or dna_sequencing in terms of any type of genomic feature it implements chromosome hashing feature blocking and other strategies to assign reads to features with high_efficiency it supports multithreading which provides further speed improvements on large data problems it is available either as a unix command or as a function in the r package rsubread in either case all the core functionality is written in the c programming_language the r function is a wrapper for the compiled c code that provides the convenience of the r programming environment without sacrificing any of the efficiency of the c implementation read summarization is an important step in many next gen sequencing_data analyses in this study we developed a new read summarization program called featurecounts and compared it with existing_methods in terms of efficiency and accuracy our results showed a high concordance between alternative_methods in summarization accuracy however there was a large difference observed in their computational_cost the featurecounts method was found to be an order of magnitude faster on average and far more memory_efficient than other methods the high computational_efficiency of featurecounts is due to its ultrafast feature search algorithm and its highly_efficient implementation entirely using the c programming_language all results presented in this article were produced using a single thread but featurescounts also supports multithreaded processing making it particularly useful for summarizing data generated in large sequencing studies it is the only existing read_count method that supports multithreading this program provides a wide_range of options to allow users to fully control how their read data can be best summarized users can choose whether they should count the reads that overlap with more than one feature or meta feature this choice is often determined by the experiment type reads overlapping with more than one gene a meta feature should not be counted in a rna_seq experiment because such reads can only originate from one gene but usually they should be counted in a gdna seq experiment such as a histone chip_seq experiment this program also allows users to filter out reads before summarization using a number of metrics such as mapping quality_scores fragment mappability whether two ends from the same fragment are both successfully mapped or not fragment length strandness chimerism and so on it can automatically detect either sam or bam format read input and sort reads by name if paired_reads are not in consecutive positions in the input it also allows users to specify whether those reads that were reported with more than one mapping location multi mapping should be counted or not many of these useful features are not supported by other programs the featurecounts program has been implemented in both sourceforge subread package and bioconductor rsubread package the r function provides users with an r interface so that they can access this program from their familiar r environment it calls the underlying compiled c program to perform all the read summarization operations and hence has the same speed and memory_usage as that of the sourceforge subread package which is written entirely in c the implementation of featurecounts in r enables complete pipelines to be established for analyzing next gen sequencing_data using bioconductor software programs for example functions included in bioconductor_packages rsubread limma and edger can be used to perform complete rna_seq and histone chip_seq analyses starting from read_mapping to read summarization and finally to differential_expression or differential histone_modification analyses owing to its high_efficiency and accuracy we believe the featurecounts program will be a useful tool in the bioinformatics toolbox for analyzing next gen sequencing_data 
