sequence_analysis sw gpu enabled exact alignments on genome_scale matija korpar and mile s ikic ikic ikic we propose sw a new cuda graphical processor unit enabled and memory_efficient implementation of dynamic_programming for local_alignment it can be used as either a stand alone application or a library although there are other graphical processor unit implementations of the smithwaterman_algorithm sw is the only one publicly_available that can produce sequence_alignments on genome_wide scale for long_sequences it is at least a few hundred times_faster than a cpu version of the same algorithm availability source_code and installation_instructions freely_available for download atsequence alignments are fundamental in bioinformatics as they can provide information about unknown genes and proteins they also have an important role in comparative sequence_assembly in sequence_alignments both time and accuracy determine the successful performance of the method two classic algorithms for local_alignment are smith_waterman and blast the smithwaterman_algorithm an exact method aims to find the best local_alignment between two sequences it is a variation of the dynamic_programming needlemanwunsch algorithm blast a heuristic approach runs faster and requires less space memory this advantage has a high relevance for the alignment of long dna_sequences however blast does not guarantee an optimal alignment although original smithwaterman_algorithm runs in quadratic time and space the space complexity can be reduced to linear despite the improvement in memory_consumption the smithwaterman_algorithm runs too slowly to be useful for discovering homologous_genes hence newer heuristic methods have been focused on reducing computation time at the expense of accuracy because only exact algorithms guarantee optimal alignments there is a lack of a method for verifying results on genome_scale in addition popular heuristic tools for global_alignment such as mummer and lastz use dynamic_programming in their final step the increasing_popularity of using cuda enabled graphical processor units gpus has intensified work on accelerating the smithwaterman_algorithm however to the best of our knowledge the only pairwise gpu_implementation with optimized space complexity tested on the chromosome level is cudalign but it writes large amount of data to hard_disk uses a single card and it is not publicly_available in this article we present our parallel implementation of the smithwaterman_algorithm highest substitution score if the lengths of the subsequences are m and n where m n parameter m can be calculated as min n nt ge m where ge is the gap extension penalty padding p can then be calculated as ceil ntm this observation is done by calculating the maximum_score that a cell can reach and comparing it with the found score the cell_blocks that do not contain any of the diagonals between p and p mn are pruned the reconstruction phase considers only the cells between the start and the endpoint we combined the wavefront method with the modified myersmiller algorithm this phase is done in parallel by both the cpu and the gpus for pruning the banded algorithm is applied the padding is calculated on the whole matrix and given to the solving halves for pruning the maximum edit_distance t is calculated as max m n score where m and n are the lengths of the sequences between the startpoint and the endpoint and the score is the alignment score the myersmiller algorithm is applied recursively in this manner difference from the original algorithm is that it stops as soon as the solving submatrix size drops below defined boundaries when this size is small enough gpu part sends it to the cpu part as the scores of the submatrices are known the cpu part performs the banded algorithm with the backtracking finally alignments of the submatrices are joined in the complete alignment application run times are displayed in measurements are done using two different gpu cards and cpu intel quad processor q the gtx card on which we performed measurements is slightly more capable than gtx used in sandes and melo we present the result achieved with a maximum of two gpu cores compared with the presented results for cudalign the scores were identical sw is slower only for very long alignments on single gpu card however as opposed to cudalign it does not use any additional disk_space can use multiple cards and is publicly_available moreover the global and semi global dynamic_programming are implemented sw could also be used as a library in all methods that use exact alignment of long_sequences in one of the steps supported operating_systems are windows linux and mac os 
