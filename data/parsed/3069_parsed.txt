genome_analysis molbiolib a c framework for rapid development and deployment of bioinformatics tasks we developed molbiolib to address the need for adaptable next_generation analysis tools the result is a compact portable and extensively tested c software framework and set of applications tailored to the demands of next_generation data and applicable to many other applications molbiolib is designed to work with common file_formats and data types used both in genomic analysis and general data analysis a central relational_database like table class is a flexible and powerful object to intuitively represent and work with a wide_variety of tabular datasets ranging from alignment data to annotations molbiolib has been used to identify causative single_nucleotide in whole_genome detect balanced chromosomal_rearrangements and compute enrichment of messenger_rnas mrnas on microtubules typically requiring applications of under lines of code molbiolib includes programs to perform a wide_variety of analysis tasks such as computing read_coverage annotating gen_omic intervals and novel peak_calling with a wavelet algorithm although molbiolib was designed primarily for bioinformatics purposes much of its functionality is applicable to a wide_range of problems complete documentation and an extensive automated test suite are provided availability molbiolib is available for download at http sourceforge net_projects molbiolib contactnext generation sequencing requires a data analysis approach capable of handling large complex and varied datasets from large sets of reads to complex polymorphisms to existing feature files in addition the competitive nature of research demands rapid development of methods that are flexible enough to integrate new and quickly evolving algorithms tools have been developed to address these needs such as gatk however packages written in java e g gatk require the maximum memory heap space to be specified at run time limiting how the input_data are formatted and handled for example a coverage program would require more memory to compute coverage of a query ordered sam file versus a position ordered sam file because a sliding_window of coverage cannot be used programs written in c do not require the heap size to be specified and are only limited by the amount of available memory other packages written in c have their strengths but they also have limitations that suggest a niche for our software molbiolib arachne the net bio project by outercurve foundation outercurve and ncbis c toolkit provide many functions but are not compact and do not always clearly identify the primary objects furthermore the net bio project is specific to the windows environment and arachne is specific to a particular linux environment ibms genomictools has many very useful tools but addresses common bioinformatics tasks at a lower level than molbiolib such as providing command_line rather than a unified program to generate chip_seq output other packages such as bio libsequence and tigr are targeted toward specific applications and not designed to provide breadth of functionality the package that most closely_resembles molbiolibs philosophy is seqan though it is written in an older version of c and thus does not take advantage of the variadic templates or other modern features of c iso iec molbiolib fills the need for a platform independent extensively tested compact and efficient c library and an extensive set of bioinformatics applications that can be used to analyze data and rapidly develop new tools molbiolibs library includes a variety of useful objects and functions such as a relationaldatabase like object a text_file reader object that simplifies data input statistical functions and peak_calling methods that can operate on any array of values such as per base sequence_coverage in addition molbiolib includes a broad range of tools such as to generate coverage hits of reads to features and chip_seq all in one unified package the design of molbiolib is based on four principles the first is to simplify bioinformatics programming in c achieved by developing a library that includes many common bioinformatics tasks for example c requires programmers to write specialized data_structures to sort associated data keeping them together such as feature information associated with a position additionally to iterate either sequentially or randomly through a tab separated values tsv file and select values from specific columns would require the creation of a function to split to whom correspondence should be addressed the author s published_by this is an open_access the terms of the creative commons attribution license http creativecommons org licenses by which permits unrestricted use distribution and reproduction in any medium provided the original_work a line on tabs and constructs to index and traverse a text_file these and many other common tasks are built into molbiolib thus greatly simplifying the code one needs to write it is hoped that molbiolib will allow bioinformaticians to consider c as a possible language of choice second molbiolib is efficient c is used because it is the new standard that introduces constructs for making objects such as table c is efficient since it is a compiled language with no inherent restriction on memory heap size at run time templates are used extensively to compact code avoid inefficient virtual table lookups and maintain type safety objects and method parameters are often templated so that they may be in lined by the compiler third molbiolib promotes clarity and compactness by consolidating common operations into a concise set of objects we also provide an extensive library of functions that are not intrinsic to one object such as those that convert one data type to another e g splitstring converts a string to a vector string given the range of problems molbiolib addresses the source_code is compact lines of code and comments for the core objects and functions among the included applications are coded in fewer than lines and in fewer than lines in contrast without such a framework the user would have to code the thousands of lines of code to reproduce molbiolibs functionality finally molbiolib is extensively tested and facilitates easy testing and debugging of its applications automated tests are provided for all objects and functions additional validation of the code base comes from extensive application of molbiolib to many molecular_biology projects raif s geha manuscript in preparation to simplify use of molbiolib all libraries are include files following the boost convention debugging and memory checking is thus facilitated with tools such as with valgrind seward and since applications in molbiolib consist of a main program file with many include files additional input and programming checks are incorporated into the framework through optional compiler flags molbiolib fills the need for an efficient reliable and compact c bioinformatics framework it is portable across many platforms and aligner formats and is fully documented molbiolib is unique in offering complete analysis programs for a variety of other very common tasks not addressed by other toolkits from feature hit counts to coverage to chip_seq molbiolib classes offer considerable power and convenience for creating novel analysis applications a central and very general table class simulating the functionality of a database eases construction of many programs the table class is based on a collection vectors thus having a small memory overhead compared to other data_structures such as a map capacity for larger datasets is only limited by the amount of available memory file readers provide efficient methods to perform ubiquitous file i o tasks these classes will have general_utility for application development beyond the specific needs of computational_biology as molbiolib gains adoption we aim to incorporate many of the applications both user contributed and those developed for our projects into the main distribution through the sourceforge net code repository mechanism 
