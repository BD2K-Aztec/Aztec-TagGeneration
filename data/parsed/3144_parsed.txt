genetics_and multigems detection of snvs from multiple samples using model_selection on high_throughput single_nucleotide snv detection procedures are being utilized as never before to analyze the recent abundance of high_throughput dna sequencing_data both on single and multiple sample datasets building on previously_published work with the single sample snv caller genotype model_selection gems a multiple sample version of gems multigems is introduced unlike other popular multiple sample snv callers the multigems statistical_model accounts for en zymatic substitution sequencing_errors it also addresses the multiple_testing endemic to multiple sample snv calling and utilizes high_performance hpc techniques results a simulation_study demonstrates that multigems ranks highest in precision among a selection of popular multiple sample snv callers while showing exceptional recall in calling common snvs further both simulation_studies and real_data indicate that multigems is robust to low quality data we also demonstrate that accounting for enzymatic substitution sequencing_errors not only improves snv call precision at low mapping quality regions but also improves recall at reference allele dominated sites with high mapping quality availability_and the multigems package can be downloaded from https github com cui lab multigems in recent_years a precipitous fall in the costs of dna_sequencing has led to a similarly precipitous rise in the amount of available dna sequencing_data using such data projects such as the genomes and the international_hapmap have done much to catalog human genetic_variation such projects have put an emphasis on sequencing multiple samples as it has been demonstrated thatgiven a fixed sequencing budget the total number of population variants identified can often be increased by decreasing the coverage and increasing the number of samples sequenced this is in fact a motivation for the genomes_project low coverage pilot_project genomes as single_nucleotide snvs are the most common type of sequence_variation many data analysis tools have been created to detect snvs from dna sequencing_data however the prevalent single sample snv detection procedure has proved insufficient with the availability of data from multiple samples there are generally two possibilities for snv detection using single sample snv callers on multiple sample data first it is possible to pool the multiple sample data and run single sample snv callers on all the data as if it were one sample this can however reduce the number of legitimate snv calls as rare snvs are often dismissed as errors also pooled data genotype_calls may not be indicative of the true sample genotypes for example if half of the samples are homozygous reference and the other half are homozygous variant then the pooled genotype call will likely be heterozygous even when none of the samples are such second single sample snv callers can be run on all the samples independently and the output snv call lists can be combined this procedure may be useful if the analysis objective is to find variants unique to individual samples however for the most part this procedure will greatly inflate the false_positive a common solution to these issues is the development of multiple sample snv callers these procedures utilize data from multiple samples to identify both common and rare snvs as well as snvs which may have limited support across multiple samples the amount of snvs called would generally be between that of the two possibilities mentioned above that is the goal of multiple sample snv callers is to have a good balance of precision and recall with respect to all the samples analyzed there are however concerns with currently available multiple sample snv callers a primary_concern is how to utilize all important and available information to accurately call snvs from multiple samples other concerns include the resulting multiple_testing that arises computational performance and robustness to lowquality sequencing and alignment data all of these concerns are addressed with the multiple sample genotype model_selection multigems snv caller which will here be introduced multigems builds on the previously_published single sample snv caller gems and estimates sample genotypes and genotype probabilities for possible snv sites unlike other popular multiple sample snv callers the multigems statistical_model accounts for enzymatic substitution sequencing_errors also in consideration of the multiple_testing associated with snv calling snvs are called using a local_false lfdr estimator further multigems utilizes high_performance hpc techniques for computational_efficiency and is robust to low quality sequencing and alignment data since each genomic site is considered independently in the multigems likelihood analysis of each site can be parallelized for simultaneous computation therefore we have utilized parallel_computing based on the multi core cpu framework openmp technology gnu c c for increased procedure performance the multigems software_package currently supports the input of the samtools pileup alignment format http samtools source forge net pileup shtml and will soon support sam bam alignment files for more information on filtering sam bam_files before converting to samtools pileup files please see the pdf document entitled filtering alignment files https github com cui lab multigems the multigems algorithm can be expanded to call other types of variants such as insertions_and by extending the usage of the n variable in the existing framework this area of investigation would need to consider the impact of utilizing the base call quality_scores when calling indels or other variant types as compared to snvs for users currently desiring an indel calling analysis procedures such as freebayes gatk samtools varscan or dindel are available and can be added to an analysis_pipeline likewise procedures are available for the detection of other types of variation such as copy_number the f score and snv count in parentheses are provided for each snv caller and mapping quality quarter the results are sorted in descending order of the quarter f score values the results are sorted in descending order of f score 
