structural_bioinformatics sprint side chain prediction inference toolbox for multistate protein design sprint is a software_package that performs computational multistate protein design using state of the art inference on probabilistic_graphical the input to sprint is a list of protein_structures the rotamers modeled for each structure and the pre_calculated rotamer energies probabilistic_inference is performed using the belief_propagation or a algorithms and dead_end elimination can be applied as pre_processing the output can either be a list of amino_acid simultaneously compatible with these structures or probabilistic amino_acid profiles compatible with the structures in addition higher_order e g pairwise amino_acid probabilities can also be predicted finally sprint also has a module for protein side chain prediction and single state design availability the full c source_code for sprint can be freely downloaded fromthe objective of engineering a protein to perform a particular biological_function is called protein design the design problem is usually restricted to the search for an amino_acid that assumes a target d structure presuming that it will possess a corresponding function this paradigm typically assumes a fixed protein_backbone and the amino_acid conformations to be considered are taken from a library of energetically_favorable empirical observations termed rotamers lastly pairwise atomic energy_functions are used to assign pseudo physical energetic values to pairs of rotamer atoms and thus employed to score the compatibility of a particular sequence to the structure recently researchers have moved toward more realistic modeling of proteins in their cellular_environment by generalizing the design concept to explicitly seek sequences that adopt multiple functional_states we have achieved this goal by formulating protein design using probabilistic_graphical here we to whom correspondence should be addressed present the software built to this end sprint side chain prediction inference toolbox for multistate protein design sprint accepts as input multiple protein_structures their respective rotamers and their pre_calculated energies furthermore it is explicitly built to provide the user with a global view of the sequence_space compatible with these multiple structures since we have shown the significance of predicting both multiple low_energy sequences and amino_acid profiles sprint can be downloaded and installed on the users machine in addition due to their object oriented nature sprint modules can be extended to provide user specific functionalities such as atomic energy function calculations for input pdb structures demonstrates a run of the sprint package on the peroxisome_proliferator ppar interface design problem from as input rotamer rotamer energies must be pre_computed obtained here using the rosettadesign package for each protein_structure and stored in the fastinf format see http www protonet cs huji ac il sprint energies php for details the energy files along with the relevant rotamer lists are the input that sprint uses to construct a probabilistic_graphical since it has been shown that state of the art atomic energy_functions can still benefit from significant_improvement we did not choose a particular energy function to be included in the package but leave this choice to the user thus separating the energetic aspects of the design process from the search_process page the sprint input consists of a set of protein_structures e g k protein their rotamer lists and pre_calculated interaction_energies these are converted into a probabilistic_graphical illustrated here for four positions and a probabilistic_inference algorithm is run the user can choose to output multiple low_energy amino_acid top or globally consistent amino_acid probabilities bottom in this example we demonstrate a run of sprint on the interface of ppar where the goal is to design ppar interface sequences compatible with binding both the retinoic_acid rxr pdb code k and another ppar monomer pdb code prg the sprint command_line options for running these examples are shown on the arrows and the data_files can be found at http www protonet cs huji ac il sprint examples the extensive benchmarking results for the algorithms implemented in the open_source sprint package are shown at far right detailed lists can be found in supplementary tables s s sprint builds a graphical_model to represent all protein_structures in the multistate design by connecting corresponding positions in the structures and requiring that they choose the same amino_acid in sprint will design the ppar interface to be optimal for binding both rxr and another ppar monomer probabilistic_inference is performed using either the bp or a algorithms and typedependent dead_end elimination can be applied as pre_processing for the prediction of low_energy sequences we have previously shown that bp based_approaches outperform other methods in predicting sequences with low energies and computing more accurate sequence_profiles see supplementary tables s s and accompanying references for details the user can choose to predict either multiple low_energy sequences suitable for the input protein_structures or to predict amino_acid probabilities for each position or pair of positions shows both options with the interface sequences most suited to bind both rxr and ppar top and positional probabilities bottom calculated by approximating a statistical_evaluation of all possible sequences weighted by the boltzmann_distribution of their side chain conformational free_energies in it was found that the sequences predicted to bind both targets better match evolutionary ppar profiles than those optimized to bind only one target to this date we have successfully used sprint for numerous single state design_problems to designed positions rotamer space to and hundreds of multistate design_problems positions up to three states with combined rotamer space where in all cases all amino_acids were permitted at each design position lastly we note that sprint also has a module for protein side chain placement and single state design see web_site for details 
