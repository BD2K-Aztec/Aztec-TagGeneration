genetics_and ffpopsim an efficient forward simulation package for the evolution of large populations motivation the analysis of the evolutionary_dynamics of a population with many polymorphic_loci is challenging as a large number of possible genotypes needs to be tracked in the absence of analytical_solutions forward computer simulations are an important tool in multi_locus population_genetics the run time of standard algorithms to simulate sexual populations increases as l with the number of loci l or with the square of the population_size n results we have developed algorithms to simulate large populations with arbitrary genetic_maps including multiple crossovers with a run time that scales as l if the number of crossovers is restricted to at most one the run time is reduced to l l the algorithm is based on an analogue of the fast_fourier fft and allows for arbitrary fitness functions i e any epistasis in addition we include a streamlined individual based framework the library is implemented as a collection of c classes and a python interface forward simulations of population_genetics track either the number of individuals carrying each possible genotype or the genotype of every individual in the population as illustrated in the latter strategy has been implemented in a number of flexible simulation packages in large populations with a moderate number of loci l storing the abundance of all possible l genotypes is often faster simulating such large populations with a small number of loci is for example essential when studying the evolution of drug_resistance in viral or bacterial_pathogens individual based population_genetics simulations are straightforward and usually use a discrete generation scheme in which processes such as mutation selection and migration are applied at every generation to every individual individuals are then paired up via a mating scheme and recombinant offspring are produced existing toolboxes often emphasize biological realism and allow the user to specify complex life_cycles our emphasis here is on efficient_simulation of large populations the class haploid lowd of ffpopsim tracks the distribution p g of gametes across all possible l genotypes denoted by g s s l where s i see this genotype distribution changes owing to mutation selection and recombination in our implementation selection acts on haploid gametes precluding dominance effects recombination is a computationally_expensive operation as it involves pairs of parents up to l of them that can combine their genome in many different ways l for arbitrary genetic_maps l when allowing single crossovers only as a consequence a naive implementation requires o l or ol l operations to calculate the distribution of recombinant genotypes for arbitrary or single crossover recombination respectively it is intuitive that the complexity of this algorithm can be reduced given a recombination pattern only a fraction of the genome is passed on and all genotypes that agree on that fraction contribute identically we show in the supplementary_material that the distribution of recombinants can be calculated in o l steps for arbitrary crossover patterns and in ol l steps if only a single crossover is allowed this reduces the complexity of evolving sexual populations to that of asexual populations the crucial ingredient for the increased performance is a fast_fourier on genotype spaces explained in detail in the supplementary_material the genotype space is an l dimensional hypercube on which fourier and taylor expansions can be defined after selection mutation and recombination the population_distribution p g contains the expected number of individuals of genotype g in the next generation for stochastic population_genetics we still need to resample the population in a way that mimics the randomness of reproduction this is achieved by resampling individuals according to a poisson_distribution with mean n p g for each genotype the resulting population has a size of approximately n ae o ffiffiffiffi n p the fluctuations in the population_size are small if n is large and do not propagate since the population is resampled de_novo each generation the user can set the expected population_size before resampling and generate any desired time dependent population_size for a general discussion of multi_locus evolution see e g shows how the time required to simulate one generation increases with the number of loci confirming the expected scaling behaviour of the computational_complexity results such as a mutationselectiondrift equilibrium or the decay of linkage_disequilibrium the c library can be linked against custom code and modified for specific purposes the class itself is called haploid lowd as it simulates a haploid population with a relatively small number of loci as an example we discuss here the problem of fitness valley crossing which has recently received_attention in the population_genetics literature and requires forward simulation of large populations while tracking the state of several loci consider a fitness_landscape where the wild_type genotype has malthusian fitness s the quadruple mutant has fitness s s and all intermediate genotypes have the same slightly deleterious fitness s relative to wild_type the time required for crossing the valley can be computed by the following routine import ffpopsim l number of loci n e population_size create population and set rates p ffpopsim haploid lowd l p set recombination_rates p set mutation_rates e start with wildtype b p set genotypes set positive relative fitness for wildtype and quadruple mutant b p set fitness_function evolve until the quadruple mutant spreads while p get genotype_frequency b p evolve print p 
