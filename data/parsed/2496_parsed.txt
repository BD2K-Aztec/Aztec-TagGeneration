genome_analysis integrated annotation and analysis of genetic_variants from next_generation studies with variant tools motivation storing annotating and analyzing variants from next_generation projects can be difficult due to the availability of a wide_array of data_formats tools and annotation sources as well as the sheer size of the data_files useful tools including the gatk annovar and bedtools can be integrated into custom pipelines for annotating and analyzing sequence_variants however building flexible pipelines that support the tracking of variants alongside their samples while enabling updated annotation and reanalyses is not a simple task results we have developed variant tools a flexible annotation and analysis toolset that greatly_simplifies the storage annotation and filtering of variants and the analysis of the underlying samples variant tools can be used to manage and analyze genetic_variants obtained from sequence_alignments and the command_line driven toolset could be used as a foundation for building more sophisticated analytical_methods availability_and variant tools consists of two command_line driven programs vtools and vtools report it is freely_available varianttools sourceforge net distributed under a gpl license tracking samples and predicted variants from next_generation projects often requires building custom analysis_pipelines data standards such as the browser_extensible bed general_feature format and variant_call vcf file specifications can be used to represent these variants in a common format simplifying integration of tools and the construction of these analysis_pipelines difficulties include the integration of diverse annotation sources and the management of many large intermediate files containing millions of predicted variants and millions more associated annotations for each sample these annotation sources and intermediate files often have fundamental inconsistencies using either or based coordinates and potentially different genomic builds which can complicate their management and integration to whom correspondence should be addressed for biologists or analysts who have familiarity with programming and running tools from the command_line there are many useful tools that can be integrated into custom pipelines to annotate and filter variants these tools include annovar and bedtools however building effective pipelines that relate variants to their samples and sample attributes such as cases and controls while applying multiple annotation sources require a large customization effort a framework for building pipelines that facilitate simple reproducible and recurrent analyses is currently lacking therefore we have developed variant tools a flexible open_source toolset upon which custom pipelines can be easily constructed this toolset facilitates the storage of variants alongside their sample details as well as the annotation filtering and reporting of these variants at multiple levelsstarting with variant reports based on individual samples to project wide variant reports despite an intuitive command_line some high_level reports such as calculating sample transition transversion ratios or reporting the number of variants per gene involve several vtools commands to simplify the use of variant tools we provide a reporting command vtools report that generates example summary reports these reports make the use of variant tools more practical and the vtools report source_code provides examples of how to combine and further customize vtools commands within variant tools variants are linked to but stored separately from their annotations within a relational_database helping to conserve disk_space by removing the need to store large and repetitive intermediate annotation files database indexes are automatically created to improve query performance during annotation and filtering though these do add to the storage requirements of variant tools for an example we created a vtools project with whole_genome vcf files with million predicted sample variants this required gb of disk_space to store the variants and indexes within an sqlite database compared to gb of disk_space for the vcf files compressed or gb uncompressed a benefit however of the vtools approach is that these variants were stored using both hg and hg genomic_coordinates within sqlite when using a macpro workstation with two quad core intel_xeon processors at ghz and gb of ram the project creation required hours this time can be reduced to an hour if variants are processed in parallel by vtools on a cluster system before they are merged to a larger project the time required for subsequent annotation and filtering of these variants ranged from to min additional details and other examples can be found in the tutorials section of the software website we have provided a preconfigured but customizable framework for the analysis of variants from next generation sequence_data although our efforts were motivated by a desire to produce initial non statistical_analyses we are currently expanding our software to include a suite of powerful tests for association studies our general framework will allow the implementation and comparison of a wide_array of analytical_methods funding national_institutes grants r ar u gm r ca and r hg schissler foundation to f a s l lyda hill foundation to b p 
