sequence_analysis biosmalltalk a pure object system and library for bioinformatics we have developed biosmalltalk a new environment system for pure object oriented bioinformatics programming adaptive end_user programming systems tend to become more important for discovering biological_knowledge as is demonstrated by the emergence of open_source programming toolkits for bioinfor_matics in the past_years our software is intended to bridge the gap between bioscientists and rapid software prototyping while preserving the possibility of scaling to whole system biology applications biosmalltalk performs better in terms of execution time and memory_usage than biopython and bioperl for some classical situations availability biosmalltalk is cross_platform and freely_available mit_license through the google project hosting atwe present a novel free open_source foss platform for the development of bioinformatics software and applications biosmalltalk attempts to reconcile the current de facto scripting modalities of textual programming_languages with the features of smalltalk which has a pure object dynamic_programming environment biosmalltalk provides similar functionality to other foss toolkits for bioinformatics such as bioperl biopython and biojava based in industry leading general_purpose textual programming_languages precedent of bioinformatics_tools exists in smalltalk but none of them has tried to provide a bioinformatics application_programming api moltalk was developed in steptalk a scripting environment for doing structural_bioinformatics also a cross_platform graphical_user gui for protein sequence_analysis was done in smalltalk object orientation oo is a term first coined by one of the smalltalk inventors alan kay it was initially conceived as a programming paradigm based on the recognition of realworld communicating objects in computer simulations oo features were integrated accordingly to platform limitations in virtually all major programming_languages and toolkits including the bio projects the bio toolkits usage of oo is commonly hybrid or emulated through modules mixing objects with primitive data types and hampering the use of reflective functionalities biosmalltalk benefits from decreased source_code verbosity and its execution in a self contained snapshot system that promotes run time adaptability critical for systems where shutdown cycles cannot be tolerated we delivered an interactive programming system using a fully reflective language for bioinformatics development we believe that our platform is suitable for a bioinformatics evolution to human centered long running software of interest for future_research is building a user base and solid automated build process we are open to collaboration in any of the areas in which biosmalltalk project can evolve a downloaded ncbi_blast xml result is filtered with alignments matching nucleotide_bases alignment object is built from sequences and exported as fasta in a file 
