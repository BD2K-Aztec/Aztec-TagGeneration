detecting dispersed duplications in high_throughput sequencing_data using a database free approach_motivation dispersed duplications dds such as transposon element insertions and copy_number are ubiquitous in the human_genome they have attracted the interest of biologists as well as medical researchers due to their role in both evolution and disease the efforts of discovering dds in high_throughput sequencing_data are currently dominated by database oriented approaches that require pre_existing knowledge of the dd elements to be detected results we present dd detection a database free approach to finding dd events in high_throughput sequencing_data dd detection is able to detect dds purely from paired_end read_alignments we show in a comparative_study that this method is able to compete with database oriented approaches in recovering validated transposon_insertion events we also experimentally validate the predictions of dd detection on a human dna_sample showing that it can find not only duplicated elements present in common databases but also dds of novel type availability_and the software presented in this article is open_source and available from https bitbucket org mkroon the term dispersed duplication dd denotes any dna_sequence duplicated non locally in a genome dds include copies of transposable_elements such as members of the alu and l families which are ubiquitous in the human_genome but also less frequent duplications such as chromosomal_translocations and copies of mitochondrial dna_sequences embedded in nuclear_dna dds are very common as estimates show that known transposable_elements comprise nearly of the human_genome an arbitrary human sample may contain upwards of dds compared to the reference_genome dds have been found to be disruptive to the genome altering gene_expression and sometimes causing disease this type of structural_variation has often been considered in cohort_studies aiming to link phenotypes to causal_variants consequently there has been an increased effort in developing methodologies to uncover genetic_variation beyond the single nucleotide level the advent_of dna_sequencing provides a new information_source for genetic_variant discovery that is both fast and is steadily becoming less expensive however whole_genome output is typically bulky and non trivial to analyze highlighting the need for robust and computationally_efficient analysis methods there is a variety of tools available to find structural_variants in sequencing_data e g cnvnator genomestrip pindel and breakdancer typically these tools can be applied in a resequencing setting where a reference_genome is available and the dna_sample to be investigated is sequenced with low to moderate coverage short_sequencing are produced of approximately nucleotides_long and subsequently aligned to the reference current sequencing_technology allows the production of paired_end where two ends of a larger fragment are sequenced adding more information about the expected alignment of these reads insertions of transposable_elements are one important class of dds and most currently available methods detect these types of variation using a predefined database some of the known tools that cover this type of variation are retroseq telocate tangram and mobster the usual strategy for detecting dds in sequencing_data is to look for anomalous read_alignments and try to realign the respective reads or read parts to a database of known duplication sequences a dd insertion is called when a certain number of aligned_reads support the same duplication element type and show consensus on the insertion_site another previously_published method named gustaf does not realign to a database but focuses completely on split read_alignments to identify dds this study aims to develop a method to find dds without requiring realignment to a predefined database of known elements instead detecting dds based on the information provided by discordant alignment of read_pairs and partially aligned_reads allows our method to find elements that have not been included in available databases or have not even been discovered yet the method described in this article can be seen as a complement to the existing methodology referenced earlier as it is applicable to situations where providing a database of known duplication elements is not desirable we introduce dd detection as a method that can be used in a resequencing setting where short paired_end are aligned to a reference_genome the underlying algorithm is implemented with adjustable_parameters to allow users to have it perform according to their custom needs and wishes we compared the sensitivity of dd detection with database oriented methods using a human dna_sample for which extensive experimental validation_data are available in addition we tested the specificity of our method using new human samples and performed experimental_validation with sanger_sequencing to find out how well dd detection could identify both dds of known structure and novel types we implemented the method presented in the previous section and named it dd detection the program is easy to use configurable and capable of processing whole_genome input on a modern desktop computer system for example on a regular system core ghz processor gb_memory with human wholegenome sequencing_data coverage as input running dd detection with four threads and otherwise default_parameters takes min and consumes approximately gb peak physical gb peak virtual memory the c source of the program together with installation_instructions can be found online at https bitbucket org mkroon dd detection we have used dd detection to investigate the performance of our method for both medium and high coverage human dna alignment data dd events called on publicly_available data from the genomes_project the genomes_project consortium are used to compare the performance of dd detection to that of alternative_methods we also applied dd detection to a twosample human dataset and validated in corresponding dna samples a number of calls for both known transposon elements and elements not present in common databases 
