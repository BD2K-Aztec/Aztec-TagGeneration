phylogenetics mirroring co evolving trees in the light of their topologies motivation determining the interaction_partners among protein_domain poses hard computational problems in particular in the presence of paralogous proteins available approaches aim to identify interaction_partners among protein_domain through maximizing the similarity between trimmed versions of their phylogenetic_trees since maximization of any natural similarity_score is computationally difficult many approaches employ heuristics to evaluate the distance_matrices corresponding to the tree_topologies in question in this article we devise an efficient deterministic algorithm which directly maximizes the similarity between two leaf labeled trees with edge lengths obtaining a score optimal alignment of the two trees in question results our algorithm is significantly_faster than those methods based on distance_matrix comparison min on a single processor versus h on a supercomputer furthermore we outperform the current state of the art exhaustive_search approach in terms of precision while incurring acceptable losses in recall the vast_majority of cellular_functions are exerted by combinations of interacting gene_products as a result preservation of functionality among proteins and other gene_products typically implies preservation of interactions across species it is well established that proteinprotein_interactions both physical_interactions as well as co occurence of domains are preserved through speciation_events see lovell and robertson and the references therein a major implication of this is that the evolutionary trees behind two interacting protein_families can look near identical as interacting_proteins have a tendency to co evolve it may be possible to assess the potential of two or more proteins or other gene_products being interaction_partners by measuring how similarly they evolve across related species for this purpose a number of computational strategies have been developed such strategies aim to compare the phylogenetic_trees of two or more protein or protein_domain where paralogs and orthologs are represented with leaves with appropriate labels and internal vertices can be interpreted as either speciation or duplication_events among these strategies we will focus on mirrortree approaches which explicitly or implicitly map leaves of a pair of trees belonging to two distinct proteins or gene_products onto one another such that the leaves that are mapped to each other would be identified as potential interaction_partners mirrortree approaches aim at an overall quantification of family similarity via a measure of tree similarity typically these approaches do not aim to modify the specific topology of the underlying phylogenetic_trees and thus are different from tree_reconciliation approaches they are also distinct from phylogenetic profiling methods which aim to measure the phylogenetic profiles of proteins or domains to check for potential interaction_partners the first mirrortree approach was proposed to discover protein protein rather than domaindomain interactions and was based on comparing the distance_matrices resulting from the multiple_alignment members of each protein_family note that one can interpret this as mapping leaves onto one another as will be explained below since this study a number of mirrortree approaches have been developed almost all of these approaches are again based on comparing distance_matrices rather than the trees directly see the introductory paper byand pazos and valencia for more references in fact direct comparison of gene_trees has been considered as a problem yet to be fully resolved in this article we consider a fresh approach to the problem of predicting protein or other gene_product interactions by comparing gene_trees directly without the aid of a distance_matrix note that such a distance_matrix is a byproduct of the underlying phylogenetic_tree popular multiple_sequence methods typically align sequences in the order imposed by their phylogenetic_tree and the distances in the matrix correspond to the distances in the phylogenetic_tree as a result our method should be considered as a more direct approach to mirroring trees in the case where there are no paralogs of any gene assessing tree similarity is both computationally straightforward and reliable more specifically if there is at most one family_member per species the mapping problem reduces toruntime the possibly most striking advantage of our topologybased approach is the drastic_reduction of runtimewe can compute mappings for the interacting domain families in roughly min on a single cpuin comparison to h on marenostrum needed for the metropolis search performed by note that there are rapidly_growing large_scale phylogenetic databases such as ensembl http ensembl org or phylomedb http phylomedb org whose growth is further accelerated by next_generation projects as of th august phylomedb contains phylogenetic_trees the reduction in runtime delivered by our approach certainly overcomes a major obstaclewe render largescale mapping and as a consequence comparison of paralog rich gene_trees feasible note that this reduction has become possible by imposing both computationally and biologically reasonable constraints on the search_space while at the same time allowing for an efficient scheme to find the global optimum within these constraints search_space size recall comparing c opt with the method of heuristic overall clearly achieve best recall as pointed_out above this comes as no surprise since we cannot explore pairings that contradict the topologies of the paired trees quite surprisingly though although usage of tree_topology and neighbor_joining trees in particular have been discussed rather controversially we find that still the majority of pairings with the strictest constraints and for allowing isolated and parallel deletion can be determined by a topology based_approach these numbers may put usage of neighbor_joining tree_topology in mirrortree approaches into a general perspective moreover note that the fraction of correct domain pairs computed by our method over that of the heuristic_search method is tp c opt tp heuristic recall c opt recall heuristic 
