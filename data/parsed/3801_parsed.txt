pycellerator an arrow based reaction like modelling language for biological simulations motivation we introduce pycellerator a python_library for reading cellerator arrow notation from standard text_files conversion to differential_equations generating stand alone python solvers and optionally running and plotting the solutions all of the original cellerator arrows which represent reactions ranging from mass action michalesmentenhenri mmh and gene_regulation grn to monodwymanchangeaux mwc user_defined reactions and enzymatic expansions kmech were previously represented with the mathematica extended character set these are now typed as reaction like commands in ascii text_files that are read by pycellerator which includes a python command_line cli a python application_programming api and an ipython notebook interface results cellerator reaction arrows are now input in text_files the arrows are parsed by pycellerator and translated into differential_equations in python and python code is automatically generated to solve the system time courses are produced by executing the auto generated python code users have full freedom to modify the solver and utilize the complete set of standard python tools the new libraries are completely_independent of the old cellerator software and do not require mathematica availability_and all software is available gpl from the github repository at https github com biomathman pycellerator releases details including installation_instructions and a glossary of acronyms and terms are given in the supplementary_information cellerator describes biological_interactions with a reaction like arrow based input language input strings are converted into differential_equations and integrated to produce numerical time course predictions using mathematica extensions include cellzilla for two_dimensional tissue simulation and kmech for exact enzymatic expansion there are many tools that convert reactions to differential_equations and solve them particularly in python but they do not use an arrow based language in the same manner as cellerator examples_include pysces which has its own text modeling language pydstool for hybrid_systems and pybrn pybrn sf net for sbml like structures perhaps the closest conceptually to pycellerator are pysb and sbml shorthand pysb is a rule_based system with a collection of text language rules that are merged into python commands models are built as python programs sbml shorthand is not a simulator it is a pre processor for converting models into sbml in which each reaction is represented by a single_line of text in addition a number of popular stochastic_simulation tools are also implemented in python pycellerator also provides a simulation modelling programming and analysis interface in pycellerator the modelling language corresponds to and extends the arrow language introduced in cellerator each arrow corresponds to a cellerator arrow but it can now by reprsented with ascii arrow like characters the pycellerator library provides a command_line cli an application_programming api and an ipython notebook interface so that users have a choice of python programming environments mathematica is not required pycellerator variables may be specified using an array index notation to represent multiple compartments or multi_stage cascades a possible future extension to the software would be two and three_dimensional tissue based implementations similar to cellzilla dynamical grammars can also be implemented using a more expressive notation that makes this modelling paradigm significantly more powerful rule_based graph grammars and hybrid_systems for example could be automaticallygenerated using the techniques we have described here the cellerator arrow notation for specifying biological_interactions has been implemented in a human_readable text_based language parsers could be written in any language extensible open_source python libraries are provided for cli api and notebook support the ipython notebook provides pycellerator with a very convenient front end for modelers who want to combine code text markup and figures together in single documents this is particularly useful for training researchers the libraries can be used either as a frontend to produce or interact with other solvers or as end_user solvers in of themselves sample output cutoff for simulating oscillations in a map_kinase this model is structurally identical to with two modifications time dependent input and a competitive feedback reaction a similar model was proposed by and oscillations have been observed in yeast by the model file and output code are shown in supplementary figures s and s 
