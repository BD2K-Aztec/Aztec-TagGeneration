systems_biology gene_function from synthetic_lethality networks via ranking on demand motivation synthetic_lethal interactions represent pairs of genes whose individual mutations are not lethal while the double_mutation of both genes does incur lethality several studies have shown a correlation between functional_similarity of genes and their distances in networks based on synthetic_lethal interactions however there is a lack of algorithms for predicting gene function from synthetic_lethality interaction networks results in this article we present a novel technique called kernelrod for gene_function from synthetic_lethal interaction networks based on kernel machines we apply our novel algorithm to gene_ontology functional_annotation prediction in yeast our experiments show that our method leads to improved gene_function compared with state of the art competitors and that combining genetic and congruence networks leads to a further improvement in prediction_accuracy synthetic lethalityconcept and mechanisms synthetic_lethal interactions have received much attention in the genetics community over recent_years a synthetic_lethal interaction refers to a pair of genes which interact in the following sense while mutating each of the two genes individually does not cause lethality a double_mutation of both genes does show a lethal_effect on the organism hence synthetic_lethality seems to indicate a compensatory effect of two genes with one gene compensating for the deletion of the other and with lethal consequences only if both genes are deleted jointly the two main hypotheses to explain synthetic_lethality between two genes a and b are the within and between pathway_models the within pathway hypothesis assumes that both genes a and b are part of the same pathway and that the function of this pathway is diminished by the single_mutations but rendered below the viability threshold by to whom correspondence should be addressed their double_mutation the between pathway hypothesis assumes that a and b act in parallel_pathways that can compensate for defects in the other these two main hypotheses can be extended in more complex models of synthetic_lethality e g see and algorithms for detecting pathways within genetic_networks have been defined based on these hypotheses synthetic_lethality and gene function the compensatory effect of genes in synthetic_lethal interactions and the two main hypotheses to explain this phenomenon already hint at a strong link between gene function and synthetic_lethal interaction this link could be confirmed in several studies report that and of synthetic_lethal interaction pairs have identical or similar gene_ontology go annotations respectively report correlations between go annotations of genes and their distances in so_called congruence networks which are derived from the genetic network these congruence networks quantify similarity between two genes by means of a score that depends on their number of common neighbors in the genetic_interaction graph in a second study report correlations between go annotations of gene_pairs and this congruence score this correlation is strongest for the go annotations that refer to the biological_process and the cellular_component that these genes are part of and weaker for their molecular_function defined diffusion kernels on genetic_interaction networks whose scores were shown to correlate with semantic_similarity of gene_functions according to all three go categories goals and scope of this article while previous_studies focused on examining whether there is a correlation between genetic network_structure and functional_associations b or in discovering pathways our goal in this article is to define algorithmic machinery to rank all the genes in a genetic network based on their likelihood of belonging to a particular functional class given a set of examples from this class this ranking provides guidance in choosing promising targets for experimental function determination first we study this problem of gene_function in yeast and for all three definitions of gene function provided by the go biological_process molecular_function and cellular_component second we assess the prediction_accuracy of our method in comparison with that of state of the art methods third we study whether combining predictions based on geneticwe perform gene_function via cross_validation on a synthetic_lethality network from yeast using kernelrod and several comparison methods bs gba and svm and two class svm seeand and supplementary tables and and supplementary figs and for all results all methods are significantly better than random as a first check we examined whether the results we had obtained with kernelrod gba and bs were better than random for this purpose we generated random rankings on each task and computed the auc values for these random rankings we then used this approximated null_distribution of auc values from random rankings to compute a p value of the results of our methods if the methods worked only as good as a random ranker one would expect to obtain a distribution over p values that is close to uniform as can be seen fromand supplementary the distribution of p values of all methods is skewed toward small p values and highly significantly different from that of a random ranker kolmogorov_smirnov test ks test in this article we have presented kernelrod a novel ranking approach for gene_function from synthetic_lethality networks in function prediction in yeast we observe that our kernel based_approach kernelrod outperforms state of the art methods and that a combined random_walk kernel on genetic_networks and on congruence networks often improves and never harms prediction_accuracy considering indirect interactions walks of length in the synthetic interaction_network results in improved rankings compared with considering only direct_interactions we could confirm that congruence networks are useful for function prediction from genetic_networks as reported by we could also confirm that diffusion or random_walk based kernels are a promising approach to function prediction on genetic_networks as reported by furthermore we also established that random_walk kernels achieve even better page 
