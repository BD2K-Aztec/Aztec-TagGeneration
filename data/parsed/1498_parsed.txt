sequence_analysis dsrc industry oriented compression of fastq_files modern sequencing_platforms produce huge_amounts of data archiving them raises major problems but is crucial for reprodu cibility of results one of the most fundamental_principles of science the widely used gzip compressor used for reduction of storage and transfer costs is not a perfect solution so a few specialized fastq compressors were proposed recently unfortunately they are often impractical because of slow processing lack of support for some variants of fastq_files or instability we propose dsrc that offers compression_ratios comparable with the best existing solutions while being a few times_faster and more flexible availability_and dsrc is freely_available sun aei polsl pl dsrc the package contains command_line compres sor c and python libraries for easy integration with existing software and technical documentation with examples of usage genome_sequencing has growing impact on medicine there are emerging projects like the personal genome_project or the million veteran program in which hundreds of thousands of human_genomes are to be sequenced illumina company offers whole_genome for clinical purposes for a few thousand us dollars the companies like ion_torrent promise the whole human_genome in hours for dollars to be available soon it seems that personalized_medicine for the masses will be available in the near future the low_cost of pure sequencing is not however everything as the data must be stored and transferred the it costs were not treated seriously in the past when the sequencing was expensive and slow nowadays the costs of storage and transfers counted in hundreds of dollars for a single_genome per year are no longer negligible moreover the improvements in this field are far behind what is present in the sequencing an obvious solution to the data deluge is data compression and many specialized compressors appeared in the recent_years see the survey these tools are however rather experimental and tend to suffer from one or more of the following drawbacks i they focus mainly on the compression_ratio and as a consequence de compression is slow sometimes even comparable with the speed of sequencing ii they are available as external tools so the compressed formats cannot be directly used by other software iii they have no support for some types of fastq_files e g in color_space or variable_length reads and iv they are unstable and crash frequently the focus on the compression_ratio can sometimes be justified especially when the goal is just storage for archival purposes in many situations the data are however stored locally and decompressed many times for various analyses so the decompression speed could be a significant factor of the processing_speed of a whole pipeline thus in practice the well known but rather inefficient gzip program is still in wide use we think that it is time for industry oriented solutions thus we introduce dsrc supporting any variant of fastq_files its compression_ratios are much better than gzip bzip and only moderately worse than the best existing programs but the speed of de compression is high dsrc also supports illuminas plan of quality resolution reduction http res illumina com documents products whitepapers whitepaper datacompression pdf and can read write to pipes for easy integration with pipelines with context being the position in the read or the order huffman coder of the run length encoded quality stream in the second method the quality values are compressed arithmetically with context lengths up to to evaluate the proposed compressor we collected datasets for three different technologies illumina fixed_length reads base space abi solid fixed_length reads color_space ls iontorrent variable_length reads base space majority of experiments were performed on a four core amd opteron tm ghz cpus server with raid disk matrix containing hdds in one test we also used the pc machine containing core with hyperthreading i ghz cpu and ssd disk for the comparison we used two popular universal tools pigz parallel gzip and p bzip parallel bzip and the best existing fastq compressors quip fqzcomp seqdb and dsrc the compressors were run in two modes the best ratio and fast compression not necessarily the fastest possible but with a reasonable ratio dsrc consumes mb of main_memory in the fast mode and gb in best mode these values are much higher than of gzip mb in parallel variant but we think they are still acceptable in the lossless mode the best ratios were obtained by fqzcomp but its low_speed makes it rather impractical the compression_ratio of dsrc is smaller but its speed is an order of magnitude or more higher in the fast mode the speed of dsrc is sometimes i o limited while the compression_ratio is still much better than of the de facto standards gzip bzip what is important is that dsrc is similarly fast in both compression and decompression this allows the application in storage of the intermediary results in the processing pipelines potentially with total improvement of the complete processing_speed because of i o transfer reduction the relative results for the illuminas quality reduced data are presented inof the supplementary_file s shows how dsrc speed scales up for growing number of threads 
