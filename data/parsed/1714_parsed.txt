exspander a universal repeat resolver for dna_fragment assembly next_generation ngs_technologies have raised a challenging de_novo problem that is further amplified in recently_emerged single_cell sequencing_projects while various ngs assemblers can use information from several libraries of read_pairs most of them were originally developed for a single library and do not fully benefit from multiple libraries moreover most assemblers assume uniform read_coverage condition that does not hold for single_cell projects where utilization of read_pairs is even more challenging we have developed an exspander algorithm that accurately resolves repeats in the case of both single and multiple libraries of read_pairs in both standard and single_cell assembly projects availability_and http bioinf spbau ru en spades contact ap bioinf spbau rumost of existing next_generation ngs_platforms generate read pairspairs of reads called mates that are sequenced from different ends of a genomic fragment with approximately known length called the insert_size because the insert_size usually exceeds the length of a single_read readpairs may match up unique regions_surrounding repeats that are longer than the read_length a combination of several libraries of read_pairs with different insert_sizes is often used to produce high_quality assemblies paired_end libraries usually have insert_size kb and are used for resolving relatively short repeats jumping libraries are characterized by an average insert_size of anywhere from to kb and are helpful in resolving longer repeats and contig scaffolding inferring the order of contigs in the genome however because of a high insert_size variation information from jumping libraries is rather difficult to use for the purpose of assembly the problem of using multiple read_pair libraries was previously addressed by allpaths_lg ray velvet and some other assemblers however these tools are designed for standard mutlicell assemblies and do not perform well on single_cell datasets on the other hand the single_cell assemblers esc idba ud and spades are designed for a single read_pair library in addition the recently_proposed paired de_bruijn algorithms for repeat resolution also focus on a single library and it remains_unclear how to extend them to multiple libraries we present exspander algorithm that works with both single and multiple libraries in standard and single_cell assembly projects exspander uses a simple path extension approach for repeat resolution that was originally proposed in the ray assembler and later used in telescoper and combines it with some ideas from the rectangle graph approach given a set of paths in the assembly_graph i e simplified de_bruijn of k_mers in reads after removal of bulges tips and chimeric edges exspander attempts to extend each path with the goal to generate longer paths for a path p ending in a vertex v we consider all edges starting at v referred to as extension edges and compute score p e for each extension edge to compute score p e we analyze all reads that map to path p and whose mates map to e thus score p e reflects our confidence that an extension of the path p by the edge e is correct we note that to properly map read_pairs and calculate score p e the total length of path p and edge e should be longer than the insert_size in addition to function score p e exspander uses a decision_rule extend p that either chooses one of the extension edges to extend the path p or makes the decision to stop growing this path beyond the ending vertex of p the procedure is iterated over all the paths until no path can be further extended to initiate this algorithm one can start with a set of single edge paths formed by all sufficiently_long edges in the assembly_graph the resulting paths are output as contigs after removing the paths that are contained within other paths as well as removing non informative overlaps i e suffixes of paths that represent prefixes of other paths this simple approach is merely a framework and depending on the specifics of the scoring_function and the decision_rule it can be either efficient like in the ray assembler or disastrous the authors of telescoper made an attempt to improve on rays scoring_function and to substantiate it with rigorous statistical_analysis however scoring_functions in both ray and telescoper are not universal e g they assume the uniform genome_coverage by reads condition that does not hold for single_cell data we demonstrate that exspander works well on single_cell datasets with multiple libraries we also show that exspander to whom correspondence should be addressed we have presented exspander algorithm for resolving repeats using either a single or multiple read_pair libraries with different insert_sizes which is applicable for both single_cell and isolate bacterial datasets benchmarks across eight popular assemblers demonstrate that exspander produces high_quality assemblies for datasets of different types additionally as illustrated by recent integration of illumina and pacbio reads in spades exspander is a flexible_approach that can be easily modified to work with diverse types of sequencing_data note ng is given in kb number of scaffolds is the total number of scaffolds bp largest stands for the length in kb of the longest scaffold assembled number of mis is the number of misassemblies gf stands for the fraction of genome mapped given in percent in each column the best value is indicated in bold 
