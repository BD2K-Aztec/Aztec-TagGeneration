gkmsvm an r package for gapped kmer svm we present a new r package for training gapped kmer svm classifiers for dna and protein_sequences we describe an improved algorithm for kernel_matrix calculation that speeds run time by about to fold over our original gkmsvm algorithm this package supports several sequence kernels including gkmsvm kmer svm mismatch kernel and wildcard kernel we recently_introduced a gapped kmer svm classifier gkmsvm to detect functional sequence_elements in regulatory dna which has been applied to interpret a wide_range of genomic_datasets while we released a version of our earlier kmer svm as a webserver gkmsvm was only released as c source_code here we present an r package gkmsvm r with several improvements to facilitate easier implementation and broader use our original gkmsvm implementation used a tree algorithm to compute the kernel_matrix in this paper we describe a new algorithm idl bound that speeds up kernel_matrix computation we have implemented the algorithm in c and our r package is easily_accessible on different platforms our package also includes fast implementations of other kernels we refer the c code implementing the faster idl kernel calculation as gkmsvm shows an overview of the gkmsvm analysis_pipeline given two sets of sequences the goal is to build a predictive_model to classify the two sets for example in a gkmsvm is trained to detect regulatory_dna active in a cell_type by using chromatin accessible dna_sequences as the positive set and a set of gc matched inaccessible dna_sequences as negative set the model then can score and predict the accessibility of any dna_sequence the first step is to build the kernel_matrix the pairwise similarity_scores for all the sequences in the positive_and sets this is done using gkmsvm kernel_function gkmsvm kernel posfn negfn kernelfn where posfn and negfn are the input_file names for the positive_and sets fasta_format and kernelfn is the output_file name for the kernel_matrix the second step is to train the svm model using gkmsvm train kernelfn posfn negfn svmfnprfx where svmfnprfx is the output_file name prefix for the svm model support vectors finally to classify score a sequence gkmsvm classify is used gkmsvm classify testfn svmfnprfx outfn to evaluate the algorithm performance we applied it to ctcf and ep datasets described in shows running_times for different values of l and d we observe an average improvement of two fold using a single thread and up to fold using threads ls_gkm designed for training on very large_datasets is typically two times slower with the faster idl algorithm we were also able optimize the svm c parameter for the chip_seq analyzed in we reproduce the results of gkmsvm with gkmsvm r when c and when c is optimized as shown in there is minimal improvement we therefore recommend running with c 
