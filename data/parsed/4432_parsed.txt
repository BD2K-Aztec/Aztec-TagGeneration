systems_biology stochsimgpu parallel stochastic_simulation for the systems_biology toolbox for matlab motivation the importance of stochasticity in biological_systems is becoming increasingly_recognized and the computational_cost of biologically_realistic stochastic_simulations urgently requires development of efficient software we present a new software_tool stochsimgpu that exploits graphics_processing gpus for parallel stochastic_simulations of biological chemical_reaction systems and show that significant_gains in efficiency can be made it is integrated into matlab and works with the systems_biology toolbox sbtoolbox for matlab results the gpu based parallel implementation of the gillespie stochastic_simulation ssa the logarithmic direct method ldm and the next reaction method nrm is approximately times_faster than the sequential implementation of the nrm on a central_processing cpu using our software does not require any changes to the users models since it acts as a direct replacement of the stochastic_simulation software of the sbtoolbox availability the software is open_source under the gpl v and available at http www maths ox ac uk cmb stochsimgpu the web_site also contains supplementary_information decision_making in biological_systems may depend on single molecular reaction events making it necessary to develop and carefully investigate stochastic_simulations of such events a classic example is the pathway bifurcation in phage infected in escherichia_coli cells three exact stochastic_simulation algorithms of chemical_reaction systems are commonly used in systems_biology i the stochastic_simulation ssa of the efficient and exact reformulations ii the next reaction method nrm ofand iii the logarithmic direct method ldm of li and petzold to accurately approximate the statistical_distribution of the molecular populations at any given point in time large ensembles of realizations are needed emphazising the need for efficient to whom correspondence should be addressed computation unlike existing efficient_simulation tools like we use nvidia cuda to transform gpus of modern pcs into massively_parallel co processors cuda is supported by many of nvidias current gpus and is available in many off theshelf computers we present an implementation of these algorithms which computes ensembles of many realizations times_faster on a gpu than on a cpu assuming no specialized knowledge about gpus by the user 
