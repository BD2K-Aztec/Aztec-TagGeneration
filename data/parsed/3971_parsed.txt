repdna a python_package to generate various modes of feature_vectors for dna_sequences by incorporating user_defined physicochemical_properties and sequence_order effects in order to develop powerful computational predictors for identifying the biological_features or attributes of dnas one of the most challenging problems is to find a suitable approach to effectively represent the dna_sequences to facilitate the studies of dnas and nucleotides we developed a python_package called representations of dnas repdna for generating the widely used features reflecting the physicochemical_properties and sequence_order effects of dnas and nucleotides there are three feature groups composed of features the first group calculates three nucleic_acid composition features describing the local sequence_information by means of kmers the second group calculates six autocorrelation features describing the level of correlation between two oligonucleotides along a dna_sequence in terms of their specific physicochemical_properties the third group calculates six pseudo nucleotide_composition features which can be used to represent a dna_sequence with a discrete model or vector yet still keep considerable sequence_order information via the physicochemical_properties of its constituent oligonucleotides in addition these features can be easily calculated based on both the built in and user_defined properties via using repdna availability_and the repdna python_package is freely_accessible to the public atwith the avalanche of biological_sequences generated in the post genomic age one of the most challenging problems in computational_biology is how to formulate a biological sequence with a discrete model or vector yet still keep considerable sequence_order information this is because almost all the existing machine_learning were developed to handle vector but not sequence samples however a vector defined in a discrete model may completely lose all the sequence_order information to avoid completely losing the sequence_order information for proteins the pseudo amino_acid v c the author published_by all_rights for permissions please_e journals permissions_oup com composition or pseaac was propose ever since the concept of pseaac was proposed in it has been widely used in almost all the areas of computational proteomics see e g as well as a long list of references_cited in a recent article encouraged by the successes of using pseaac to deal with protein peptide_sequences a natural question has occurred how to use the similar approach to deal with dna_sequences actually this problem had been encountered in various genome_analysis studies such as dna_recombination spot identification prediction of nucleosome_positioning in genomes investigation of nucleosome organizations functions and promoter prediction since various features derived from dna_sequences have been increasingly used for developing different models to analyze many genome_analysis problems recently a web_server called pseudo k tupler nucleotide_composition pseknc was established to generate pseknc however pseknc is limited to a certain kind of features without the function of user_defined physicochemical_properties in this study we proposed an open_source python_package called representations of dnas repdna which implemented a selection of sophisticated dna features including different kinds of features in three categories to our best knowledge repdna is the first python_package computing comprehensive dna features based on the built in and user_defined physicochemical_properties the repdna package may hold very high potential for enhancing the power in dealing with many problems in computational genomics and genome sequence_analysis to facilitate the studies of dna and nucleotides repdna was proposed which is able to generate various feature_vectors for dna_sequences the performance and efficiency of the various features in repdna have been validated by a series of recent_publications the implementation of each algorithm in repdna has been extensively tested by a large number of testing dna_sequences and the output results were compared with the known values of these sequences to make sure that our implementation is correct 
