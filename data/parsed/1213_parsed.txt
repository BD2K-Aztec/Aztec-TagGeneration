csam compressed sam format motivation next_generation machines produce vast_amounts of genomic_data for the data to be useful it is essential that it can be stored and manipulated efficiently this work responds to the combined challenge of compressing genomic_data while providing fast access to regions of interest without necessitating decompression of whole files results we describe csam compressed sam format a compression approach offering lossless and lossy_compression for sam_files the structures and techniques proposed are suitable for representing sam_files as well as supporting fast access to the compressed information they generate more compact lossless representations than bam which is currently the preferred lossless compressed sam equivalent format and are self contained that is they do not depend on any external resources to compress or decompress sam_files current next_generation produce millions of small dna_fragments reads at once generating file sizes in the gigabyte range at a cost of just a few hundred dollars each generated read is a continuous fragment of data extracted from the processing of a single_genome stored as a string of bases in this paper we consider reads composed of four fundamental bases a c g and t with the inclusion of the letter n which is used to symbolize bases that could take any value a number of meta_data fields are associated with each read to form alignment read information some of these fields add considerably to the space requirement in particular the quality field qual which measures how accurate the bases of the read are with respect to a reference_genome typically requires uncompressed the same space as the sequence of bases several standard formats for storing alignment reads have been adopted each aiming to make it easy to parse and then manipulate them using text processing_tools the most common representations are the fasta fastq and sam or sequence_alignment approaches of these sam is dominant partly because it includes more information about each alignment than the other formats sam has become one of the most used formats for storing alignment data in no small part because it is the output generated by many aligners for example the compressed version of the sam format bam section is currently the preferred structure of the genome_project in this work different approaches that compress sam_files are explored most of the techniques described focus on methods that compress reads and or their associated qual fields which as we will describe are the fields that dominate the space requirement of compressed sam_files another reason for focusing on these two fields is that most of the remaining fields can be derived from these two we also consider the problem of random_access into the stored data providing data_structures that allow the extraction of segments of the information_stored without the need to decompress the whole compressed file finally we introduce a new compressed sam format csam which uses less space for storing the data than the bam format taking similar or lower times to compress decompress and access the data and also supporting queries over multiple_alignments without requiring whole files to be decompressed the csam format compresses the data without using uncompressed data gzip when separated into different components and compressed on a per component basis using gzip maximum compression all percentages are relative to the total space of the respective file with the components that use less than of the total space grouped under the label of smaller components in this case the gzip version compressed the file components to a total of approximately of the original size as can be seen the components seq qual and other dominate the storage in both the original and compressed representation any external extra_information and is currently the only lossless sam compressor beside bam itself that offers a full compression technique supporting random_access to the data furthermore csam is the first sam lossy_compression approach allowing random_access to the stored data we also explore how the proposed compression techniques affect the performance of possible uses of the compressed data 
