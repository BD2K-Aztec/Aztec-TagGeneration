slidesort all pairs similarity_search for short_reads motivation recent_progress in dna_sequencing calls for fast and accurate algorithms that can evaluate sequence_similarity for a huge amount of short_reads searching similar pairs from a string pool is a fundamental_process of de_novo genome_wide alignment and other important analyses results in this study we designed and implemented an exact algorithm slidesort that finds all similar pairs from a string pool in terms of edit_distance using an efficient pattern growth algorithm slidesort discovers chains of common k_mers to narrow down the search compared to existing_methods based on single k_mers our method is more effective in reducing the number of edit_distance calculations in comparison to backtracking methods such as bwa our method is much faster in finding remote matches scaling easily to tens of millions of sequences our software has an additional function of single link clustering which is useful in summarizing short_reads for further processing availability executable binary files and c libraries are available atdue to the dramatic_improvement of dna_sequencing it is required to evaluate sequence_similarities among a huge amount of fragment sequences such as short_reads we address the problem of enumerating all neighbor pairs in a large string pool in terms of edit_distance where the cost of insertion deletion and substitution is one namely given a set of n sequences of equal length s s n the task is to find all pairs whose edit_distance is at most d it is conventionally called all pairs similarity_search all pairs search appears in important biological tasks for example it is required in finding seed matches in all pairs alignment necessary in sequence_clustering such alignments can then be used to detect and correct errors in short_reads in the first step of de_novo short to whom correspondence should be addressed reads are decomposed to k_mers and suffixprefix matches of length k are detected in most cases exact_matches are employed due to time constraint using approximate matches the length of contigs can be extended which leads to final assembly of better quality this problem reduces to all pairs similarity_search by collecting all k prefixes and suffixes into a sequence pool from the output only prefixsuffix pairs are reported basically most popular_methods solve the search problem by either of the following two approaches or a combination of them i finding a common k_mer and verify the match ii backtracking in an index structure i e suffix_array and fm_index the first type finds common k_mers in strings i e seed match and verify if two strings sharing the k_mer are neighbors indeed by extending the match with dynamic_programming it works perfectly well when the string is long enough however when strings are short and the threshold d is large the length of shared k_mers falls so short that too many candidate pairs have to be verified the second type stores the strings into an index structure most commonly a suffix_array then similar strings are found by traversing nodes of the corresponding suffix_tree this approach works fine if d is small e g d and employed in state of the art short_read tools such as bwa bowtie and soap however it becomes rapidly infeasible as d grows larger mainly because the complexity is exponential to d and no effective pruning is known eland and seqmap decompose sequences into blocks and use multiple indices to store all k concatenations of blocks obviously it requires much more memory compared with bwa which would be problematic in many scenarios multisorting uses multiple substring matches to narrow down the search effectively but it can find neighbors in terms of hamming_distance only our method termed slidesort finds a chain of common substrings by an efficient pattern growth algorithm which has been successfully_applied in data_mining tasks such as itemset mining a pattern corresponds to a sequence of substrings the space of all patterns is organized as a tree and systematically traversed our method does not rely on any index structure to avoid storage overhead instead radix sort is employed to find equivalent strings during pattern growth to demonstrate the correctness of our algorithm the existence of a common substring chain in any neighbor pair is proved first in addition we deliberately avoid reporting the same pair multiple times by duplication checking as a result our method scales easily to million sequences and ispage in this study we developed a novel method that enumerates all similar pairs from a string pool in terms of edit_distance the proposed method is based on a pattern growth algorithm that can effectively narrow down the search by finding chains of common k_mers using deliberate duplication checks the number of edit_distance calculations is reduced as much as possible slidesort was evaluated on large_datasets of short_reads as a result it was about times_faster than other index based_methods all these results demonstrate practical merits of slidesort one naturally arising question is if slidesort can be used for mapping in fact it is possible by storing the pattern tree in memory and using it as an index structure however the index would cost too much memory for genome_scale what we learned from this study is that all pairs similarity_search is essentially different from mapping in that one can employ pruning and dynamic memory management thus all pairs similarity_search is not a subproblem of mapping and deserves separate treatment in future work we would like to implement slidesort with parallel computation techniques recent_progress in hardware technology enables end_users to use many types of parallel_computing scheme such as sse and gpgpu slidesort would be further improved by using these technologies 
