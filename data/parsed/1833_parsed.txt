finishersc a repeat aware tool for upgrading de_novo using long_reads we introduce finishersc a repeat aware and scalable tool for upgrading de_novo using long_reads experiments with real_data suggest that finishersc can provide longer and higher quality contigs than existing_tools while maintaining high concordance availability_and the tool and data are available and will be maintained atin de_novo pipelines for long_reads reads are often trimmed or thrown away moreover there is no evidence that stateof the art assembly pipelines are data efficient in this work we ask whether state of the art assembly pipelines for long_reads have already used up all the available information from raw_reads to construct assembly of the highest possible quality to answer_this we first collect output contigs from the hgap pipeline and the associated raw_reads then we pass them into our tool finishersc to see if higher quality assemblies can be consistently obtained after post_processing although finishersc was originally designed to improve de_novo by long_reads it can also be used to scaffold long contigs formed by short_reads using long_reads for that use case we note that the contigs formed by short_reads can sometimes have length shorter than the average length of long_reads therefore we suggest users to filter out those short contigs before passing them into finishersc 
