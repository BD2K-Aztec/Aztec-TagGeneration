data_and bioclojure a functional library for the manipulation of biological_sequences motivation bioclojure is an open_source library for the manipulation of biological sequence_data written in the language clojure bioclojure aims to provide a functional framework for the processing of biological sequence_data that provides simple mechanisms for concurrency and lazy evaluation of large_datasets results bioclojure provides parsers and accessors for a range of biological sequence formats including uniprotxml genbank xml fasta and fastq in addition it provides wrappers for key analysis programs including blast signalp tmhmm and interproscan and parsers for analyzing their output all interfaces leverage clojures functional style and emphasize laziness and composability so that bioclojure and user_defined functions can be chained into simple pipelines that are thread safe and seamlessly integrate lazy evaluation availability_and bioclojure is distributed under the lesser gpl and the source_code is freely_available from githubfunctional programming is a programming style that treats computation as the evaluation of mathematical functions in its purest form functional programming removes the need for variable assignment by using immutable data_structures that eliminate the use of state and side_effects this ensures that functions will always return the same value given the same input this greatly_simplifies debugging and testing as individual functions can be assessed in isolation regardless of a global state immutability also greatly_simplifies concurrency and facilitates leveraging of multi core computing facilities with little or no modifications to functionally written code accordingly as a programming style functional programming offers advantages for software_development including i brevity ii simple handling of concurrency and iii seamless_integration of lazy evaluation simplifying the handling of large_datasets clojure is a lisp variant that encourages a functional style of programming by providing immutable data_structures functions as first class objects and uses recursive iteration as opposed to state based looping clojure is built on the java virtual_machine jvm and thus applications developed using bioclojure can be compiled into java byte code and ran on any platform that runs the jvm moreover libraries constructed using clojure can be called in java programs and conversely java classes and methods can be called from clojure programs making available a large number of thirdparty java libraries bioclojure aims to leverage the tools provided by clojure to provide a functional interface with biological sequence_data and associated programs bioclojure is similar in intent to other bioinformatics packages such as bioperl biopython bio and biojava but differs from these bioinformatics software libraries in its embrace of the functional style with the decreasing cost of biological analyses for example next_generation biologists are dealing with greater amounts of data and bioclojure is an attempt to provide tools emphasizing concurrency and lazy evaluation for manipulating these data bioclojure is a functional software library specifically_designed for parsing and processing biological sequence_data it provides a lazy and thread safe framework for accessing and streaming these data while using minimal amounts of memory presently we extensively use the library for the annotation of nucleotide and peptide_sequences arising from next_generation and the proteomic_analysis of complex_protein we plan to extend the functionality of the library by incorporating modules for phylogenetic and proteomic analyses and we welcome contributions from the community 
