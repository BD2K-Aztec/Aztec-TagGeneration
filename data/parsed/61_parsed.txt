ace accurate correction of errors using k_mer tries the quality of high_throughput next_generation data significantly_influences the performance and memory_consumption of assembly and mapping algorithms the most ubiquitous platform illumina mainly suffers from substitution_errors we have developed a tool ace based on k_mer tries to correct such errors on real miseq and hiseq illumina archives ace yields higher gains in terms of coverage depth outperforming state of the art competitors in the majority of cases availability_and ace is licensed under the gpl license and can be freely obtained at https github com sheikhizadeh ace the program is implemented in c and runs on most unix derived operating_systems genome_sequencing involves reading thousands or millions of genome fragments and reconstructing the original genome either by assembling these reads in de_novo projects or aligning them to a known reference_genome in re sequencing studies over the last decade next_generation ngs_technology dramatically_increased the ease with which material can be sequenced yielding millions of short_reads in a short time the lower_quality of the data compared to sanger_sequencing however significantly_influences performance and memory_consumption of assemblers and alignment_algorithms as a result there has been a growing interest in correcting errors in short_read archives sequencing_errors can result in substitutions insertions deletions and unconfirmed nucleotides represented by n symbols the most ubiquitous platform illumina mostly suffers from substitution_errors while for others like and ion_torrent insertions_and are most abundant as an error at a specific genomic_position occurs infrequently and randomly an erroneous base can be detected and corrected taking_advantage of the high_frequency of the reads that cover that position this is the idea behind all count_based error_correction methods which count k_mers using various data_structures for example shrec constructs a generalized suffix trie while hitec uses a suffix_array built upon shrec hybrid shrec captures indel_errors as well as substitutions sga performs error_correction using the fm_index derived from the compressed burrows_wheeler transform bless employs a bloom_filter and racer organizes bit encoded k_mers as bit integers and stores them in a hash_table fiona based on partial suffix_array is also able to deal with indel_errors alternatively k spectrum based error_correction methods like quake and musket collect all k_mers appearing in the set of reads and align those with a small hamming_distance from each other to achieve the correct consensus finally msa based_methods like coral apply multiple_sequence between reads that share k_mers to detect errors a recent survey provides a comprehensive_review of error_correction methods and establishes a common set of benchmark data and evaluation criteria here we present ace a new k_mer count_based algorithm we employ the k_mer trie a data_structure more time space efficient than the suffix_trees employed in shrec k_mer tries have been effective in solving some bioinformatics problems we experimentally compared the performance of ace in increasing the coverage depth breadth of reads k_mers to those of seven stateof the art tools using the benchmark data and following the same evaluation procedure as presented in a recent survey to be consistent with the result of the gain of ace in increasing the depth breadth of reads k_mers compared to that of the best tool indepthnote highlights indicate the level of improvement compares the gain of ace to that of its best competitor among seven state of the art read cleaners bless coral hitec musket racer sga and shrec more detailed results can be found in supplementary tables s s in these evaluations depth of coverage indicates the average number of times each base is covered by reads k_mers and breadth of coverage indicates the proportion of the genome covered by reads k_mers the first criterion is useful for quantitative applications and overlap_layout assembly while the second is more applicable for de_bruijn graph_based genome_assembly ace outperforms most other tools in terms of coverage depth gain improving on the best competitor on resp out of datasets for reads resp k_mers in particular for miseq data which contains more errors the improvements can be significant for coverage breadth the picture is less clear ace outperforms the best alternative tool on datasets on read_coverage breadth gain whereas k_mer coverage breadth gain was generally worse however all tools actually yield low read_coverage breadth on most miseq data as low as and decrease k_mer coverage breadth compared to the raw_data see supplementary tables s s s s compares the time and memory_consumption of ace to those of the three competitors which were able to successfully correct all datasets while for most datasets memory_consumption is reasonable ace has higher computational_cost than most other tools trading speed for accuracy we developed ace a command_line to accurately correct substitution_errors in illumina short_read archives ace generally outperforms the best among seven state of the art read cleaners in terms of coverage depth at higher computational_cost this makes it a useful tool for small_to datasets or applications where accuracy requirements warrant the investment in computational_resources in future work we aim to lower the runtime of ace by updating the k_mer trie instead of rebuilding it for each round of execution this future version should also be able to handle indel_errors to extend its application to all sequencing_platforms note time is given in seconds and memory in megabytes both per input mega base_pair 
