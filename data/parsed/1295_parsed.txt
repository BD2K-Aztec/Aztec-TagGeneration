gene_expression decoy free protein level false_discovery estimation motivation statistical validation of protein_identifications is an important issue in shotgun_proteomics the false_discovery fdr is a powerful statistical tool for evaluating the protein identification result several research_efforts have been made for fdr_estimation at the protein level however there are still certain drawbacks in the existing fdr_estimation methods based on the target_decoy strategy results in this article we propose a decoy free protein level fdr_estimation method under the null_hypothesis that each candidate protein matches an identified peptide totally at random we assign statistical_significance to protein_identifications in terms of the permutation p value and use these p values to calculate the fdr our method consists of three key_steps i generating random bipartite graphs with the same structure ii calculating the protein scores on these random_graphs and iii calculating the permutation p value and final fdr as it is time consuming or prohibitive to execute the protein inference algorithms for thousands of times in step ii we first train a linear_regression using the original bipartite_graph and identification scores provided by the target inference algorithm then we use the learned regression_model as a substitute of original protein inference_method to predict protein scores on shuffled graphs we test our method on six public available datasets the results show that our method is comparable with those state of the art algorithms in terms of estimation accuracy availability the source_code of our algorithm is available at https sourceforge net_projects plfdr shotgun_proteomics is a strategy that is capable of identifying complex_protein by combining high_performance and mass_spectrometry ms in shotgun_proteomics the protein identification procedure has two main steps peptide_identification and protein inference in peptide_identification we search the experimental ms_ms against a protein_sequence database to obtain a set of peptide_spectrum in protein inference we report a set of proteins by assembling peptide_identification results basically there are two major computational issues in protein identification that have to be solved on one hand we need to develop effective and fast identification inference algorithms at both the peptide level and the protein level on the other hand controlling the quality of identified peptides and inferred proteins is as important as developing identification algorithms inferred proteins are more biologically_relevant than identified peptides in a proteomics experiment therefore it is vital to control the quality of identification results at the protein level however the accurate assessment of statistical_significance of protein_identifications remains_an to date several research_efforts have been made to estimate the protein level error_rate in terms of false_discovery fdr the mainstream approach for fdr_estimation is the target_decoy strategy which searches a target_decoy concatenated database so that the number of false_positive protein_identifications can be estimated from the number of decoy proteins for instance the mayu method is a typical representative in this category by adapting the target_decoy strategy to the protein inference task the mayu method first assumes that protein_identifications containing false_positive peptide_spectrum are uniformly_distributed over the target_database then the number of false_positive protein_identifications is hypergeometrically distributed as a result the expected number of false_positive protein_identifications can be calculated as the probability weighted_average finally the protein identification fdr is computed as the ratio of the expected number of false_positive protein_identifications and the total amount of protein_identifications mapping to the target_database however this valuable_approach has certain drawbacks first searching both the target and the decoy_database will certainly double the running time in the protein identification process second the fdr_estimation result may be unstable as we usually use only one decoy_database with the same size of target_database finally the protein fdr value is calculated according to the distribution of decoy peptides across different proteins making it possible to propagate errors at the peptide level to the protein level in a non trivial manner in this article we propose a new method for estimating the fdr at the protein level without searching the decoy_database our method uses random permutation to assess_the of each protein in terms of p value and then calculates the final fdr first the input for the protein inference problem can be modeled as a bipartite_graph the left is a set of identified peptides and the right is the set of candidate to whom correspondence should be addressed the author published_by all_rights for permissions please_e journals permissions_oup com proteins with at least one matched peptide from this bipartite_graph a protein inference algorithm calculates the probability or score for each protein the null_hypothesis in our method is that each candidate protein matches an identified peptide totally at random under this null_hypothesis we first create multiple random bipartite graphs with the same set of peptides and proteins each random bipartite_graph has the same structure as the original one i e each protein peptide is connected to the same number of peptides proteins then we run the same protein inference algorithm on these random bipartite graphs and check if the score of each protein is significantly different on the real graph than on the randomized graphs that is we calculate the permutation p value of one protein as the percentage of random_graphs that produce a larger score than its original score finally we sort the proteins according to their p values and calculate the fdr at different thresholds with permutation p values as input using the method in storey and tibshirani our method has three key_steps i generating random bipartite graphs with the same structure ii calculating the protein scores on these random_graphs and iii calculating the permutation p value and fdr among these steps it is relatively easy to perform the first step and the third step however it is timeconsuming or prohibitive to execute some protein inference algorithms for thousands of times to fulfill step ii to address_this we first train a linear_regression using the original bipartite_graph and identification scores given by the target inference algorithm then we use the learned regression_model as a substitute of original protein inference_method to predict protein scores on shuffled graphs experimental_results on several real proteomics datasets show that our method is effective in fdr calculation overall the salient_features of the work described in this article can be summarized as follows it can calculate the fdr without using a decoy_database it can be applied to evaluate the protein identification results from any algorithm that outputs protein probabilities scores the rest of this article is organized as follows in section we describe our method in detail section_presents the experimental_results and section concludes the article for the first three datasets with reference sets we apply our method and mayu to estimate the fdr and check the difference between the estimated fdr and the ground_truth fdr we set f g as the threshold respectively for each threshold the smaller the difference the better the performance as shown in for the first two datasets our method is comparable with mayu while our method can provide a more accurate fdr_estimation on the yeast dataset when the p value is larger than we can also see that both our method and mayu have huge deviations from the real protein fdrs for the first two synthetic datasets probably because mixtures and sigma do not have characteristics of those complex proteomics datasets generated from real_samples thus the experimental result on the more complex yeast dataset indicates that both methods can perform relatively well on real_data and the advantage of our method begins to be visible for the other three datasets we compare our method with mayu and the naive target_decoy method for mayu we set f g as the threshold respectively when using the naive target_decoy method fdr is calculated by doubling the ratio of the number of decoy proteins and the total number of protein_identifications in the reported proteins as shown in the performance of our method is comparable with the naive target_decoy method and mayu one important parameter in our method is the number of random_graphs we test the influence of different numbers of random_graphs by comparing absolute_difference between the estimated fdr and the true fdr at each threshold we choose f g as the parameter value respectively as shown in we can see that the absolute_differences are almost the same when using different numbers of random_graphs this means that our method is insensitive to the number of random_graphs when the value is we also list the real and the estimated on six datasets in for the three datasets without reference sets we calculate the real by doubling the ratio of the number of decoy proteins in the datasets and the total number of protein_identifications in the datasets as shown in the estimated is far from its true value on mixtures and sigma this explains why the absolute fdr differences on these two datasets are large now we test the running efficiency of our method the running time of our method and mayu on six datasets is provided in all the experiments are tested on the dell studio xps workstation with ghz cpu and g main_memory it shows that our method is efficient in practice and faster than mayu in this article we propose a novel protein level fdr_estimation method we assume that each candidate protein matches an identified peptide totally at random then we use random permutation for assessing_the of each protein in terms of p value and calculate the final fdr the main advantage is that our method can calculate fdr without searching a decoy_database experimental_results on six proteomics datasets demonstrate the superiority of our method in the future work we will extend our method to validate the inference results of the algorithms that do not report protein probabilities or scores we plan to train a logistic regression_model which can assign a corresponding probability to performance on mixtures sigma and yeast when proteinlp upper and proteinprophet lower are used as the target protein inference algorithm respectively the difference with the benchmark jthe estimated fdr true fdrj for each threshold the smaller the difference the better the performance for mixtures standard proteins and contaminants are marked as the ground_truth for sigma all accessions in the final list of correct proteins provided by the abrf bioinformatics committee are used as the ground_truth the influence of different numbers of the random_graphs on three datasets with reference setsnote mayu can only report the fdr value at one threshold in each run whereas our method can estimate a series of fdr values at all the thresholds the execution time listed here for mayu is the average running time over different thresholds the number of random_graphs in our method is fixed to be note and are estimated when proteinlp and proteinprophet are used as the target protein inference algorithm respectively each reported protein meanwhile as can affect the fdr_estimation results significantly we will find more accurate estimation method in the future 
