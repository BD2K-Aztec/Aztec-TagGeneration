mmseqs software_suite for fast and deep clustering and searching of large protein sequence_sets motivation sequence_databases are growing fast challenging existing analysis_pipelines reducing the redundancy of sequence_databases by similarity clustering improves speed and sensitivity of iterative searches but existing_tools cannot efficiently cluster databases of the size of uniprot to maximum pairwise sequence_identity or below furthermore in metagenomics experiments typically large fractions of reads cannot be matched to any known sequence anymore because searching with sensitive but relatively slow tools e g blast or hmmer through comprehensive databases such as uniprot is becoming too costly results mmseqs many against many sequence searching is a software_suite for fast and deep clustering and searching of large_datasets such as uniprot or frame translated metagenomics sequencing_reads mmseqs contains three core modules a fast and sensitive prefiltering module that sums up the scores of similar k_mers between query and target_sequences an sse and multi core parallelized local_alignment module and a clustering module in our homology detection benchmarks mmseqs is much more sensitive and times_faster than ublast and rapsearch respectively although it does not reach blast sensitivity yet using its cascaded clustering workflow mmseqs can cluster large_databases down to sequence_identity at hundreds of times the speed of blastclust and much deeper than cd_hit and usearch mmseqs can also update a database clustering in linear instead of quadratic time its much improved_sensitivity speed trade_off should make mmseqs attractive for a wide_range of large_scale sequence_analysis tasks availability_and mmseqs is open_source available under gpl at https github com soedinglab mmseqsduring the last years sequencing_costs have come down from to less than for a human_genome at times coverage http www genome gov sequencingcosts as a consequence protein sequence_databases such as the uniprot database have been growing by a factor of every two v c the author published_by all_rights for permissions please_e journals permissions_oup com years leading to longer search times inflated and redundant results list large memory_requirements and saturating or decreasing sensitivities for informative sequence matches a solution is to compute a representative subset of sequences by clustering them by their similarity and selecting one representative per cluster such clustering schemes achieve a more even sampling leading to better sensitivities in sequence searches uniref provides representative subsets of uniprotkb clustered at and sequence_identity clustering schemes are also used in metagenomics projects to reduce the size and redundancy of the ever larger amounts of sequence_data several tools for clustering protein sequence_databases have been developed blastclust from the ncbi_blast package is sensitive but slow it uses greedy single_linkage clustering based on all versusall blastp searches the fast tools cd_hit usearch and kclust share several similarities first they employ the same incremental greedy clustering scheme in which each database sequence the query is compared with the representative sequences of already established clusters if one of the representative sequences is sufficiently_similar the query is added to this cluster or otherwise becomes the representative of a new cluster second all three tools employ a k_mer word based similarity prefilter that drastically_reduces the number of slow but accurate smith_waterman alignments the prefilters in cd_hit and usearch count the number of common identical k_mer words between sequences with k or for usearch and k between and for cd_hit to obtain a sufficient number of common k_mers between sequences with only residue wise sequence_identity cd_hit has to lower k to but this leads to a high_probability k for chance k_mer matches therefore the number of chance matches in an all against all comparison of n sequences of average length l is around nl k which becomes huge for small k since each chance match costs a constant amount of time to process short words lead to an enormous slow down kclust employs a k_mer based prefilter that can even detect pairs at sequence_identity at high_speed to keep the probability for chance matches low and speed high it uses long words with k or but to increase sensitivity at the same time it detects similar instead of just identical k_mers for each k_mer in the query_sequence it computes a list of all k_mers with a blosum bit score above a certain cut_off and finds identical matches to these similar k_mers in the database sequences the prefilter then scores each database sequence by the sum of similarity_scores of similar k_mers a further challenge arising from the rapid progress in highthroughput_sequencing is the need for sensitive but fast protein_sequence search_methods a large fraction of metagenomics reads cannot be mapped to any known sequence from a cultivated organism anymore because it has become too costly to search through the entire uniprot database using a sensitive but slow tool such as blastx it would take approximately cpu years to search with all frame translated sequences from reads of length nucleotides through the current uniprot database using blastx instead in most projects much smaller databases are searched such as kegg genome a collection of high_quality genome_sequences or the metaphlan database of unique clade specific marker_genes this carries the risk of missing some of the most interesting matches which do not conform to prior expectations to address this challenge a number of fast protein sequence_search tools have been developed tachyon pauda psimscan rapsearch lambda ublast and diamond the latter five which are the most sensitive in this list find exact_matches of spaced k_mers and extend the alignment around them mmseqs addresses the need for a clustering and search tool that is both fast and sensitive enough to be able to detect sequence matches down to residue wise sequence_identity while it uses the same core prefiltering algorithm as kclust it has various important_advantages i its organization into modules prefiltering alignment clustering and workflows increases flexibility and facilitates future extensions ii its search workflow can perform sequence searches with a speed times_faster than blast it finds similarities down to sequence_identity and is much more sensitive than similarly fast search tools iii its cascaded clustering workflow achieves much deeper clustering than kclust in a shorter time iv its database updating workflow adds sequences to a previously clustered set in linear time obviating the need for frequent reclustering in quadratic time v mmseqs is implemented highly efficiently using simd single instruction multiple data instructions to vectorize time critical loops vi it is parallelized using openmp to run on multi core cpus vii to save memory the database can be divided_into several parts and processed consecutively viii its prefilter uses a novel z_score statistic for higher sensitivity and a score correction for compositionally biased sequence_regions ix it offers the greedy set cover algorithm for clustering in addition to the simple incremental algorithm used by kclust usearch and cd_hit enabling deeper clusterings x it performs exact smithwaterman alignment based on the striped simd algorithm instead of the approximate k_mer dynamic_programming developed for kclust 
