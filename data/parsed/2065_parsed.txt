glay community_structure analysis of biological_networks glay provides cytoscape users an assorted collection of versatile community_structure algorithms and graph layout functions for network clustering and structured visualization high performance is achieved by dynamically linking highly optimized c functions to the cytoscape java program which makes glay especially suitable for decomposition display and exploratory_analysis of large biological_networks with the rapid development in experimental and computational technology the scale and dimension of accumulated molecular_interaction data have increased dramatically many online repositories such as michigan molecular_interaction mimi have made extensive gene wise interaction data readily available the challenge is then how to systematically explore and visualize such large and complex datasets for biological inferences one solution is to decompose such an interaction_network into communities of densely interacting nodes and imply functional_modules a variety of community detection_algorithms have been developed to tackle similar challenges in social_networks and they have been successfully extended to the biological_context proposed an interesting generic method combing association networks with community_structure detection_algorithms to infer network modules from microarray_data cytoscape is a well established open_source foundation for analysis and visualization of biological_networks currently there are several plugins developed for clustering and functional module detection such as mcode nemo and clustermaker http www cgl ucsf edu cytoscape cluster clustermaker html however some algorithms in clustermaker such as kmeans or hierarchical require the network to have numerical attributes to compute a distance_matrix for clustering mcode and nemo are engineered to identify small and highly intra connected clusters in a network without clustering all the nodes for example when executed on a mimi human to whom correspondence should be addressed interactome network of nodes and edges using the default_parameters mcode produced clusters in which clusters contain less than five nodes therefore it may not be suitable for global subdividing large_networks for exploratory_analysis in addition some of these plugins were not tailored for large_networks for example nemo failed when executing on the same mimi network on a ghz intel core i machine so_far no plugin offers a comprehensive collection of highly_efficient community detection_algorithms which could profoundly improve cluster_analysis if added to cytoscape the increasing size and complexity of networks also bring significant challenges to visualization generating a layout on such a network not only consumes considerable time and computational_resources but also rarely produces any informative outcome a typical case is a massive hairball as a result of applying forcebased layout to a large network nodes with many edges visual separation of clusters in a network can be improved by overlaying community_structure on a graphic layout addressing specific topology we therefore developed this cytoscape glay plugin to make commonly used community_structure detection_algorithms available glay also provides layout algorithms optimized for large_networks glay not only supplements existing clustering functions but also provides structured and informative visualization for more efficient exploration and analysis of large biological_networks summarizes the incorporated community detection_algorithms because of the distinct heuristics of algorithms running speed and the resultant community_structures vary some algorithms such as the leading eigenvector algorithm works well on a small network of a few hundred nodes but may not be scalable for large_networks others are optimized for large_datasets but may be less accurate for example the fast greedy_algorithm may produce communities with skewed community size_distribution because of the greedy optimization of the modularity score users may test different algorithms and evaluate performance by various benchmarks such as modularity number of communities and community size_distribution lists glay layout algorithms these algorithms are able to efficiently layout very large_networks or generate hierarchical trees a key_advantage of glay layout is that it allows the layout calculations of various algorithms to initiate from the current network layout state this adds significant flexibility since it enables the user to progressively improve the layout by either finetuning parameters or using different layout algorithms together for example for a very large network the user may specify a small number of iterations to obtain a draft layout and then gradually refine the layout by adding more iterations or tuning the parameters once done the user may superimpose the community_structure on the layout to investigate network_topology for more information please refer to the plugin homepage and igraph library documentation 
